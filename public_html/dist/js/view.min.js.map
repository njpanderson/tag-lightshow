{"version":3,"sources":["webpack:///view.min.js","webpack:///./~/njp-tag/src/View.js","webpack:///./src/js/view.js","webpack:///./~/njp-tag/src/lib/Communicator.js?2574","webpack:///./~/njp-tag/src/assets/constants.js?f9d4"],"names":["webpackJsonp","117","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_Communicator","_Communicator2","_constants","View","settings","arguments","length","undefined","this","_comms","window","location","origin","message","_handleAppMessage","bind","registerGuestAddress","top","_scripts","_callbacks","prototype","dialog","title","id","buttons","after","send","cmd","messageCommands","DIALOG","data","RELOAD","container","innerHTML","markup","_evalScripts","RESET","_reset","DIALOG_CALLBACK","apply","action","action_data","_this","document","querySelectorAll","forEach","script","index","new_script","createElement","src","type","onload","_loadScript","push","new","old","parentNode","replaceChild","302","view","querySelector","43","Communicator","callbacks","Error","_settings","name","_guests","_queue","message_index","_origin","assign","addEventListener","_receiveMessage","_sendPing","node","ping","_createMessage","opener","_post","_sendPong","pong","dest","_setGuestData","timer","clearInterval","live","to","guest","_getGuestById","_generateSendId","_addToQueue","_sendQueue","a","_getGuestByNode","hasOwnProperty","postMessage","event","originalEvent","source","_setGuestLive","originalMessage","host","prefix","performance","replace","c","r","now","Math","random","toString","7","actionTypes","UI_STATE","ZONE_ADD_ATTACHMENT","ZONE_EDIT_ATTACHMENT","ZONE_DETACH_ATTACHMENT","ZONE_CLEAR_ALL_ATTACHMENTS","SET_DIALOG_MODE","SET_ACTIVE_DROPLET","SET_TOUR_STAGE","SHOW_TOOLTIP","HIDE_TOOLTIP","SET_TOOLTIP_CONTENT","COMPLETE_FIRST_DROP","COMPLETE_LAST_DROP","RESET_APP","dialogModes","NONE","GENERAL","EDIT_DROPLET","TOUR","uiStates","INITIALISING","ACTIVE","errorCodes","NOT_A_DROPLET","setLabels","attrs","tagName"],"mappings":"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","file":"view.min.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 117:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _Communicator = __webpack_require__(43);\n\nvar _Communicator2 = _interopRequireDefault(_Communicator);\n\nvar _constants = __webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles the view frame communication with the App class.\n * @class\n */\nvar View = function View() {\n\tvar settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\tthis.settings = settings;\n\tthis._comms = new _Communicator2.default('view', window.location.origin, {\n\t\tmessage: this._handleAppMessage.bind(this)\n\t});\n\n\tthis._comms.registerGuestAddress('app', window.top);\n\n\tthis._scripts = [];\n\tthis._callbacks = {};\n};\n\nView.prototype = {\n\t/**\n  * Produces a dialog using the App class. Uses a callback workflow to avoid reliance\n  * on Promise polyfills or ES2015.\n  * @param {string} title - See {@link App#dialog}\n  * @param {mixes} message - See {@link App#dialog}\n  * @param {array} [buttons] - See {@link App#dialog}\n  * @param {function} [after] - Callback function to invoke once the dialog has been completed.\n  */\n\tdialog: function dialog(title, message) {\n\t\tvar buttons = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\t\tvar after = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n\t\tvar id;\n\n\t\t// send a dialog command to the App class\n\t\tid = this._comms.send('app', {\n\t\t\tcmd: _constants.messageCommands.DIALOG,\n\t\t\tdata: {\n\t\t\t\ttitle: title,\n\t\t\t\tmessage: message,\n\t\t\t\tbuttons: buttons\n\t\t\t}\n\t\t});\n\n\t\t// store the callback for later invocation, based on the generated message ID\n\t\tthis._callbacks[id] = after;\n\t},\n\n\t/**\n  * Handles messages sent via the Communicator class (mainly from the UI class).\n  * @param {object} message - Data, as sent by the originator\n  * @param {string} id - Message ID.\n  */\n\t_handleAppMessage: function _handleAppMessage(message, id) {\n\t\tswitch (message.cmd) {\n\t\t\tcase _constants.messageCommands.RELOAD:\n\t\t\t\t// reload request\n\t\t\t\tthis.settings.container.innerHTML = message.data.markup;\n\n\t\t\t\tthis._evalScripts();\n\t\t\t\tbreak;\n\n\t\t\tcase _constants.messageCommands.RESET:\n\t\t\t\tthis._reset();\n\t\t\t\tbreak;\n\n\t\t\tcase _constants.messageCommands.DIALOG_CALLBACK:\n\t\t\t\t// message from a dialog triggered with View#dialog\n\t\t\t\tif (this._callbacks[id]) {\n\t\t\t\t\t// id exists within callack object, fire and delete\n\t\t\t\t\tthis._callbacks[id].apply(this, [message.data, message.action, message.action_data]);\n\n\t\t\t\t\tthis._callbacks[id] = null;\n\t\t\t\t}\n\t\t}\n\t},\n\n\t/**\n  * Gather scripts (besides view script) and re-insert in order\n  */\n\t_evalScripts: function _evalScripts() {\n\t\tvar _this = this;\n\n\t\tthis._scripts = [];\n\n\t\tdocument.querySelectorAll('.view script').forEach(function (script, index) {\n\t\t\tvar new_script;\n\n\t\t\tnew_script = document.createElement('script');\n\t\t\tnew_script.src = script.src;\n\t\t\tnew_script.type = script.type;\n\t\t\tnew_script.onload = function () {\n\t\t\t\tthis._loadScript(index + 1);\n\t\t\t}.bind(_this);\n\n\t\t\t_this._scripts.push({\n\t\t\t\tnew: new_script,\n\t\t\t\told: script\n\t\t\t});\n\t\t});\n\n\t\tthis._loadScript(0);\n\t},\n\n\t_loadScript: function _loadScript(index) {\n\t\tif (this._scripts[index]) {\n\t\t\tthis._scripts[index].old.parentNode.replaceChild(this._scripts[index].new, this._scripts[index].old);\n\t\t}\n\t},\n\n\t_reset: function _reset() {\n\t\tthis.settings.container.innerHTML = '';\n\t}\n};\n\nexports.default = View;\n\n/***/ }),\n\n/***/ 302:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar View = __webpack_require__(117).default;\n\nwindow.view = new View({\n\tcontainer: document.querySelector('.view')\n});\n\n/***/ }),\n\n/***/ 43:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nvar Communicator = function Communicator(id, origin) {\n\tvar callbacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n\tif (typeof id !== 'string') {\n\t\tthrow new Error('Please choose a string-based ID for the guest.');\n\t}\n\n\tif (typeof origin !== 'string') {\n\t\tthrow new Error('Please choose a string-based origin address.');\n\t}\n\n\tthis._settings = {\n\t\tname: 'tag-comm-data'\n\t};\n\n\tthis._guests = {};\n\tthis._queue = {};\n\tthis.id = id;\n\tthis.message_index = 0;\n\n\tthis._origin = origin;\n\tthis._callbacks = Object.assign({\n\t\tmessage: null\n\t}, callbacks);\n\n\twindow.addEventListener('message', this._receiveMessage.bind(this), false);\n\n\tthis._sendPing();\n};\n\nCommunicator.prototype = {\n\t/**\n  * Attempt to ping source window\n  */\n\t_sendPing: function _sendPing(node) {\n\t\tvar ping = this._createMessage(null, {\n\t\t\tping: this.id\n\t\t});\n\n\t\tif (!node) {\n\t\t\tif (window.opener) {\n\t\t\t\tnode = window.opener;\n\t\t\t} else if (window.top !== window) {\n\t\t\t\tnode = window.top;\n\t\t\t}\n\t\t}\n\n\t\tif (node) {\n\t\t\tthis._post(node, ping);\n\t\t}\n\t},\n\n\t_sendPong: function _sendPong(node) {\n\t\tvar pong = this._createMessage(null, {\n\t\t\tpong: this.id\n\t\t});\n\n\t\tthis._post(node, pong);\n\t},\n\n\t/**\n  * Registers a single guest for communication purposes.\n  * @param {string} id - Guest ID. Used when sending messages.\n  * @param {mixed} dest - Destination node.\n  */\n\tregisterGuestAddress: function registerGuestAddress(id, dest) {\n\t\tif (typeof dest === 'undefined') {\n\t\t\tthrow new Error('Cannot register address for ' + id + '. ' + 'A guest address DOM node, window or frame must be defined.');\n\t\t}\n\n\t\tif (!('postMessage' in dest)) {\n\t\t\tthrow new Error('Communicator cannot send messages to destination. Please choose an HTMLElement ' + 'that supports the postMessage method');\n\t\t}\n\n\t\tif (typeof id !== 'string') {\n\t\t\tthrow new Error('Please choose a string-based ID for the guest.');\n\t\t}\n\n\t\t// register local address for guest\n\t\tthis._setGuestData(id, {\n\t\t\tid: id,\n\t\t\tnode: dest\n\t\t});\n\n\t\t// start timer\n\t\tif (this.timer) {\n\t\t\twindow.clearInterval(this.timer);\n\t\t}\n\t},\n\n\t/**\n  * Sets or replaces the guest data.\n  * @param {string} id - Guest ID.\n  * @param {object} data - Guest data.\n  * @private\n  */\n\t_setGuestData: function _setGuestData(id, data) {\n\t\tif (!this._guests[id]) {\n\t\t\tthis._guests[id] = {\n\t\t\t\tlive: false,\n\t\t\t\tnode: null\n\t\t\t};\n\t\t}\n\n\t\tObject.assign(this._guests[id], data);\n\t},\n\n\t/**\n  * @param {string} to - Guest ID, as stored.\n  * @param {mixed} message - Any JS compatible data to send as a message.\n  * @param {string} id - Add a message ID to allow the recipient to prevent race conditions.\n  * @description\n  * Sends a message to the defined guest.\n  * If no ID is defined, one will be generated.\n  * @returns {string} The ID of the message as defined or generated.\n  */\n\tsend: function send(to, message) {\n\t\tvar id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n\t\tvar guest = this._getGuestById(to);\n\n\t\tid = id || this._generateSendId(to);\n\n\t\tif (guest && guest.live) {\n\t\t\t// post message immediately\n\t\t\tthis._post(to, this._createMessage(message, {}, id));\n\t\t} else {\n\t\t\t// queue message for posting\n\t\t\tthis._addToQueue(to, message, id);\n\t\t}\n\n\t\treturn id;\n\t},\n\n\t/**\n  * Adds a message to the local 'outbox' for the guest (by ID).\n  */\n\t_addToQueue: function _addToQueue(to, message, id) {\n\t\tif (!this._queue[to]) {\n\t\t\tthis._queue[to] = [];\n\t\t}\n\n\t\tthis._queue[to].push({\n\t\t\tmessage: message,\n\t\t\tid: id\n\t\t});\n\t},\n\n\t_sendQueue: function _sendQueue(to) {\n\t\tvar a;\n\n\t\tif (this._queue[to] && this._guests[to]) {\n\t\t\t// send messages in the order they were queued\n\t\t\tfor (a = 0; a < this._queue[to].length; a += 1) {\n\t\t\t\tthis._post(this._guests[to].node, this._createMessage(this._queue[to][a].message, {}, this._queue[to][a].id));\n\t\t\t}\n\n\t\t\t// clear queue for this recipient\n\t\t\tthis._queue[to] = [];\n\t\t}\n\t},\n\n\t/**\n  * Gets a communicator guest by its ID, or returns `null`.\n  * @returns {mixed} Guest data, or `null`.\n  * @private\n  */\n\t_getGuestById: function _getGuestById(id) {\n\t\treturn this._guests[id] || null;\n\t},\n\n\t/**\n  * Get a guest by known node (i.e. that registered in `this._guests`)\n  * @private\n  */\n\t_getGuestByNode: function _getGuestByNode(node) {\n\t\tvar id;\n\n\t\tfor (id in this._guests) {\n\t\t\tif (this._guests.hasOwnProperty(id) && this._guests[id].node === node) {\n\t\t\t\treturn this._getGuestById(id);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n  * Actually posts the message to the destination.\n  * @param {string} to - Guest ID.\n  * @param {mixed} message - Any JS compatible data to send as a message.\n  * @private\n  */\n\t_post: function _post(to, message) {\n\t\tvar guest, node;\n\n\t\tif (typeof to === 'string') {\n\t\t\tguest = this._getGuestById(to);\n\n\t\t\tif (!guest.node) {\n\t\t\t\tthrow new Error('Cannot communicate with guest \"' + to + '\". Has its Node address been registered?');\n\t\t\t}\n\n\t\t\tnode = guest.node;\n\t\t} else {\n\t\t\tnode = to;\n\t\t}\n\n\t\tnode.postMessage(message, this._origin);\n\t},\n\n\t/**\n  * Invoked when a live message is received.\n  * @private\n  */\n\t_receiveMessage: function _receiveMessage(event) {\n\t\tvar origin = event.origin || event.originalEvent.origin,\n\t\t    source = event.source || event.originalEvent.source,\n\t\t    message = event.data,\n\t\t    guest;\n\n\t\tif (origin !== location.origin) return;\n\n\t\tif ((message.ping || message.pong) && this._getGuestByNode(source)) {\n\t\t\t// received a ping/pong from valid source\n\t\t\tguest = message.ping || message.pong;\n\n\t\t\tthis._setGuestLive(guest);\n\t\t\tthis._sendQueue(guest);\n\n\t\t\tif (message.ping) {\n\t\t\t\t// pong back a ping (don't pong a pong or we'll be here forever)\n\t\t\t\tthis._sendPong(source);\n\t\t\t}\n\t\t}\n\n\t\tif (this._callbacks.message && message.originalMessage) {\n\t\t\tthis._callbacks.message(message.originalMessage, message.id);\n\t\t}\n\t},\n\n\t_setGuestLive: function _setGuestLive(id) {\n\t\tthis._setGuestData(id, {\n\t\t\tlive: true\n\t\t});\n\t},\n\n\t_createMessage: function _createMessage(message, data, id) {\n\t\treturn Object.assign({}, data, {\n\t\t\thost: this.id,\n\t\t\tid: id,\n\t\t\toriginalMessage: message\n\t\t});\n\t},\n\n\t_generateSendId: function _generateSendId(prefix) {\n\t\tif (window.performance && 'now' in window.performance) {\n\t\t\treturn prefix + '-xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n\t\t\t\tvar r = (window.performance.now() + Math.random() * 16) % 16 | 0;\n\t\t\t\treturn (c === 'x' ? r : r & 0x3 | 0x8).toString(16);\n\t\t\t});\n\t\t} else {\n\t\t\treturn prefix + '-' + this.message_index++;\n\t\t}\n\t}\n};\n\nexports.default = Communicator;\n\n/***/ }),\n\n/***/ 7:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n/**\n * @module assets/constants\n */\n\n/**\n * Action types\n * @private\n */\nvar actionTypes = exports.actionTypes = {\n\tUI_STATE: 'ui-state',\n\tZONE_ADD_ATTACHMENT: 'zone-add-attachment',\n\tZONE_EDIT_ATTACHMENT: 'zone-edit-attachment',\n\tZONE_DETACH_ATTACHMENT: 'zone-detach-attachment',\n\tZONE_CLEAR_ALL_ATTACHMENTS: 'zone-clear-all-attachments',\n\tSET_DIALOG_MODE: 'set-dialog-mode',\n\tSET_ACTIVE_DROPLET: 'set-active-droplet',\n\tSET_TOUR_STAGE: 'set-tour-stage',\n\tSHOW_TOOLTIP: 'show-tooltip',\n\tHIDE_TOOLTIP: 'hide-tooltip',\n\tSET_TOOLTIP_CONTENT: 'set-tooltip-content',\n\tCOMPLETE_FIRST_DROP: 'complete-first-drop',\n\tCOMPLETE_LAST_DROP: 'complete-last-drop',\n\tRESET_APP: 'reset-app'\n};\n\n/**\n * Dialog modes\n */\nvar dialogModes = exports.dialogModes = {\n\tNONE: 'none',\n\tGENERAL: 'general',\n\tEDIT_DROPLET: 'edit-droplet',\n\tTOUR: 'tour'\n};\n\nvar uiStates = exports.uiStates = {\n\tINITIALISING: 'initialising',\n\tACTIVE: 'active'\n};\n\nvar messageCommands = exports.messageCommands = {\n\tRELOAD: 'reload',\n\tRESET: 'reset',\n\tDIALOG: 'dialog',\n\tDIALOG_CALLBACK: 'dialog-callback'\n};\n\nvar errorCodes = exports.errorCodes = {\n\tNOT_A_DROPLET: 'A valid Droplet instance must be passed to DropZone#willAccept.'\n};\n\nvar setLabels = exports.setLabels = {\n\tvalue: 'Value',\n\tattrs: 'Attributes',\n\ttagName: 'Tag name',\n\tinnerHTML: 'HTML content'\n};\n\n/***/ })\n\n},[302]);\n\n\n// WEBPACK FOOTER //\n// view.min.js","import Communicator from './lib/Communicator';\nimport { messageCommands } from './assets/constants';\n\n/**\n * Handles the view frame communication with the App class.\n * @class\n */\nvar View = function(settings = {}) {\n\tthis.settings = settings;\n\tthis._comms = new Communicator('view', window.location.origin, {\n\t\tmessage: this._handleAppMessage.bind(this)\n\t});\n\n\tthis._comms.registerGuestAddress('app', window.top);\n\n\tthis._scripts = [];\n\tthis._callbacks = {};\n};\n\nView.prototype = {\n\t/**\n\t * Produces a dialog using the App class. Uses a callback workflow to avoid reliance\n\t * on Promise polyfills or ES2015.\n\t * @param {string} title - See {@link App#dialog}\n\t * @param {mixes} message - See {@link App#dialog}\n\t * @param {array} [buttons] - See {@link App#dialog}\n\t * @param {function} [after] - Callback function to invoke once the dialog has been completed.\n\t */\n\tdialog: function(title, message, buttons = [], after = null) {\n\t\tvar id;\n\n\t\t// send a dialog command to the App class\n\t\tid = this._comms.send('app', {\n\t\t\tcmd: messageCommands.DIALOG,\n\t\t\tdata: {\n\t\t\t\ttitle,\n\t\t\t\tmessage,\n\t\t\t\tbuttons\n\t\t\t}\n\t\t});\n\n\t\t// store the callback for later invocation, based on the generated message ID\n\t\tthis._callbacks[id] = after;\n\t},\n\n\t/**\n\t * Handles messages sent via the Communicator class (mainly from the UI class).\n\t * @param {object} message - Data, as sent by the originator\n\t * @param {string} id - Message ID.\n\t */\n\t_handleAppMessage: function(message, id) {\n\t\tswitch (message.cmd) {\n\t\tcase messageCommands.RELOAD:\n\t\t\t// reload request\n\t\t\tthis.settings.container.innerHTML = message.data.markup;\n\n\t\t\tthis._evalScripts();\n\t\t\tbreak;\n\n\t\tcase messageCommands.RESET:\n\t\t\tthis._reset();\n\t\t\tbreak;\n\n\t\tcase messageCommands.DIALOG_CALLBACK:\n\t\t\t// message from a dialog triggered with View#dialog\n\t\t\tif (this._callbacks[id]) {\n\t\t\t\t// id exists within callack object, fire and delete\n\t\t\t\tthis._callbacks[id].apply(this, [\n\t\t\t\t\tmessage.data,\n\t\t\t\t\tmessage.action,\n\t\t\t\t\tmessage.action_data\n\t\t\t\t]);\n\n\t\t\t\tthis._callbacks[id] = null;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Gather scripts (besides view script) and re-insert in order\n\t */\n\t_evalScripts: function() {\n\t\tthis._scripts = [];\n\n\t\tdocument.querySelectorAll('.view script').forEach((script, index) => {\n\t\t\tvar new_script;\n\n\t\t\tnew_script = document.createElement('script');\n\t\t\tnew_script.src = script.src;\n\t\t\tnew_script.type = script.type;\n\t\t\tnew_script.onload = function() {\n\t\t\t\tthis._loadScript(index + 1);\n\t\t\t}.bind(this);\n\n\t\t\tthis._scripts.push({\n\t\t\t\tnew: new_script,\n\t\t\t\told: script\n\t\t\t});\n\t\t});\n\n\t\tthis._loadScript(0);\n\t},\n\n\t_loadScript: function(index) {\n\t\tif (this._scripts[index]) {\n\t\t\tthis._scripts[index].old.parentNode.replaceChild(\n\t\t\t\tthis._scripts[index].new,\n\t\t\t\tthis._scripts[index].old\n\t\t\t);\n\t\t}\n\t},\n\n\t_reset: function() {\n\t\tthis.settings.container.innerHTML = '';\n\t}\n};\n\nexport default View;\n\n\n// WEBPACK FOOTER //\n// ./~/njp-tag/src/View.js","const View = require('njp-tag/src/View').default;\n\nwindow.view = new View({\n\tcontainer: document.querySelector('.view')\n});\n\n\n// WEBPACK FOOTER //\n// ./src/js/view.js","var Communicator = function(id, origin, callbacks = {}) {\n\tif (typeof id !== 'string') {\n\t\tthrow new Error('Please choose a string-based ID for the guest.');\n\t}\n\n\tif (typeof origin !== 'string') {\n\t\tthrow new Error('Please choose a string-based origin address.');\n\t}\n\n\tthis._settings = {\n\t\tname: 'tag-comm-data'\n\t};\n\n\tthis._guests = {};\n\tthis._queue = {};\n\tthis.id = id;\n\tthis.message_index = 0;\n\n\tthis._origin = origin;\n\tthis._callbacks = Object.assign({\n\t\tmessage: null\n\t}, callbacks);\n\n\twindow.addEventListener('message', this._receiveMessage.bind(this), false);\n\n\tthis._sendPing();\n};\n\nCommunicator.prototype = {\n\t/**\n\t * Attempt to ping source window\n\t */\n\t_sendPing: function(node) {\n\t\tvar ping = this._createMessage(null, {\n\t\t\tping: this.id\n\t\t});\n\n\t\tif (!node) {\n\t\t\tif (window.opener) {\n\t\t\t\tnode = window.opener;\n\t\t\t} else if (window.top !== window) {\n\t\t\t\tnode = window.top;\n\t\t\t}\n\t\t}\n\n\t\tif (node) {\n\t\t\tthis._post(node, ping);\n\t\t}\n\t},\n\n\t_sendPong: function(node) {\n\t\tvar pong = this._createMessage(null, {\n\t\t\tpong: this.id\n\t\t});\n\n\t\tthis._post(node, pong);\n\t},\n\n\t/**\n\t * Registers a single guest for communication purposes.\n\t * @param {string} id - Guest ID. Used when sending messages.\n\t * @param {mixed} dest - Destination node.\n\t */\n\tregisterGuestAddress: function(id, dest) {\n\t\tif (typeof dest === 'undefined') {\n\t\t\tthrow new Error(\n\t\t\t\t'Cannot register address for ' + id + '. ' +\n\t\t\t\t'A guest address DOM node, window or frame must be defined.'\n\t\t\t);\n\t\t}\n\n\t\tif (!('postMessage' in dest)) {\n\t\t\tthrow new Error(\n\t\t\t\t'Communicator cannot send messages to destination. Please choose an HTMLElement ' +\n\t\t\t\t'that supports the postMessage method'\n\t\t\t);\n\t\t}\n\n\t\tif (typeof id !== 'string') {\n\t\t\tthrow new Error('Please choose a string-based ID for the guest.');\n\t\t}\n\n\t\t// register local address for guest\n\t\tthis._setGuestData(id, {\n\t\t\tid,\n\t\t\tnode: dest\n\t\t});\n\n\t\t// start timer\n\t\tif (this.timer) {\n\t\t\twindow.clearInterval(this.timer);\n\t\t}\n\t},\n\n\t/**\n\t * Sets or replaces the guest data.\n\t * @param {string} id - Guest ID.\n\t * @param {object} data - Guest data.\n\t * @private\n\t */\n\t_setGuestData: function(id, data) {\n\t\tif (!this._guests[id]) {\n\t\t\tthis._guests[id] = {\n\t\t\t\tlive: false,\n\t\t\t\tnode: null\n\t\t\t};\n\t\t}\n\n\t\tObject.assign(this._guests[id], data);\n\t},\n\n\t/**\n\t * @param {string} to - Guest ID, as stored.\n\t * @param {mixed} message - Any JS compatible data to send as a message.\n\t * @param {string} id - Add a message ID to allow the recipient to prevent race conditions.\n\t * @description\n\t * Sends a message to the defined guest.\n\t * If no ID is defined, one will be generated.\n\t * @returns {string} The ID of the message as defined or generated.\n\t */\n\tsend: function(to, message, id = null) {\n\t\tvar guest = this._getGuestById(to);\n\n\t\tid = (id || this._generateSendId(to));\n\n\t\tif (guest && guest.live) {\n\t\t\t// post message immediately\n\t\t\tthis._post(to, this._createMessage(message, {}, id));\n\t\t} else {\n\t\t\t// queue message for posting\n\t\t\tthis._addToQueue(to, message, id);\n\t\t}\n\n\t\treturn id;\n\t},\n\n\t/**\n\t * Adds a message to the local 'outbox' for the guest (by ID).\n\t */\n\t_addToQueue: function(to, message, id) {\n\t\tif (!this._queue[to]) {\n\t\t\tthis._queue[to] = [];\n\t\t}\n\n\t\tthis._queue[to].push({\n\t\t\tmessage,\n\t\t\tid\n\t\t});\n\t},\n\n\t_sendQueue: function(to) {\n\t\tvar a;\n\n\t\tif (this._queue[to] && this._guests[to]) {\n\t\t\t// send messages in the order they were queued\n\t\t\tfor (a = 0; a < this._queue[to].length; a += 1) {\n\t\t\t\tthis._post(\n\t\t\t\t\tthis._guests[to].node,\n\t\t\t\t\tthis._createMessage(\n\t\t\t\t\t\tthis._queue[to][a].message,\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tthis._queue[to][a].id\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// clear queue for this recipient\n\t\t\tthis._queue[to] = [];\n\t\t}\n\t},\n\n\t/**\n\t * Gets a communicator guest by its ID, or returns `null`.\n\t * @returns {mixed} Guest data, or `null`.\n\t * @private\n\t */\n\t_getGuestById: function(id) {\n\t\treturn this._guests[id] || null;\n\t},\n\n\t/**\n\t * Get a guest by known node (i.e. that registered in `this._guests`)\n\t * @private\n\t */\n\t_getGuestByNode: function(node) {\n\t\tvar id;\n\n\t\tfor (id in this._guests) {\n\t\t\tif (this._guests.hasOwnProperty(id) &&\n\t\t\t\tthis._guests[id].node === node) {\n\t\t\t\treturn this._getGuestById(id);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Actually posts the message to the destination.\n\t * @param {string} to - Guest ID.\n\t * @param {mixed} message - Any JS compatible data to send as a message.\n\t * @private\n\t */\n\t_post: function(to, message) {\n\t\tvar guest, node;\n\n\t\tif (typeof to === 'string') {\n\t\t\tguest = this._getGuestById(to);\n\n\t\t\tif (!guest.node) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Cannot communicate with guest \"' + to + '\". Has its Node address been registered?'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tnode = guest.node;\n\t\t} else {\n\t\t\tnode = to;\n\t\t}\n\n\t\tnode.postMessage(message, this._origin);\n\t},\n\n\t/**\n\t * Invoked when a live message is received.\n\t * @private\n\t */\n\t_receiveMessage: function(event) {\n\t\tvar origin = event.origin || event.originalEvent.origin,\n\t\t\tsource = event.source || event.originalEvent.source,\n\t\t\tmessage = event.data,\n\t\t\tguest;\n\n\t\tif (origin !== location.origin)\n\t\t\treturn;\n\n\t\tif ((message.ping || message.pong) && this._getGuestByNode(source)) {\n\t\t\t// received a ping/pong from valid source\n\t\t\tguest = message.ping || message.pong;\n\n\t\t\tthis._setGuestLive(guest);\n\t\t\tthis._sendQueue(guest);\n\n\t\t\tif (message.ping) {\n\t\t\t\t// pong back a ping (don't pong a pong or we'll be here forever)\n\t\t\t\tthis._sendPong(source);\n\t\t\t}\n\t\t}\n\n\t\tif (this._callbacks.message && message.originalMessage) {\n\t\t\tthis._callbacks.message(\n\t\t\t\tmessage.originalMessage,\n\t\t\t\tmessage.id\n\t\t\t);\n\t\t}\n\t},\n\n\t_setGuestLive: function(id) {\n\t\tthis._setGuestData(id, {\n\t\t\tlive: true\n\t\t});\n\t},\n\n\t_createMessage: function(message, data, id) {\n\t\treturn Object.assign({}, data, {\n\t\t\thost: this.id,\n\t\t\tid: id,\n\t\t\toriginalMessage: message\n\t\t});\n\t},\n\n\t_generateSendId: function(prefix) {\n\t\tif (window.performance && ('now' in window.performance)) {\n\t\t\treturn prefix + '-xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n\t\t\t\tvar r = (window.performance.now() + Math.random() * 16) % 16 | 0;\n\t\t\t\treturn (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n\t\t\t});\n\t\t} else {\n\t\t\treturn prefix + '-' + (this.message_index++);\n\t\t}\n\t}\n};\n\nexport default Communicator;\n\n\n// WEBPACK FOOTER //\n// ./~/njp-tag/src/lib/Communicator.js","/**\n * @module assets/constants\n */\n\n/**\n * Action types\n * @private\n */\nexport const actionTypes = {\n\tUI_STATE: 'ui-state',\n\tZONE_ADD_ATTACHMENT: 'zone-add-attachment',\n\tZONE_EDIT_ATTACHMENT: 'zone-edit-attachment',\n\tZONE_DETACH_ATTACHMENT: 'zone-detach-attachment',\n\tZONE_CLEAR_ALL_ATTACHMENTS: 'zone-clear-all-attachments',\n\tSET_DIALOG_MODE: 'set-dialog-mode',\n\tSET_ACTIVE_DROPLET: 'set-active-droplet',\n\tSET_TOUR_STAGE: 'set-tour-stage',\n\tSHOW_TOOLTIP: 'show-tooltip',\n\tHIDE_TOOLTIP: 'hide-tooltip',\n\tSET_TOOLTIP_CONTENT: 'set-tooltip-content',\n\tCOMPLETE_FIRST_DROP: 'complete-first-drop',\n\tCOMPLETE_LAST_DROP: 'complete-last-drop',\n\tRESET_APP: 'reset-app'\n};\n\n/**\n * Dialog modes\n */\nexport const dialogModes = {\n\tNONE: 'none',\n\tGENERAL: 'general',\n\tEDIT_DROPLET: 'edit-droplet',\n\tTOUR: 'tour'\n};\n\nexport const uiStates = {\n\tINITIALISING: 'initialising',\n\tACTIVE: 'active'\n};\n\nexport const messageCommands = {\n\tRELOAD: 'reload',\n\tRESET: 'reset',\n\tDIALOG: 'dialog',\n\tDIALOG_CALLBACK: 'dialog-callback'\n};\n\nexport const errorCodes = {\n\tNOT_A_DROPLET: 'A valid Droplet instance must be passed to DropZone#willAccept.'\n};\n\nexport const setLabels = {\n\tvalue: 'Value',\n\tattrs: 'Attributes',\n\ttagName: 'Tag name',\n\tinnerHTML: 'HTML content'\n};\n\n\n// WEBPACK FOOTER //\n// ./~/njp-tag/src/assets/constants.js"],"sourceRoot":""}