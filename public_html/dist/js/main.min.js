webpackJsonp([0],{

/***/ 113:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _redux = __webpack_require__(31);

__webpack_require__(142);

__webpack_require__(278);

var _UI = __webpack_require__(141);

var _UI2 = _interopRequireDefault(_UI);

var _Droplet = __webpack_require__(23);

var _Droplet2 = _interopRequireDefault(_Droplet);

var _ajax = __webpack_require__(77);

var _ajax2 = _interopRequireDefault(_ajax);

var _Template = __webpack_require__(76);

var _Template2 = _interopRequireDefault(_Template);

var _actions = __webpack_require__(43);

var _actions2 = _interopRequireDefault(_actions);

var _reducers = __webpack_require__(143);

var _reducers2 = _interopRequireDefault(_reducers);

var _defaults = __webpack_require__(118);

var _defaults2 = _interopRequireDefault(_defaults);

var _constants = __webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Main application wraper.
 * @class
 */
var App = function App() {
	var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	this.settings = Object.deepAssign({}, App.defaults, settings);
	this._init();

	// set Template.onElementRender to settings, if defined
	if (settings.onElementRender) {
		_Template2.default.onElementRender = settings.onElementRender.bind(this);
	}
};

App.prototype = {
	_init: function _init() {
		this._refs = {
			ui: {
				app: document.querySelector('.app')
			},
			mounted: {},
			components: {}
		};

		// app data store (not stateful)
		this._data = {
			template: '',
			pallet: []
		};

		// templates module
		this._template = new _Template2.default(this, this.settings);
	},

	/**
  * Load the template/pallet data and activate Tag.
  */
	load: function load(url, pallet) {
		var _this = this;

		return this._template.load(url).then(function () {
			// load the HTML template and create it
			var data = _this._template.create();

			_this._data.drop_zones = data.drop_zones;
			_this._data.template = data.template;
		}).then(function () {
			// load the JSON based pallet data
			return _this._loadPallet(pallet);
		}).then(function () {
			var stored_state = false;

			// create state store
			if (stored_state) {
				// app state store - from session
				// !TODO
			} else {
				// app state store - default
				_this._store = (0, _redux.createStore)(_reducers2.default);
			}

			// activate the UI
			_this._UI = new _UI2.default(_this, _this.settings, _this._refs, _this._data, _this._store, _this._template);

			// render
			_this._UI.render();

			_this._store.dispatch(_actions2.default.setUIState(_constants.uiStates.ACTIVE));
		}).catch(function (error) {
			throw error;
		});
	},

	/**
  * Load the pallet data
  * @private
  */
	_loadPallet: function _loadPallet(url) {
		var _this2 = this;

		return _ajax2.default.get(url).then(function (response) {
			var pallet, item;

			try {
				pallet = JSON.parse(response.text);
			} catch (e) {
				return Promise.reject(new Error('Pallet data at file "' + url + '"" could not be parsed.' + ' is it valid JSON?'));
			}

			if (Array.isArray(pallet) && pallet.length) {
				for (item in pallet) {
					_this2._data.pallet.push(new _Droplet2.default(pallet[item]));
				}
			} else {
				throw new Error('Looks like the pallet at path ' + url + ' isn’t a valid array in JSON format.');
			}
		}).catch(function (error) {
			throw error;
		});
	}
};

/**
 * Default settings.
 */
App.defaults = _defaults2.default;

exports.default = App;

/***/ }),

/***/ 117:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _constants = __webpack_require__(9);

// default state for...
exports.default = {
	// general application
	app: {
		ui_state: _constants.uiStates.INITIALISING,
		active: false,
		active_droplet_id: ''
	},

	// active zones and current attachments
	zones: {},

	// dialog mode and state
	dialog: {
		mode: _constants.dialogModes.NONE,
		state: {}
	}
};

/***/ }),

/***/ 118:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = {
	classes: {
		canvas: 'tag-canvas',
		canvas_active: 'active',
		droplet_active: 'droplet-active',
		is_dragging: 'dragging',
		item_dragging: 'item-dragging',
		dropzone: 'drop-zone',
		dropzone_target: 'target',
		dropzone_is_active: 'is-active',
		dropzone_is_target: 'is-target',
		attached: 'attached',
		text_element: 'text',
		hidden: 'hidden',
		droplet: {
			node: 'droplet',
			active: 'active'
		},
		dialog: {
			main: 'dialog',
			visible: 'visible',
			container: 'dialog-container',
			heading: 'dialog-heading'
		}
	},
	selectors: {
		drop_zone: '.drop-zone .target',
		droplet: '.droplet'
	},
	template: {
		initial_flex_basis: 50
	},
	view: {
		src: 'view.html'
	},
	dropZone: {
		label: '...'
	},
	onElementRender: null
};

/***/ }),

/***/ 119:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.optionValueSet = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var optionValueSet = exports.optionValueSet = function optionValueSet(values) {
	var nodes = [],
	    key;

	if (Array.isArray(values)) {
		values.forEach(function (value, index) {
			var key = 'item-' + index;
			nodes.push(_react2.default.createElement(
				'option',
				{ key: key, value: value },
				value
			));
		});
	} else if ((typeof values === 'undefined' ? 'undefined' : _typeof(values)) === 'object') {
		for (key in values) {
			nodes.push(_react2.default.createElement(
				'option',
				{ key: key, value: key },
				values[key]
			));
		}
	}

	return nodes;
};

/***/ }),

/***/ 120:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _utils = __webpack_require__(24);

var _View = __webpack_require__(136);

var _View2 = _interopRequireDefault(_View);

var _TemplateContainer = __webpack_require__(124);

var _TemplateContainer2 = _interopRequireDefault(_TemplateContainer);

var _DialogContainer = __webpack_require__(122);

var _DialogContainer2 = _interopRequireDefault(_DialogContainer);

var _PalletContainer = __webpack_require__(123);

var _PalletContainer2 = _interopRequireDefault(_PalletContainer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Canvas = function (_Component) {
	_inherits(Canvas, _Component);

	function Canvas(props) {
		_classCallCheck(this, Canvas);

		return _possibleConstructorReturn(this, (Canvas.__proto__ || Object.getPrototypeOf(Canvas)).call(this, props));
	}

	_createClass(Canvas, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			if (typeof this.props.onMount === 'function') {
				this.props.onMount('canvas');
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var classes = [this.props.settings.classes.canvas, this.props.state.ui_state];

			if (this.props.state.active_droplet_id !== '') {
				classes.push(this.props.settings.classes.droplet_active);
			}

			return _react2.default.createElement(
				'div',
				{ className: classes.join(' '),
					ref: (0, _utils.collectRef)(this.props, 'canvas')
				},
				_react2.default.createElement(
					'header',
					null,
					_react2.default.createElement(
						'h1',
						null,
						'<',
						_react2.default.createElement(
							'b',
							null,
							'Tag'
						),
						'>'
					)
				),
				_react2.default.createElement(
					'div',
					{ className: 'main' },
					_react2.default.createElement(_TemplateContainer2.default, {
						data: this.props.data,
						settings: this.props.settings,
						refCollector: this.props.refCollector,
						onMount: this.props.onMount,
						onAttachmentClick: this.props.onAttachmentClick,
						onDropZoneClick: this.props.onDropZoneClick,
						template: this.props.data.template,
						class_ui: this.props.class_ui
					}),
					_react2.default.createElement('div', { className: 'drag-handle',
						onMouseDown: this.props.onDragHandlePress,
						onMouseUp: this.props.onDragHandlePress,
						onTouchStart: this.props.onDragHandlePress,
						onTouchEnd: this.props.onDragHandlePress,
						ref: (0, _utils.collectRef)(this.props, 'drag_handle') }),
					_react2.default.createElement(_View2.default, {
						settings: this.props.settings,
						onMount: this.props.onMount,
						refCollector: this.props.refCollector })
				),
				_react2.default.createElement(_PalletContainer2.default, {
					data: this.props.data,
					settings: this.props.settings,
					onMount: this.props.onMount,
					onDropletClick: this.props.onDropletClick,
					refCollector: this.props.refCollector }),
				_react2.default.createElement('div', { className: 'overlay' }),
				_react2.default.createElement(_DialogContainer2.default, {
					data: this.props.data,
					settings: this.props.settings,
					class_ui: this.props.class_ui,
					class_template: this.props.class_template,
					onDialogComplete: this.props.onDialogComplete,
					onDialogCancel: this.props.onDialogCancel })
			);
		}
	}]);

	return Canvas;
}(_react.Component);

Canvas.propTypes = {
	// from CanvasContainer
	state: _react.PropTypes.object.isRequired,

	// from UI#render
	data: _react.PropTypes.object.isRequired,
	onMount: _react.PropTypes.func.isRequired,
	onDialogComplete: _react.PropTypes.func.isRequired,
	onDialogCancel: _react.PropTypes.func.isRequired,
	onAttachmentClick: _react.PropTypes.func.isRequired,
	onDropletClick: _react.PropTypes.func.isRequired,
	onDropZoneClick: _react.PropTypes.func.isRequired,
	onDragHandlePress: _react.PropTypes.func.isRequired,
	refCollector: _react.PropTypes.func.isRequired,
	settings: _react.PropTypes.object.isRequired,
	class_ui: _react.PropTypes.object.isRequired,
	class_template: _react.PropTypes.object.isRequired
};

exports.default = Canvas;

/***/ }),

/***/ 121:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactRedux = __webpack_require__(18);

var _Canvas = __webpack_require__(120);

var _Canvas2 = _interopRequireDefault(_Canvas);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
	return {
		state: state.app
	};
};

var CanvasContainer = (0, _reactRedux.connect)(mapStateToProps)(_Canvas2.default);

exports.default = CanvasContainer;

/***/ }),

/***/ 122:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactRedux = __webpack_require__(18);

var _Dialog = __webpack_require__(125);

var _Dialog2 = _interopRequireDefault(_Dialog);

var _constants = __webpack_require__(9);

var _actions = __webpack_require__(43);

var _actions2 = _interopRequireDefault(_actions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
	return {
		mode: state.dialog.mode,
		state: state.dialog.state
	};
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	return {
		onDialogCancel: function onDialogCancel() {
			dispatch(_actions2.default.setDialogMode(_constants.dialogModes.NONE));
		}
	};
};

var DialogContainer = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Dialog2.default);

exports.default = DialogContainer;

/***/ }),

/***/ 123:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactRedux = __webpack_require__(18);

var _Pallet = __webpack_require__(134);

var _Pallet2 = _interopRequireDefault(_Pallet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
	return {
		activeDropletId: state.app.active_droplet_id
	};
};

var PalletContainer = (0, _reactRedux.connect)(mapStateToProps)(_Pallet2.default);

exports.default = PalletContainer;

/***/ }),

/***/ 124:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactRedux = __webpack_require__(18);

var _Template = __webpack_require__(135);

var _Template2 = _interopRequireDefault(_Template);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
	return {
		zones: state.zones
	};
};

var TemplateContainer = (0, _reactRedux.connect)(mapStateToProps)(_Template2.default);

exports.default = TemplateContainer;

/***/ }),

/***/ 125:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _constants = __webpack_require__(9);

var _DialogEditDroplet = __webpack_require__(126);

var _DialogEditDroplet2 = _interopRequireDefault(_DialogEditDroplet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DialogComponents = {};

// import the dialogs used, then put into a global for referencing

DialogComponents[_constants.dialogModes.EDIT_DROPLET] = _DialogEditDroplet2.default;

function Dialog(props) {
	var Component,
	    classes = [props.settings.classes.dialog.main];

	if (props.mode !== _constants.dialogModes.NONE) {
		classes.push(props.settings.classes.dialog.visible);
	}

	// get appropriate component for dialog mode
	Component = DialogComponents[props.mode];

	if (Component) {
		return _react2.default.createElement(
			'div',
			{ className: classes.join(' ') },
			_react2.default.createElement(Component, {
				state: props.state,
				settings: props.settings,
				class_template: props.class_template,
				onDialogComplete: props.onDialogComplete,
				onDialogCancel: props.onDialogCancel,
				class_ui: props.class_ui })
		);
	} else {
		return _react2.default.createElement('div', { className: classes.join(' ') });
	}
}

Dialog.propTypes = {
	// from DialogContainer
	mode: _react.PropTypes.string,
	state: _react.PropTypes.object,

	// from Canvas
	settings: _react.PropTypes.object,
	onDialogComplete: _react.PropTypes.func,
	onDialogCancel: _react.PropTypes.func,
	class_ui: _react.PropTypes.object,
	class_template: _react.PropTypes.object
};

Dialog.defaultProps = {};

exports.default = Dialog;

/***/ }),

/***/ 126:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _FormField = __webpack_require__(32);

var _FormField2 = _interopRequireDefault(_FormField);

var _constants = __webpack_require__(9);

var _Icon = __webpack_require__(40);

var _DialogHeading = __webpack_require__(127);

var _DialogHeading2 = _interopRequireDefault(_DialogHeading);

var _Form = __webpack_require__(133);

var _Form2 = _interopRequireDefault(_Form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var headingsByType = {
	'element': {
		text: 'Element',
		icon: _Icon.GLYPHS.TAG
	},
	'text': {
		text: 'Text item',
		icon: _Icon.GLYPHS.TEXT
	},
	'attribute': {
		text: 'Attribute',
		icon: _Icon.GLYPHS.PUZZLE_PIECE
	}
};

var DialogEditDroplet = function (_Component) {
	_inherits(DialogEditDroplet, _Component);

	function DialogEditDroplet(props) {
		_classCallCheck(this, DialogEditDroplet);

		var _this = _possibleConstructorReturn(this, (DialogEditDroplet.__proto__ || Object.getPrototypeOf(DialogEditDroplet)).call(this, props));

		if (_this.props.state && _this.props.state.droplet_id) {
			_this.droplet = _this.props.class_ui.getDropletById(_this.props.state.droplet_id);
		}

		_this.onDialogComplete = _this.onDialogComplete.bind(_this);
		_this.detachAttachment = _this.detachAttachment.bind(_this);
		return _this;
	}

	_createClass(DialogEditDroplet, [{
		key: 'onDialogComplete',
		value: function onDialogComplete(values) {
			var data = {},
			    key;

			if (typeof this.props.onDialogComplete === 'function') {
				// massage data back into format replicating Droplet.data format
				for (key in values) {
					if (values.hasOwnProperty(key)) {
						if (key === 'attrs') {
							data[key] = values[key];
						} else {
							data[key] = values[key][key];
						}
					}
				}

				data = Object.deepAssign({}, this.droplet.data, data);

				// send data to callback
				this.props.onDialogComplete(data);
			}
		}
	}, {
		key: 'detachAttachment',
		value: function detachAttachment() {
			if (this.props.state.attachment_index !== null) {
				this.props.class_ui.zoneDetachAttachment(this.props.state.zone_id, this.props.state.attachment_index);
			} else {
				throw new Error('attachment_index is null or not defined. Cannot detach');
			}

			this.props.onDialogCancel();
		}
	}, {
		key: 'getFieldsets',
		value: function getFieldsets() {
			var fieldsets = [],
			    attachment = null,
			    fieldset,
			    field,
			    attribute,
			    item;

			if (this.props.state.attachment_index !== null) {
				attachment = this.props.class_ui.zoneGetAttachment(this.props.state.zone_id, this.props.state.attachment_index);
			}

			for (attribute in this.droplet.editable) {
				fieldset = {
					key: attribute,
					legend: _constants.setLabels[attribute],
					fields: []
				};

				// add indidual fields, depending on editable attribute type
				if (attribute === 'attrs') {
					// the 'attrs' attribute, which contains key/value pairs
					for (item in this.droplet.editable[attribute]) {
						field = Object.deepAssign({}, this.droplet.editable[attribute][item]);

						// preset value from attachment
						if (attachment !== null && attachment.data.attrs && attachment.data.attrs[item]) {
							field.value = attachment.data.attrs[item];
						}

						fieldset.fields.push(new _FormField2.default(item, this.droplet.editable[attribute][item].type, field));
					}
				} else {
					// string based attributes
					field = Object.deepAssign({}, this.droplet.editable[attribute]);

					// preset value from attachment
					if (attachment !== null && attachment.data[attribute]) {
						field.value = attachment.data[attribute];
					}

					fieldset.fields.push(new _FormField2.default(attribute, this.droplet.editable[attribute].type, field));
				}

				// add fieldset to form
				fieldsets.push(fieldset);
			}

			return fieldsets;
		}
	}, {
		key: 'render',
		value: function render() {
			var fieldsets = this.getFieldsets(),
			    buttons = [],
			    classes = [this.props.settings.classes.dialog.container],
			    title,
			    notes;

			classes.push('droplet-' + this.droplet.dropletType);

			if (this.props.state.attachment_index !== null) {
				// editing
				title = 'Edit ' + headingsByType[this.droplet.dropletType].text;

				if (fieldsets.length) {
					notes = ['You can edit the Droplet using the fields below. ' + 'Change the bits you want to customise and use “Add Droplet” when you’re done.'];

					buttons.push({
						type: 'submit',
						label: 'Edit Droplet'
					});
				} else {
					notes = ['There is nothing to edit on this Droplet, but you can remove it ' + 'With the “Remove Droplet” button.'];
				}

				buttons.push({
					type: 'general',
					label: 'Remove Droplet',
					className: 'danger pull-left',
					onClick: this.detachAttachment
				});
			} else {
				// adding
				title = 'Add ' + headingsByType[this.droplet.dropletType].text;
				notes = ['You’ve found the right drop place to put this Droplet! ', 'Edit anything you would like to change and then use “Edit Droplet”.'];
				buttons = buttons.concat({
					type: 'submit',
					label: 'Add Droplet'
				});
			}

			buttons.push({
				type: 'cancel',
				onClick: this.props.onDialogCancel,
				label: 'Cancel'
			});

			return _react2.default.createElement(
				'div',
				{ className: classes.join(' ') },
				_react2.default.createElement(_DialogHeading2.default, {
					title: title,
					notes: notes,
					iconGlyph: headingsByType[this.droplet.dropletType].icon,
					className: this.props.settings.classes.dialog.heading }),
				_react2.default.createElement(_Form2.default, {
					fieldSets: fieldsets,
					buttons: buttons,
					onSubmit: this.onDialogComplete,
					onCancel: this.props.onDialogCancel })
			);
		}
	}]);

	return DialogEditDroplet;
}(_react.Component);

DialogEditDroplet.propTypes = {
	state: _react.PropTypes.object.isRequired,
	settings: _react.PropTypes.object.isRequired,
	onDialogCancel: _react.PropTypes.func,
	onDialogComplete: _react.PropTypes.func,
	class_ui: _react.PropTypes.object.isRequired
};

DialogEditDroplet.defaultProps = {
	onDialogCancel: null,
	onDialogComplete: null
};

exports.default = DialogEditDroplet;

/***/ }),

/***/ 127:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _Icon = __webpack_require__(40);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DialogHeading = function DialogHeading(props) {
	var notes = [],
	    icon;

	props.notes.forEach(function (note, index) {
		return notes.push(_react2.default.createElement(
			'p',
			{ key: 'note-' + index },
			note
		));
	});

	if (props.iconGlyph) {
		icon = _react2.default.createElement(_Icon.Icon, { glyph: props.iconGlyph });
	}

	return _react2.default.createElement(
		'div',
		{ className: props.className },
		_react2.default.createElement(
			'h2',
			null,
			icon,
			_react2.default.createElement(
				'span',
				null,
				props.title
			)
		),
		notes
	);
};

DialogHeading.propTypes = {
	iconGlyph: _react.PropTypes.string,
	className: _react.PropTypes.string.isRequired,
	title: _react.PropTypes.string.isRequired,
	notes: _react.PropTypes.arrayOf(_react.PropTypes.string)
};

exports.default = DialogHeading;

/***/ }),

/***/ 128:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Button = function Button(props) {
	var type = props.type === 'submit' ? 'submit' : 'button',
	    classes = [props.className],
	    onClick = props.onClick;

	if (props.type === 'cancel') {
		classes.push('cancel');
		onClick = props.onCancel;
	} else if (props.type === 'submit') {
		classes.push('primary');
	}

	return _react2.default.createElement(
		'button',
		{
			className: classes.join(' '),
			onClick: onClick,
			type: type },
		props.label
	);
};

Button.propTypes = {
	type: _react.PropTypes.oneOf(['submit', 'cancel', 'general']).isRequired,
	label: _react.PropTypes.string.isRequired,
	className: _react.PropTypes.string,
	onClick: _react.PropTypes.func,
	onCancel: _react.PropTypes.func
};

exports.default = Button;

/***/ }),

/***/ 129:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _utils = __webpack_require__(24);

var _DropZone = __webpack_require__(42);

var _DropZone2 = _interopRequireDefault(_DropZone);

var _DropZoneAttachment = __webpack_require__(130);

var _DropZoneAttachment2 = _interopRequireDefault(_DropZoneAttachment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DropZoneComponent = function (_Component) {
	_inherits(DropZoneComponent, _Component);

	function DropZoneComponent(props) {
		_classCallCheck(this, DropZoneComponent);

		var _this = _possibleConstructorReturn(this, (DropZoneComponent.__proto__ || Object.getPrototypeOf(DropZoneComponent)).call(this, props));

		_this.myrefs = {};
		_this.attachmentClick = _this.attachmentClick.bind(_this);
		_this.onClick = _this.onClick.bind(_this);
		return _this;
	}

	_createClass(DropZoneComponent, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			if (typeof this.props.onMount === 'function') {
				this.props.onMount('dropzone', this.props.zone.id);
			}
		}
	}, {
		key: 'onClick',
		value: function onClick(event) {
			event.preventDefault();
			this.props.onClick(event, this.props.zone);
		}
	}, {
		key: 'attachmentClick',
		value: function attachmentClick(event, droplet, attachmentIndex) {
			if (typeof this.props.onAttachmentClick === 'function') {
				this.props.onAttachmentClick(droplet, this.props.zone, attachmentIndex);
			}
		}
	}, {
		key: 'renderActiveAttachments',
		value: function renderActiveAttachments() {
			var _this2 = this;

			var children = [];

			this.props.activeAttachments.forEach(function (attachment, index) {
				children.push(_react2.default.createElement(_DropZoneAttachment2.default, {
					key: attachment.droplet_id + '-attachment-' + index,
					attachmentIndex: index,
					onClick: _this2.attachmentClick,
					droplet: _this2.props.class_ui.getDropletById(attachment.droplet_id),
					zone: _this2.props.zone,
					data: attachment.data }));
			});

			return children;
		}
	}, {
		key: 'render',
		value: function render() {
			var key = this.props.zone.id + '-zone',
			    target_key = this.props.zone.id + '-target',
			    target_class;

			target_class = this.props.activeAttachments.length < this.props.zone.maxAttachments ? this.props.settings.classes.dropzone_target : this.props.settings.classes.dropzone_target + ' ' + this.props.settings.classes.hidden;

			return _react2.default.createElement(
				'span',
				{
					key: key,
					className: this.props.settings.classes.dropzone,
					ref: (0, _utils.collectRef)(this.props, ['dropzone'], this.props.zone.id),
					'data-id': this.props.zone.id,
					'data-attachment': this.props.zone.attachmentId },
				_react2.default.createElement(
					'span',
					{
						className: 'attachments' },
					this.renderActiveAttachments()
				),
				_react2.default.createElement(
					'span',
					{ className: 'target-outer' },
					_react2.default.createElement(
						'span',
						{ key: target_key,
							onClick: this.onClick,
							ref: (0, _utils.collectRef)(this.props, ['dropzone_target'], this.props.zone.id),
							className: target_class },
						_react2.default.createElement(
							'b',
							null,
							this.props.settings.dropZone.label
						)
					)
				)
			);
		}
	}]);

	return DropZoneComponent;
}(_react.Component);

DropZoneComponent.propTypes = {
	zone: _react.PropTypes.instanceOf(_DropZone2.default).isRequired,
	settings: _react.PropTypes.object.isRequired,
	activeAttachments: _react.PropTypes.array.isRequired,
	onMount: _react.PropTypes.func.isRequired,
	onAttachmentClick: _react.PropTypes.func.isRequired,
	onClick: _react.PropTypes.func.isRequired,
	refCollector: _react.PropTypes.func.isRequired,
	class_ui: _react.PropTypes.object.isRequired
};

exports.default = DropZoneComponent;

/***/ }),

/***/ 130:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _Template = __webpack_require__(76);

var _Template2 = _interopRequireDefault(_Template);

var _Droplet = __webpack_require__(23);

var _Droplet2 = _interopRequireDefault(_Droplet);

var _DropZone = __webpack_require__(42);

var _DropZone2 = _interopRequireDefault(_DropZone);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DropZoneAttachment = function (_Component) {
	_inherits(DropZoneAttachment, _Component);

	function DropZoneAttachment(props) {
		_classCallCheck(this, DropZoneAttachment);

		var _this = _possibleConstructorReturn(this, (DropZoneAttachment.__proto__ || Object.getPrototypeOf(DropZoneAttachment)).call(this, props));

		_this.onClick = _this.onClick.bind(_this);
		return _this;
	}

	_createClass(DropZoneAttachment, [{
		key: 'onClick',
		value: function onClick(event) {
			event.preventDefault();

			this.props.onClick(event, this.props.droplet, this.props.attachmentIndex);
		}
	}, {
		key: 'render',
		value: function render() {
			var className = 'dropzone-attachment',
			    data;

			// merge edited data with droplet data
			data = Object.deepAssign({}, this.props.droplet.data, this.props.data);

			// set classname
			className += ' ' + this.props.droplet.dropletType;

			return _react2.default.createElement(
				'span',
				{
					className: className,
					onClick: this.onClick },
				_Template2.default.renderDroplet(this.props.droplet, data, this.props.zone, false)
			);
		}
	}]);

	return DropZoneAttachment;
}(_react.Component);

DropZoneAttachment.propTypes = {
	droplet: _react.PropTypes.instanceOf(_Droplet2.default).isRequired,
	zone: _react.PropTypes.instanceOf(_DropZone2.default).isRequired,
	attachmentIndex: _react.PropTypes.number.isRequired,
	onClick: _react.PropTypes.func.isRequired,
	data: _react.PropTypes.object.isRequired
};

exports.default = DropZoneAttachment;

/***/ }),

/***/ 131:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _utils = __webpack_require__(24);

var _Droplet = __webpack_require__(23);

var _Droplet2 = _interopRequireDefault(_Droplet);

var _Icon = __webpack_require__(40);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dropletTypeToGlyphs = {
	'text': _Icon.GLYPHS.TEXT,
	'element': _Icon.GLYPHS.TAG,
	'attribute': _Icon.GLYPHS.PUZZLE_PIECE
};

var DropletComponent = function (_Component) {
	_inherits(DropletComponent, _Component);

	function DropletComponent(props) {
		_classCallCheck(this, DropletComponent);

		var _this = _possibleConstructorReturn(this, (DropletComponent.__proto__ || Object.getPrototypeOf(DropletComponent)).call(this, props));

		_this.myrefs = {};
		_this.onClick = _this.onClick.bind(_this);
		return _this;
	}

	_createClass(DropletComponent, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			if (typeof this.props.onMount === 'function') {
				this.props.onMount('droplet', this.props.droplet.id);
			}
		}
	}, {
		key: 'onClick',
		value: function onClick(event) {
			event.preventDefault();
			this.props.onClick(event, this.props.droplet);
		}
	}, {
		key: 'render',
		value: function render() {
			var classes = [this.props.settings.classes.droplet.node, 'type-' + this.props.droplet.dropletType];

			if (this.props.active) {
				classes.push(this.props.settings.classes.droplet.active);
			}

			return _react2.default.createElement(
				'a',
				{ href: '#',
					id: this.props.droplet.id,
					className: classes.join(' '),
					onClick: this.onClick,
					ref: (0, _utils.collectRef)(this.props, ['droplet'], this.props.droplet.id) },
				_react2.default.createElement(
					'span',
					{ className: 'label' },
					_react2.default.createElement(_Icon.Icon, { glyph: dropletTypeToGlyphs[this.props.droplet.dropletType] }),
					this.props.droplet.name
				)
			);
		}
	}]);

	return DropletComponent;
}(_react.Component);

DropletComponent.propTypes = {
	active: _react.PropTypes.bool,
	settings: _react.PropTypes.object.isRequired,
	droplet: _react.PropTypes.instanceOf(_Droplet2.default).isRequired,
	onMount: _react.PropTypes.func,
	onClick: _react.PropTypes.func
};

exports.default = DropletComponent;

/***/ }),

/***/ 132:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _FormField = __webpack_require__(32);

var _FormField2 = _interopRequireDefault(_FormField);

var _TextField = __webpack_require__(138);

var _TextField2 = _interopRequireDefault(_TextField);

var _DropDown = __webpack_require__(137);

var _DropDown2 = _interopRequireDefault(_DropDown);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FieldComponents = {
	'text': _TextField2.default,
	'dropdown': _DropDown2.default
};

var Fieldset = function (_Component) {
	_inherits(Fieldset, _Component);

	function Fieldset(props) {
		_classCallCheck(this, Fieldset);

		var formValues = {};

		// set default state for fields based on original values
		var _this = _possibleConstructorReturn(this, (Fieldset.__proto__ || Object.getPrototypeOf(Fieldset)).call(this, props));

		_this.props.fields.forEach(function (field) {
			return formValues[field.name] = field.value || '';
		});

		// set default form value state
		_this.state = {
			formValues: formValues
		};

		// bind functions for events
		_this.elementChange = _this.elementChange.bind(_this);
		return _this;
	}

	_createClass(Fieldset, [{
		key: 'fields',
		value: function fields() {
			var _this2 = this;

			var Component,
			    output = [];

			this.props.fields.forEach(function (field) {
				var key = 'field-' + field.name;

				Component = FieldComponents[field.type];

				switch (field.type) {
					case 'text':
						output.push(_react2.default.createElement(Component, { key: key,
							field: field,
							onChange: _this2.elementChange,
							value: _this2.state.formValues[field.name] }));
						break;

					case 'dropdown':
						output.push(_react2.default.createElement(Component, { key: key,
							field: field,
							onChange: _this2.elementChange,
							value: _this2.state.formValues[field.name] }));
				}
			});

			return output;
		}
	}, {
		key: 'elementChange',
		value: function elementChange(event) {
			var target = event.target,
			    formValues = Object.deepAssign({}, this.state.formValues);

			formValues[target.name] = target.value;

			this.setState({
				formValues: formValues
			});

			this.props.onFieldUpdate(this.props.set, target.name, target.value, formValues);
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'fieldset',
				null,
				_react2.default.createElement(
					'legend',
					null,
					this.props.legend
				),
				this.fields()
			);
		}
	}]);

	return Fieldset;
}(_react.Component);

Fieldset.propTypes = {
	set: _react.PropTypes.string.isRequired,
	onFieldUpdate: _react.PropTypes.func.isRequired,
	legend: _react.PropTypes.string,
	fields: _react.PropTypes.arrayOf(_react2.default.PropTypes.instanceOf(_FormField2.default))
};

Fieldset.defaultProps = {
	onFieldUpdate: function onFieldUpdate() {},
	fields: {}
};

exports.default = Fieldset;

/***/ }),

/***/ 133:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _Fieldset = __webpack_require__(132);

var _Fieldset2 = _interopRequireDefault(_Fieldset);

var _Button = __webpack_require__(128);

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @typedef FormOnSubmit
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @param {object} formValues - the current values of the form elements, as an object.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/**
 * @typedef FormFieldSets
 * @description
 * An array of fieldsets — each item of which contains an object defining a
 * single fieldset. See {@link FormFieldset}.
 * @example
 * var fieldsets = [
 * 	{@link FormFieldSet}...
 * ];
 */

/**
 * An object defining a single fieldset.
 * @typedef FormFieldSet
 * @property {string} key - Unique key value.
 * @property {string} legend - Legend label.
 * @property {object} fields - Fields within the fieldset. The keys of which
 * should represent the name of the field, with the values being one of
 * {@link FormField} each.
 * @example
 * var fieldset = [
 * 	{@link FormField}...
 * ]
 */


/**
 * @description
 * Takes a form specification and produces an HTML form.
 * See {@link Form.propTypes} for more information
 */
var Form = function (_Component) {
	_inherits(Form, _Component);

	function Form(props) {
		_classCallCheck(this, Form);

		var formValues = {};

		// set default state for fields based on original values
		var _this = _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).call(this, props));

		_this.props.fieldSets.forEach(function (set) {
			formValues[set.key] = {};

			set.fields.forEach(function (field) {
				return formValues[set.key][field.name] = field.value;
			});
		});

		// set default form value state
		_this.state = {
			formValues: formValues
		};

		// bind functions for events
		_this.elementChange = _this.elementChange.bind(_this);
		return _this;
	}

	_createClass(Form, [{
		key: 'valueSet',
		value: function valueSet(values, node) {
			var nodes = [],
			    key;

			if (Array.isArray(values)) {
				values.forEach(function (value) {
					nodes.push(_react2.default.createElement(
						'node',
						{ value: value },
						value
					));
				});
			} else if ((typeof values === 'undefined' ? 'undefined' : _typeof(values)) === 'object') {
				for (key in values) {
					nodes.push(_react2.default.createElement(
						'node',
						{ value: key },
						values[key]
					));
				}
			}

			return nodes;
		}
	}, {
		key: 'fieldSets',
		value: function fieldSets() {
			var _this2 = this;

			var output = [];

			this.props.fieldSets.forEach(function (set) {
				var key = 'fieldset-' + set.key;

				output.push(_react2.default.createElement(_Fieldset2.default, {
					key: key,
					set: set.key,
					fields: set.fields,
					legend: set.legend,
					onFieldUpdate: _this2.elementChange
				}));
			});

			return output;
		}
	}, {
		key: 'elementChange',
		value: function elementChange(set, name, value, values_state) {
			var sets = Object.assign({}, this.state.formValues);

			sets[set] = values_state;

			this.setState({
				formValues: sets
			});
		}
	}, {
		key: 'onSubmit',
		value: function onSubmit(event) {
			event.preventDefault();
			this.props.onSubmit(this.state.formValues);
		}
	}, {
		key: 'getButtons',
		value: function getButtons() {
			var _this3 = this;

			var buttons = [];

			if (this.props.buttons && this.props.buttons.length) {
				this.props.buttons.forEach(function (button, index) {
					buttons.push(_react2.default.createElement(_Button2.default, {
						key: 'button-' + index,
						type: button.type,
						label: button.label,
						className: button.className,
						onCancel: _this3.props.onCancel,
						onClick: button.onClick }));
				});
			}

			return buttons;
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'form',
				{ action: '', onSubmit: this.onSubmit.bind(this) },
				_react2.default.createElement(
					'div',
					{ className: 'fields' },
					this.fieldSets()
				),
				_react2.default.createElement(
					'fieldset',
					{ className: 'buttons' },
					this.getButtons()
				)
			);
		}
	}]);

	return Form;
}(_react.Component);

/**
 * @property {function} onCancel - invoked when the form is cancelled
 * @property {FormOnSubmit} onSubmit - invoked when the form is submitted
 * @property {FormFieldSets} fieldSets - fieldsets for display
 */


Form.propTypes = {
	onCancel: _react.PropTypes.func,
	onSubmit: _react.PropTypes.func,
	fieldSets: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		key: _react.PropTypes.string,
		legend: _react.PropTypes.string,
		fields: _react.PropTypes.array
	})),
	buttons: _react.PropTypes.array
};

Form.defaultProps = {
	onCancel: function onCancel() {},
	onSubmit: function onSubmit() {},
	fieldSets: {}
};

exports.default = Form;

/***/ }),

/***/ 134:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _Droplet = __webpack_require__(131);

var _Droplet2 = _interopRequireDefault(_Droplet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Pallet = function (_Component) {
	_inherits(Pallet, _Component);

	function Pallet(props) {
		_classCallCheck(this, Pallet);

		return _possibleConstructorReturn(this, (Pallet.__proto__ || Object.getPrototypeOf(Pallet)).call(this, props));
	}

	_createClass(Pallet, [{
		key: 'getItems',
		value: function getItems() {
			var _this2 = this;

			var items = [];

			if (this.props.data.pallet) {
				this.props.data.pallet.forEach(function (droplet) {
					items.push(_react2.default.createElement(_Droplet2.default, { droplet: droplet,
						active: _this2.props.activeDropletId === droplet.id,
						settings: _this2.props.settings,
						onMount: _this2.props.onMount,
						onClick: _this2.props.onDropletClick,
						refCollector: _this2.props.refCollector,
						key: droplet.id }));
				});
			}

			return items;
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'section',
				{ className: 'pallet' },
				this.getItems.apply(this)
			);
		}
	}]);

	return Pallet;
}(_react.Component);

Pallet.propTypes = {
	// from PalletContainer
	activeDropletId: _react.PropTypes.string.isRequired,

	// from Canvas
	data: _react.PropTypes.object.isRequired,
	settings: _react.PropTypes.object.isRequired,
	onMount: _react.PropTypes.func,
	onDropletClick: _react.PropTypes.func.isRequired,
	refCollector: _react.PropTypes.func
};

Pallet.defaultProps = {
	data: {
		pallet: []
	}
};

exports.default = Pallet;

/***/ }),

/***/ 135:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _utils = __webpack_require__(24);

var _DropZone = __webpack_require__(129);

var _DropZone2 = _interopRequireDefault(_DropZone);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Template = function (_Component) {
	_inherits(Template, _Component);

	function Template(props) {
		_classCallCheck(this, Template);

		return _possibleConstructorReturn(this, (Template.__proto__ || Object.getPrototypeOf(Template)).call(this, props));
	}

	_createClass(Template, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			if (typeof this.props.onMount === 'function') {
				this.props.onMount('template');
			}
		}

		/**
   * Uses state (from props.zones) to ascertain the attachments
   */

	}, {
		key: 'getZoneAttachments',
		value: function getZoneAttachments(dropzone_id) {
			var zone,
			    attachments = [];

			if (this.props.zones && (zone = this.props.zones[dropzone_id])) {
				attachments = zone.attachments;
			}

			return attachments;
		}
	}, {
		key: 'getTemplate',
		value: function getTemplate() {
			var _this2 = this;

			var children = [];

			this.props.template.forEach(function (node, index) {
				var key;

				switch (node.type) {
					case 'text':
						key = 'fragment-' + index;

						children.push(_react2.default.createElement(
							'span',
							{
								key: key,
								className: _this2.props.settings.classes.component },
							node.content
						));
						break;

					case 'dropzone':
						children.push(_react2.default.createElement(_DropZone2.default, {
							key: node.zone.id,
							zone: node.zone,
							settings: _this2.props.settings,
							activeAttachments: _this2.getZoneAttachments(node.zone.id),
							refCollector: _this2.props.refCollector,
							onMount: _this2.props.onMount,
							onClick: _this2.props.onDropZoneClick,
							onAttachmentClick: _this2.props.onAttachmentClick,
							class_ui: _this2.props.class_ui }));
						break;
				}
			});

			return children;
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'section',
				{ className: 'template',
					ref: (0, _utils.collectRef)(this.props, 'template') },
				_react2.default.createElement(
					'pre',
					null,
					_react2.default.createElement(
						'code',
						{ className: 'html',
							ref: (0, _utils.collectRef)(this.props, 'template_inner') },
						this.getTemplate()
					)
				)
			);
		}
	}]);

	return Template;
}(_react.Component);

Template.propTypes = {
	// from TemplateContainer
	zones: _react.PropTypes.object.isRequired,

	// from Canvas
	settings: _react.PropTypes.object.isRequired,
	template: _react.PropTypes.array.isRequired,
	onMount: _react.PropTypes.func.isRequired,
	onAttachmentClick: _react.PropTypes.func.isRequired,
	onDropZoneClick: _react.PropTypes.func.isRequired,
	refCollector: _react.PropTypes.func.isRequired,
	class_ui: _react.PropTypes.object.isRequired
};

Template.defaultProps = {
	template: ''
};

exports.default = Template;

/***/ }),

/***/ 136:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _utils = __webpack_require__(24);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var View = function (_Component) {
	_inherits(View, _Component);

	function View(props) {
		_classCallCheck(this, View);

		return _possibleConstructorReturn(this, (View.__proto__ || Object.getPrototypeOf(View)).call(this, props));
	}

	_createClass(View, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			if (typeof this.props.onMount === 'function') {
				this.props.onMount('view_frame');
			}
		}
	}, {
		key: 'shouldComponentUpdate',
		value: function shouldComponentUpdate() {
			// no. reloads/updates are handled by the view class
			return false;
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'section',
				{ className: 'view',
					ref: (0, _utils.collectRef)(this.props, 'view') },
				_react2.default.createElement('div', { className: 'drag-mask' }),
				_react2.default.createElement('iframe', { ref: (0, _utils.collectRef)(this.props, 'view_frame'),
					src: this.props.settings.view.src })
			);
		}
	}]);

	return View;
}(_react.Component);

View.propTypes = {
	settings: _react.PropTypes.object,
	onMount: _react.PropTypes.func,
	refCollector: _react.PropTypes.func
};

exports.default = View;

/***/ }),

/***/ 137:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _commonPropTypes = __webpack_require__(75);

var _componentUtils = __webpack_require__(119);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function DropDown(props) {
	var label = props.field.label || props.field.name;

	return _react2.default.createElement(
		'div',
		{ className: 'field' },
		_react2.default.createElement(
			'label',
			null,
			label
		),
		_react2.default.createElement(
			'select',
			{
				type: 'text',
				name: props.field.name,
				onChange: props.onChange,
				value: props.value },
			(0, _componentUtils.optionValueSet)(props.field.options)
		)
	);
}

DropDown.propTypes = _commonPropTypes.field;

exports.default = DropDown;

/***/ }),

/***/ 138:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _commonPropTypes = __webpack_require__(75);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TextField(props) {
	var label = props.field.label || props.field.name;

	return _react2.default.createElement(
		'div',
		{ className: 'field' },
		_react2.default.createElement(
			'label',
			null,
			label
		),
		_react2.default.createElement('input', {
			type: 'text',
			name: props.field.name,
			placeholder: props.field.placeholder,
			onChange: props.onChange,
			maxLength: props.field.data.maxlength,
			value: props.value })
	);
}

TextField.propTypes = _commonPropTypes.field;

exports.default = TextField;

/***/ }),

/***/ 139:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _interact = __webpack_require__(69);

var _interact2 = _interopRequireDefault(_interact);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.interact = _interact2.default;

/**
 * Handles draggable/droppable items.
 * @class
 */
var DragDrop = function DragDrop(canvas, settings) {
	var callbacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	this._canvas = canvas;
	this.settings = settings;
	this._callbacks = callbacks;

	this.ui = {
		drag: [],
		drop: []
	};
};

DragDrop.prototype = {
	addDragable: function addDragable(element) {
		var _this = this;

		var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

		var dragable = new Dragable(element);

		// duplicate settings
		settings = Object.assign({}, settings);

		// make the element draggable
		dragable.setDragable(settings).on('dragstart', function () {
			_this._canvas.classList.add(_this.settings.classes.is_dragging);
			element.classList.add(_this.settings.classes.item_dragging);
		}).on('dragend', function () {
			_this._canvas.classList.remove(_this.settings.classes.is_dragging);
			element.classList.remove(_this.settings.classes.item_dragging);

			if (typeof _this._callbacks.dragEnd === 'function') {
				_this._callbacks.dragEnd(element, data);
			}
		});

		this.ui.drag.push(this._createInstance(element, dragable));
	},

	addDropable: function addDropable(element) {
		var _this2 = this;

		var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

		var dropable = new Dropable(element);

		dropable.setDropable(settings).on('dropactivate', function (event) {
			// add active dropzone feedback
			event.target.classList.add(_this2.settings.classes.dropzone_is_active);
		}).on('dragenter', function (event) {
			// feedback the possibility of a drop
			event.target.classList.add(_this2.settings.classes.dropzone_is_target);
			// event.relatedTarget.classList.add('can-drop');
			// event.relatedTarget.textContent = 'Dragged in';
		}).on('dragleave', function (event) {
			// remove the drop feedback style
			event.target.classList.remove(_this2.settings.classes.dropzone_is_target);
			// event.relatedTarget.classList.remove('can-drop');
			// event.relatedTarget.textContent = 'Dragged out';
		}).on('drop', function (event) {
			if (typeof _this2._callbacks.drop === 'function') {
				_this2._callbacks.drop(event.relatedTarget, event.target, data);
			}
		}).on('dropdeactivate', function (event) {
			// remove active dropzone feedback
			event.target.classList.remove(_this2.settings.classes.dropzone_is_active);
			event.target.classList.remove(_this2.settings.classes.dropzone_is_target);
		});

		this.ui.drop.push(this._createInstance(element, dropable));
	},

	resetDragPosition: function resetDragPosition(element) {
		if (element = this.getDragInstance(element)) {
			element.instance.resetPosition();
		}
	},

	getDragInstance: function getDragInstance(element) {
		return this.ui.drag.find(function (item) {
			return item.element === element;
		});
	},

	_createInstance: function _createInstance(element, instance) {
		return {
			element: element,
			instance: instance
		};
	}
};

/*
 * Generically handles the dragging and dropping of individual DOM nodes.
 * Uses interact.js (http://interactjs.io)
 */
var Dragable = function Dragable(element) {
	this._element = element;

	this._x = 0;
	this._y = 0;
};

Dragable.prototype = {
	/**
  * Set up a draggable item.
  */
	setDragable: function setDragable(settings) {
		var _this3 = this;

		return (0, _interact2.default)(this._element).draggable(settings).on('dragmove', settings.onDragMove || function (event) {
			_this3._x += event.dx;
			_this3._y += event.dy;

			_this3._element.style.webkitTransform = _this3._element.style.transform = 'translate(' + _this3._x + 'px, ' + _this3._y + 'px)';
		});
	},

	resetPosition: function resetPosition() {
		this._x = 0;
		this._y = 0;

		this._element.style.webkitTransform = this._element.style.transform = 'translate(0, 0)';
	}
};

/*
 * Generically handles drop zones in the DOM.
 * Uses interact.js (http://interactjs.io)
 */
var Dropable = function Dropable(element) {
	this._element = element;
};

Dropable.prototype = {
	/**
  * Set up a draggable item.
  */
	setDropable: function setDropable(settings) {
		return (0, _interact2.default)(this._element).dropzone(settings);
	}
};

exports.default = DragDrop;

/***/ }),

/***/ 140:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Takes multiple functions and returns a function which invokes them consecutively
 * with the same argument signature: (prop) `value`, `propname`, `droplet_name`, `droplet_type`.
 */
function chain() {
	var args = Array.prototype.slice.call(arguments);

	return function (value, propname, droplet_name, droplet_type) {
		var _this = this;

		var test = true;

		// run each function in the chain
		args.forEach(function (fn) {
			if (!fn.apply(_this, [value, propname, droplet_name, droplet_type])) {
				test = false;
			}
		});

		return test;
	};
}

/**
 * Asserts the `test` value is truthy. In the case that it fails, an Error is thrown.
 * @param {boolean} test - Test expression result
 * @param {string} propname - The name of the property being tested
 * @param {string} message - The message, in case of failure. Will be appended to a general
 * error message.
 * @param {string} [droplet_name] - The name of the Droplet being tested
 * @param {string} [toplet_type] - The dropletType attribute of the Droplet being tested
 */
function assert(test, propname, message, droplet_name, droplet_type) {
	var error, prop_id;

	if (!test) {
		if (droplet_name) {
			prop_id = '"' + droplet_name + '"' + (droplet_type ? ' (' + droplet_type + ')' : '');
		}

		error = 'Error in Droplet' + (prop_id ? ' ' + prop_id + ' ' : ' ') + 'prop "' + propname + '". ' + message;
		throw new Error(error);
	} else {
		return true;
	}
}

function isRequired(value, prop, droplet_name, droplet_type) {
	return assert(typeof value !== 'undefined', prop, 'Value is required.', droplet_name, droplet_type);
}

function stringNotEmpty(value, prop, droplet_name, droplet_type) {
	return assert(typeof value !== 'undefined' && value !== '', prop, 'Value cannot be empty.', droplet_name, droplet_type);
}

function string(value, prop, droplet_name, droplet_type) {
	return assert(typeof value === 'undefined' || typeof value === 'string', prop, 'Value must be a string.', droplet_name, droplet_type);
}

string.isRequired = chain(string, isRequired);
string.notEmpty = chain(string, stringNotEmpty);
string.notEmpty.isRequired = chain(string, stringNotEmpty, isRequired);

function object(value, prop, droplet_name, droplet_type) {
	return assert(typeof value === 'undefined' || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object', prop, 'Value must be an object.', droplet_name, droplet_type);
}

object.isRequired = chain(object, isRequired);

function array(value, prop, droplet_name, droplet_type) {
	return assert(Array.isArray(value), prop, 'Value must be an array.', droplet_name, droplet_type);
}

array.isRequired = chain(array, isRequired);

function arrayOf() {}

arrayOf.string = chain(
// test for an array
array,
// test array values are all strings
function (value, prop, droplet_name, droplet_type) {
	var test = true,
	    a;

	for (a = 0; a < value.length; a += 1) {
		test = test ? typeof value[a] === 'string' : test;
	}

	return assert(test, prop, 'Value must be an array containing only strings', droplet_name, droplet_type);
});

arrayOf.string.isRequired = chain(arrayOf.string, isRequired);

exports.default = {
	_chain: chain,
	_assert: assert,
	string: string,
	object: object,
	array: array,
	arrayOf: arrayOf,
	isRequired: isRequired,
	stringNotEmpty: stringNotEmpty
};

/***/ }),

/***/ 141:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _DragDrop = __webpack_require__(139);

var _DragDrop2 = _interopRequireDefault(_DragDrop);

var _Communicator = __webpack_require__(41);

var _Communicator2 = _interopRequireDefault(_Communicator);

var _CanvasContainer = __webpack_require__(121);

var _CanvasContainer2 = _interopRequireDefault(_CanvasContainer);

var _actions = __webpack_require__(43);

var _actions2 = _interopRequireDefault(_actions);

var _constants = __webpack_require__(9);

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(71);

var _reactRedux = __webpack_require__(18);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UI = function UI(parent, settings, refs, data, store, template) {
	/**
  * Settings as defined when instantiating. Inherits from {@link App.defaults}
  */
	this._parent = parent;
	this.settings = settings;
	this._refs = refs;
	this._data = data;
	this._store = store;
	this._template = template;

	// UI class specific data entries
	this._data.UI = {
		dragdrop: {},
		dropletEdit: {
			droplet: null,
			callback: null
		},
		vp_width: 0,
		dragHandlePosition: 0
	};

	this._comms = new _Communicator2.default('app', window.location.origin, {
		message: function message(_message) {
			console.log('message to "app"!', _message);
		}
	});

	// general queues
	this.queues = {
		dragdropBindings: []
	};

	window.addEventListener('resize', this._handleWindowResize.bind(this));
};

UI.prototype = {
	/**
  * Sends render() call to the React canvas.
  * @private
  */
	render: function render() {
		this._canvas = (0, _reactDom.render)(_react2.default.createElement(
			_reactRedux.Provider,
			{ store: this._store },
			_react2.default.createElement(_CanvasContainer2.default, {
				data: this._data,
				settings: this.settings,
				refCollector: this._refCollector.bind(this),
				onMount: this._mountEvent.bind(this),
				onDialogComplete: this._completeDialogAction.bind(this),
				onDialogCancel: this._cancelDialogAction.bind(this),
				onAttachmentClick: this._handleAttachmentClick.bind(this),
				onDropletClick: this._handleDropletClick.bind(this),
				onDropZoneClick: this._handleDropZoneClick.bind(this),
				onDragHandlePress: this._handleDragHandleEvent.bind(this),
				class_ui: this,
				class_template: this._template })
		), this._refs.ui.app);
	},

	/**
  * Displays an editor window for a Droplet.
  * @param {string} mode - One of the dropletModes modes.
  * @param {mixed} data - Relevant data to store for the dialog to use.
  * @private
  */
	_showDialog: function _showDialog(mode, data) {
		this._store.dispatch(_actions2.default.setDialogMode(mode, data));
	},

	_completeDialogAction: function _completeDialogAction(dialog_data) {
		var state = this._store.getState();

		// reset dialog state to nothing
		this._store.dispatch(_actions2.default.setDialogMode(_constants.dialogModes.NONE));

		switch (state.dialog.mode) {
			case _constants.dialogModes.EDIT_DROPLET:
				// droplet being edited prior to or during attatchment
				if (state.dialog.state.attachment_index === null) {
					// no attachment index - this is a new drop
					this.zoneAddAttachment(state.dialog.state.zone_id, state.dialog.state.droplet_id, dialog_data);
				} else {
					this.zoneEditAttachment(state.dialog.state.zone_id, state.dialog.state.attachment_index, dialog_data);
				}
		}
	},

	_cancelDialogAction: function _cancelDialogAction() {
		// noop
	},

	/**
  * Element reference collector. Collects DOM elements from React components.
  * Bind an element reference using the ref attribute and collectRef from utils.js
  * @private
  */
	_refCollector: function _refCollector(collection, element, key) {
		if (element !== null) {
			if (typeof key === 'string') {
				if (typeof this._refs.components[collection] === 'undefined') {
					this._refs.components[collection] = {};
				}

				this._refs.components[collection][key] = element;
			} else {
				this._refs.components[collection] = element;
			}
		}
	},

	/**
  * Captures mount events from React components by collection/key identifiers.
  * Identifiers are the same as the ones stored with App#_refCollector
  * @private
  */
	_mountEvent: function _mountEvent(collection, key) {
		if (this._getReferencedElement(collection, key)) {
			// valid component mounted
			switch (collection) {
				case 'canvas':
					// add drag binding for the drag handle
					this._queueDragDropBinding('drag', 'drag_handle', null, {
						onDragMove: this._handleDragHandleEvent.bind(this)
					});

					// process all drag/drop bindings
					this._setDragDropBindings();
					this._refs.mounted.canvas = true;
					break;

				case 'template':
					// this._queueDragDropBinding('drop', collection, key);
					this._refs.mounted.template = true;
					break;

				case 'droplet':
					this._queueDragDropBinding('drag', collection, key);
					break;

				case 'dropzone':
					this._queueDragDropBinding('drop', 'dropzone_target', key);
					break;

				case 'view_frame':
					this._comms.registerGuestAddress('view', this._refs.components[collection].contentWindow);

					this._refs.mounted.view_frame = true;
			}

			if (this._refs.mounted.canvas && this._refs.mounted.template && this._refs.mounted.view_frame) {
				// all required refs mounted - set active
				this._store.dispatch(_actions2.default.setUIState(_constants.uiStates.ACTIVE));

				// run initial size calculations
				this._handleWindowResize();
			}
		} else {
			throw new Error('Component mount event called but ref was not collected. ' + 'component: ' + collection + (key ? '/' + key : ''));
		}
	},

	/**
  * Queues a drag/drop DOM binding till the mount event for the Canvas component.
  * This is done because the canvas is relied upon as the container for dragging.
  * @private
  */
	_queueDragDropBinding: function _queueDragDropBinding(type, collection, key, settings) {
		if (this._refs.components.canvas) {
			// canvas already exists - immediately bind
			this._setDragDropBindings([{ type: type, collection: collection, key: key, settings: settings }]);
		} else {
			// push to queue
			this.queues.dragdropBindings.push({ type: type, collection: collection, key: key, settings: settings });
		}
	},

	_setDragDropBindings: function _setDragDropBindings() {
		var _this = this;

		var queue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.queues.dragdropBindings;

		// bind dragDrop handlers to the elements in the queue
		this._data.UI.dragdrop.droplets = new _DragDrop2.default(this._refs.components.canvas, this.settings, {
			drop: this._handleDropletDrop.bind(this),
			dragEnd: function dragEnd(element) {
				_this._data.UI.dragdrop.droplets.resetDragPosition(element);
			}
		});

		queue.forEach(function (item) {
			var ref = _this._getReferencedElement(item.collection, item.key),
			    data;

			if (item.collection === 'dropzone_target') {
				data = {
					zone_id: item.key
				};
			}

			// create a DragDrop instance and assign to the pallet item data
			if (item.type === 'drag') {
				_this._data.UI.dragdrop.droplets.addDragable(ref, item.settings, data);
			} else if (item.type === 'drop') {
				_this._data.UI.dragdrop.droplets.addDropable(ref, Object.deepAssign({}, {
					accept: _this.settings.selectors.droplet
				}, item.settings), data);
			}
		});
	},

	/**
  * Handles drops of droplets into drop zones. Will attach to the zone
  * if the drop is valid.
  * @param {HTMLElement} element - The element being dragged.
  * @param {HTMLElement} target - The target being dropped onto.
  * @param {object} data - data object, as set with addDragable/addDropable.
  * @private
  */
	_handleDropletDrop: function _handleDropletDrop(element, target, data) {
		var drop_zone = this.getDropZoneById(data.zone_id),
		    droplet = this.getDropletById(element.id);

		return this.attachDropletToDropZone(droplet, drop_zone);
	},

	_handleAttachmentClick: function _handleAttachmentClick(droplet, drop_zone, attachment_index) {
		this._showDialog(_constants.dialogModes.EDIT_DROPLET, {
			droplet_id: droplet.id,
			zone_id: drop_zone.id,
			attachment_index: attachment_index
		});
	},

	_handleDropletClick: function _handleDropletClick(event, droplet) {
		var state = this._store.getState();

		if (state.app.active_droplet_id !== droplet.id) {
			this._store.dispatch(_actions2.default.setActiveDroplet(droplet.id));
		}
	},

	_handleDropZoneClick: function _handleDropZoneClick(event, drop_zone) {
		var state = this._store.getState(),
		    droplet;

		if (state.app.active_droplet_id !== 0 && (droplet = this.getDropletById(state.app.active_droplet_id))) {
			this.attachDropletToDropZone(droplet, drop_zone);
		}
	},

	/**
  * Handles events from the drag handle (between template and view containers)
  * @private
  */
	_handleDragHandleEvent: function _handleDragHandleEvent(event) {
		var width;

		switch (event.type) {
			case 'dragmove':
				// incrememt dragHandlePosition based on x delta from interact instance
				this._data.UI.dragHandlePosition += event.dx;

				// figure out handle position in % of the screen and convert it to percent,
				// then send straight to _setTemplateViewRatio function
				this._setTemplateViewRatio((this._data.UI.drag_handle_x + this._data.UI.dragHandlePosition) / this._data.UI.vp_width * 100);

				break;

			case 'mouseup':
			case 'touchend':
				if (this._data.UI.dragHandlePosition < 5 && this._data.UI.dragHandlePosition > -5) {
					// little movement - assume a click/tap occured
					width = this._getReferencedElement('drag_handle').offsetWidth;

					if (this._data.UI.drag_handle_x < width) {
						// set to 50/50
						this._setTemplateViewRatio(50);
					} else {
						// set to 0/100
						this._setTemplateViewRatio(0);
					}
				}

				// update metrics whenever we're stopping
				this._handleWindowResize();
				break;
		}
	},

	_handleWindowResize: function _handleWindowResize() {
		this._data.UI.drag_handle_x = this._getReferencedElement('drag_handle').offsetLeft;
		this._data.UI.vp_width = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);

		// reset dragHandlePosition because the metrics have changed
		this._data.UI.dragHandlePosition = 0;
	},

	/**
  * @param {number} ratio - % ratio for the template
  * @description
  * Sets the template/view ratio by giving the template container a % width and
  * adjusting the view container accordingly.
  * @private
  */
	_setTemplateViewRatio: function _setTemplateViewRatio(ratio) {
		this._refs.components.template.style.flexBasis = ratio + '%';
		this._refs.components.view.style.flexBasis = Math.abs(ratio - 100) + '%';
	},

	_isValidDrop: function _isValidDrop(droplet, drop_zone) {
		return drop_zone.willAccept(droplet, this._store);
	},

	attachDropletToDropZone: function attachDropletToDropZone(droplet, drop_zone) {
		// clear active droplet
		this._store.dispatch(_actions2.default.setActiveDroplet(''));

		// check if valid drop
		if (this._isValidDrop(droplet, drop_zone)) {
			if (droplet.editable) {
				// show edit dialog before adding the attachment
				this._showDialog(_constants.dialogModes.EDIT_DROPLET, {
					droplet_id: droplet.id,
					zone_id: drop_zone.id,
					attachment_index: null
				});
			} else {
				// add attachment without dialog
				this.zoneAddAttachment(drop_zone.id, droplet.id, droplet.data);
			}

			return true;
		} else {
			return false;
		}
	},

	zoneAddAttachment: function zoneAddAttachment(zone_id, droplet_id, data) {
		this._store.dispatch(_actions2.default.zoneAddAttachment(zone_id, droplet_id, true, data));

		this._updateView();
	},

	zoneEditAttachment: function zoneEditAttachment(zone_id, attachment_index, data) {
		this._store.dispatch(_actions2.default.zoneEditAttachment(zone_id, attachment_index, data));

		this._updateView();
	},

	zoneDetachAttachment: function zoneDetachAttachment(zone_id, attachment_index) {
		this._store.dispatch(_actions2.default.zoneDetachAttachment(zone_id, attachment_index));
	},

	/**
  * Retrieve a zone's attachment (by index)
  */
	zoneGetAttachment: function zoneGetAttachment(zone_id, attachment_index) {
		var zone,
		    state = this._store.getState();

		if (state.zones && (zone = state.zones[zone_id]) && zone.attachments && zone.attachments.length > attachment_index) {
			return zone.attachments[attachment_index];
		}

		return null;
	},

	_updateView: function _updateView() {
		var state = this._store.getState();

		this._comms.send('view', {
			cmd: _constants.messageCommands.RELOAD,
			data: {
				markup: this._template.renderAsHTML(state.zones)
			}
		});
	},

	/**
  * Obtains an element stored in the internal refs collection
  */
	_getReferencedElement: function _getReferencedElement(collection, key) {
		var ref;

		if ((typeof key === 'undefined' || !key) && (ref = this._refs.components[collection]) || (ref = this._refs.components[collection][key])) {
			return ref;
		} else {
			throw new Error('Referenced element at ' + collection + '(' + key + ') could not be found.');
		}
	},

	getDropletById: function getDropletById(id) {
		return this._data.pallet.find(function (element) {
			return element.id === id;
		});
	},

	getDropZoneById: function getDropZoneById(id) {
		return this._data.drop_zones[id] || null;
	}
};

exports.default = UI;

/***/ }),

/***/ 142:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// JS Polyfills - doesn't export anything, just modifies existing Object specs
Object.deepAssign = function (target, varArgs) {
	'use strict';

	var to, from, index, key;

	if (target == null) {
		// TypeError if undefined or null
		throw new TypeError('Cannot convert undefined or null to object');
	}

	to = typeof varArgs !== 'undefined' && Array.isArray(varArgs) && arguments.length === 2 ? Array(target) : // arrays to retain their identity
	Object(target); // otherwise use an object

	for (index = 1; index < arguments.length; index++) {
		from = arguments[index];

		if (from != null || typeof from === 'undefined') {
			for (key in from) {
				if (from.hasOwnProperty(key)) {
					if (_typeof(from[key]) === 'object' && from[key] != null) {
						to[key] = Object.deepAssign(Array.isArray(from[key]) ? [] : {}, to[key], from[key]);
					} else {
						to[key] = from[key];
					}
				}
			}
		}
	}

	return to;
};

/***/ }),

/***/ 143:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _defaultState = __webpack_require__(117);

var _defaultState2 = _interopRequireDefault(_defaultState);

var _constants = __webpack_require__(9);

var _redux = __webpack_require__(31);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Sets application state values
 */
function app() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _defaultState2.default.app;
	var action = arguments[1];

	var active;

	switch (action.type) {
		// set ui state
		case _constants.actionTypes.UI_STATE:
			// set 'active' flag based on the ui_state value
			switch (action.ui_state) {
				case _constants.uiStates.ACTIVE:
					active = true;
					break;

				default:
					active = false;
			}

			return Object.assign({}, state, {
				ui_state: action.ui_state,
				active: active
			});

		case _constants.actionTypes.SET_ACTIVE_DROPLET:
			// set the active droplet (i.e. the one that will be "dropped" when a
			// drop zone is next clicked
			return Object.assign({}, state, {
				active_droplet_id: action.droplet_id
			});

		default:
			return state;
	}
}

/**
 * Sets drop zone state values
 */
function zones() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _defaultState2.default.zones;
	var action = arguments[1];

	var zones = Object.assign({}, state);

	switch (action.type) {
		case _constants.actionTypes.ZONE_ADD_ATTACHMENT:
			if (!zones[action.id]) {
				zones[action.id] = {
					attachments: []
				};
			}

			// attach the droplet
			zones[action.id].attachments.push({
				droplet_id: action.droplet_id,
				data: action.data
			});

			break;

		case _constants.actionTypes.ZONE_EDIT_ATTACHMENT:
			if (zones[action.id].attachments[action.attachment_index]) {
				zones[action.id].attachments[action.attachment_index].data = action.data;
			}

			break;

		case _constants.actionTypes.ZONE_DETACH_ATTACHMENT:
			// detach the attachment by index
			if (action.attachment_index !== null && action.attachment_index < zones[action.id].attachments.length) {
				zones[action.id].attachments.splice(action.attachment_index, 1);
			}

			break;

		default:
			return state;
	}

	return zones;
}

function dialog() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _defaultState2.default.dialog;
	var action = arguments[1];

	switch (action.type) {
		case _constants.actionTypes.SET_DIALOG_MODE:
			return Object.assign({}, state, {
				mode: action.mode,
				state: action.state
			});

		default:
			return state;
	}
}

exports.default = (0, _redux.combineReducers)({
	app: app,
	zones: zones,
	dialog: dialog
});

/***/ }),

/***/ 144:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}


/***/ }),

/***/ 145:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(144)
var ieee754 = __webpack_require__(164)
var isArray = __webpack_require__(166)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(30)))

/***/ }),

/***/ 147:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(148)(undefined);
// imports
exports.push([module.i, "@import url(//fonts.googleapis.com/css?family=Fira+Mono|Muli:400,700);", ""]);

// module
exports.push([module.i, "/* reset */\nhtml, body, div, span, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\nabbr, address, cite, code,\ndel, dfn, em, img, ins, kbd, q, samp,\nsmall, strong, sub, sup, var,\nb, i,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  background: transparent; }\n\nbody {\n  line-height: 1; }\n\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n  display: block; }\n\nnav ul {\n  list-style: none; }\n\nblockquote, q {\n  quotes: none; }\n\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none; }\n\na {\n  margin: 0;\n  padding: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  background: transparent; }\n\n/* change colours to suit your needs */\nins {\n  background-color: #ff9;\n  color: #000;\n  text-decoration: none; }\n\n/* change colours to suit your needs */\nmark {\n  background-color: #ff9;\n  color: #000;\n  font-style: italic;\n  font-weight: bold; }\n\ndel {\n  text-decoration: line-through; }\n\nabbr[title], dfn[title] {\n  border-bottom: 1px dotted;\n  cursor: help; }\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0; }\n\n/* change border colour to suit your needs */\nhr {\n  display: block;\n  height: 1px;\n  border: 0;\n  border-top: 1px solid #cccccc;\n  margin: 1em 0;\n  padding: 0; }\n\ninput, select {\n  vertical-align: middle; }\n\nbody {\n  font-family: \"Muli\", sans-serif;\n  line-height: 140%;\n  color: #333; }\n\nh1 {\n  font-size: 24px;\n  font-size: 1.5rem; }\n\nh2 {\n  font-size: 22px;\n  font-size: 1.375rem; }\n\nh3 {\n  font-size: 20px;\n  font-size: 1.25rem; }\n\np {\n  margin: .75em 0;\n  font-size: 16px;\n  font-size: 1rem; }\n\np:first-child {\n  margin-top: 0; }\n\np:last-child {\n  margin-bottom: 0; }\n\npre {\n  font-family: \"Fira Mono\", monospace; }\n\n.view iframe {\n  z-index: 1; }\n\n.overlay,\n.view .drag-mask {\n  z-index: 2; }\n\n.droplet,\n.drag-handle {\n  z-index: 3; }\n\n.dialog {\n  z-index: 4; }\n\n* {\n  box-sizing: border-box; }\n\n/* main layout */\nbody {\n  background-color: #fff; }\n\n.app,\n.tag-canvas {\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0; }\n\n.tag-canvas {\n  display: flex;\n  flex-direction: column; }\n  .tag-canvas header {\n    flex-shrink: 0; }\n  .tag-canvas .main {\n    display: flex;\n    flex-grow: 1; }\n    .tag-canvas .main > *:not(.drag-handle) {\n      flex-basis: 50%; }\n    .tag-canvas .main .drag-handle {\n      flex-basis: 20px; }\n  .tag-canvas .pallet {\n    flex-shrink: 0; }\n\nheader {\n  padding: 10px;\n  border-bottom: 1px solid #ccc; }\n  header h1 {\n    letter-spacing: 1px; }\n    header h1 b {\n      color: #464ae0; }\n\n.template {\n  overflow: auto;\n  border-right: 1px solid #ccc;\n  background-color: #eee; }\n  .template pre {\n    margin: 10px;\n    line-height: 130%;\n    tab-size: 3; }\n  .template .hljs {\n    font-size: 1.125em;\n    line-height: 130%; }\n    .template .hljs .drop-zone .hljs-string {\n      color: white; }\n\n.droplet-active .template,\n.dragging .template {\n  background-color: #f3ffc6; }\n\n.view {\n  position: relative;\n  border-left: 1px solid #ccc; }\n  .view iframe,\n  .view .drag-mask {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%; }\n  .view .drag-mask {\n    visibility: hidden;\n    background-color: #fff; }\n\n.dragging .view .drag-mask {\n  visibility: visible;\n  opacity: .7; }\n\n.pallet {\n  display: flex;\n  flex-wrap: wrap;\n  border-top: 1px solid #ccc;\n  padding: 5px 10px;\n  background-color: #eee; }\n  .pallet .droplet {\n    margin: 5px 10px 5px 0; }\n\n.drop-zone {\n  display: inline-block; }\n  .drop-zone .target-outer {\n    display: inline-block;\n    position: relative; }\n  .drop-zone .target b {\n    border-radius: 3px;\n    padding: 2px 5px;\n    background-color: #959eff;\n    line-height: 120%;\n    color: white; }\n  .drop-zone .target.is-active b {\n    background-color: #464ae0; }\n  .drop-zone .target.is-target b {\n    box-shadow: 0 0 5px #ff515c;\n    background-color: #ff515c; }\n  .drop-zone .target.hidden {\n    display: none; }\n  .drop-zone .attachments > * {\n    display: inline-block;\n    margin: 1px;\n    border-radius: 3px;\n    padding: 1px;\n    background-color: #61ff4d; }\n  .drop-zone .attachments .element {\n    display: block; }\n\n.drop-zone:hover .target {\n  background-color: skyblue;\n  cursor: pointer; }\n\n.droplet-active .drop-zone .target b {\n  background-color: #464ae0; }\n\n.droplet-active .drop-zone .target:hover b {\n  box-shadow: 0 0 5px #ff515c;\n  background-color: #ff515c; }\n\n.droplet {\n  height: 35px;\n  text-decoration: none; }\n  .droplet .label {\n    transition: background-color 0.15s cubic-bezier(0.77, 0, 0.175, 1), color 0.15s cubic-bezier(0.77, 0, 0.175, 1), border-color 0.15s cubic-bezier(0.77, 0, 0.175, 1), opacity 0.5s cubic-bezier(0.77, 0, 0.175, 1);\n    display: flex;\n    align-items: center;\n    opacity: 1;\n    border-radius: 3px;\n    border: 1px solid #a0a0a0;\n    border-left-width: 5px;\n    height: 35px;\n    padding: 5px 10px;\n    line-height: 120%;\n    font-size: 14px;\n    font-size: 0.875rem;\n    background-color: #fff;\n    color: #333; }\n    .droplet .label .icon {\n      transition: fill 0.15s cubic-bezier(0.77, 0, 0.175, 1);\n      margin-right: .5em; }\n  .droplet:hover .label,\n  .droplet:active .label,\n  .droplet.active .label {\n    color: #fff;\n    background-color: #a0a0a0; }\n    .droplet:hover .label .icon,\n    .droplet:active .label .icon,\n    .droplet.active .label .icon {\n      fill: #fff; }\n  .droplet.item-dragging .label {\n    opacity: 0.5;\n    box-shadow: -2px 2px rgba(0, 0, 0, 0.3); }\n  .droplet.type-text .label {\n    border-color: #959eff; }\n  .droplet.type-text:hover .label,\n  .droplet.type-text:active .label,\n  .droplet.type-text.active .label {\n    border-color: #464ae0;\n    background-color: #464ae0; }\n  .droplet.type-attribute .label {\n    border-color: #61ff4d; }\n  .droplet.type-attribute:hover .label,\n  .droplet.type-attribute:active .label,\n  .droplet.type-attribute.active .label {\n    border-color: #3b9e2f;\n    background-color: #3b9e2f; }\n  .droplet.type-element .label {\n    border-color: #cc49ff; }\n  .droplet.type-element:hover .label,\n  .droplet.type-element:active .label,\n  .droplet.type-element.active .label {\n    border-color: #8f32b4;\n    background-color: #8f32b4; }\n\n.dialog {\n  position: fixed;\n  display: none;\n  justify-content: center;\n  align-items: center;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  background: #ccc;\n  /* The Fallback */\n  background: rgba(204, 204, 204, 0.7); }\n  .dialog.visible {\n    display: flex; }\n  .dialog .dialog-container {\n    box-shadow: -5px 5px rgba(0, 0, 0, 0.1);\n    max-width: 500px;\n    background-color: #fff; }\n  .dialog .dialog-heading {\n    padding: 20px;\n    border-bottom: 1px solid #ccc; }\n    .dialog .dialog-heading .icon {\n      margin-right: .5em; }\n    .dialog .dialog-heading p:nth-of-type(n+2) {\n      font-size: 14px;\n      font-size: 0.875rem; }\n\nform fieldset:not(.buttons) {\n  padding: 0 20px;\n  margin: 10px 0; }\n\nform fieldset.buttons {\n  content: '';\n  display: table;\n  clear: both;\n  border-top: 1px solid #ccc;\n  padding: 20px; }\n  form fieldset.buttons button {\n    float: right;\n    margin: 0 .25em; }\n    form fieldset.buttons button.pull-left {\n      float: left; }\n\nform legend {\n  font-weight: bolder; }\n\nform .field {\n  display: flex;\n  align-items: center;\n  margin: 10px 0; }\n  form .field label {\n    width: 40%; }\n\ninput,\nbutton,\nselect {\n  font-size: 14px;\n  font-size: 0.875rem;\n  padding: 5px; }\n\nbutton {\n  position: relative;\n  border: 0;\n  padding: 10px 15px;\n  background-color: #ccc; }\n  button:hover, button:focus {\n    left: 2px;\n    top: -2px;\n    cursor: pointer;\n    box-shadow: -2px 2px rgba(0, 0, 0, 0.3);\n    background-color: #d9d9d9; }\n  button:active {\n    left: 0;\n    top: 0;\n    box-shadow: none; }\n  button.primary {\n    background-color: #959eff; }\n    button.primary.primary:hover, button.primary.primary:focus {\n      background-color: #afb5ff; }\n  button.danger {\n    color: #fff;\n    background-color: #ff515c; }\n    button.danger.danger:hover, button.danger.danger:focus {\n      background-color: #ff6b74; }\n\n.icon {\n  fill: #333; }\n\n.drag-handle {\n  position: relative;\n  background-color: #eee;\n  cursor: col-resize; }\n  .drag-handle:after {\n    content: '';\n    transition: all 0.15s cubic-bezier(0.77, 0, 0.175, 1);\n    position: absolute;\n    box-sizing: border-box;\n    left: 50%;\n    top: 50%;\n    margin-top: -25px;\n    margin-left: -4px;\n    width: 8px;\n    height: 50px;\n    border-left: 2px solid #ccc;\n    border-right: 2px solid #ccc; }\n  .drag-handle:hover, .drag-handle.item-dragging {\n    background-color: #f4f4f4; }\n  .drag-handle:hover:after, .drag-handle.item-dragging:after {\n    height: 100px;\n    margin-top: -50px; }\n", ""]);

// exports


/***/ }),

/***/ 148:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap) {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
  var base64 = new Buffer(JSON.stringify(sourceMap)).toString('base64');
  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

  return '/*# ' + data + ' */';
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(145).Buffer))

/***/ }),

/***/ 164:
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ 166:
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ 23:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A single `editable` defiition to produce one field.
 * @typedef EditableItemDefinition
 * @property {string} type - One of 'text', 'longtext', 'dropdown', 'checkbox', or 'radio'.
 * @property {bool} [required] - Whether the field must be filled in or not.
 * @property {mixed} [value] - Either an array of values, or a single string value.
 * @property {string} [placeholder] - In the case of a text value, this will show in place of empty values.
 * @property {string} [selected] - In the case of an array value, this set the value as 'selected'.
 */

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _PropTypes = __webpack_require__(140);

var _PropTypes2 = _interopRequireDefault(_PropTypes);

var _FormField = __webpack_require__(32);

var _FormField2 = _interopRequireDefault(_FormField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Droplet,
    droplet_id = 0;

/**
 * Individual droplet class. Handles validation of props in a similar fashion to
 * React, but (probably) with a lot less style.
 * @class
 */
Droplet = function Droplet() {
	var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	var id = arguments[1];

	if (typeof id === 'number') {
		this.id = 'droplet_' + id;
	} else {
		this.id = 'droplet_' + ++droplet_id;
	}

	this._originalSettings = Object.deepAssign({}, settings);
	this.data = {};
	this.name = null;
	this.dropletType = null;
	this.attachmentIds = [];

	this.init();
};

Droplet.prototype = {
	/**
  * Initialisation.
  * @private
  */
	init: function init() {
		// set base properties for all droplets
		this._validateAndSet(['name', 'dropletType', 'attachmentIds', 'editable'], this);

		// check droplet type is valid
		switch (this.dropletType) {
			case 'element':
			case 'text':
			case 'attribute':
				this._setExtraFields();
				break;

			default:
				throw new Error('Droplet type ' + this.dropletType + ' is invalid.');
		}
	},

	/**
  * Registers type specific fields for validation.
  * @private
  */
	_setExtraFields: function _setExtraFields() {
		switch (this.dropletType) {
			case 'text':
				this._validateAndSet(['value'], this.data);
				break;

			case 'element':
				this._validateAndSet(['attrs', 'tagName', 'innerHTML'], this.data);
				break;

			case 'attribute':
				this._validateAndSet(['key', 'value'], this.data);
				break;
		}
	},

	/**
  * Validates (using the PropType functions) and sets the instance values
  * given the defined properties.
  */
	_validateAndSet: function _validateAndSet(values, context) {
		var _this = this;

		values.forEach(function (value) {
			if (Droplet.PropTypes.hasOwnProperty(value)) {
				if (Droplet.PropTypes[value](_this._originalSettings[value], value, _this._originalSettings.name || null, _this._originalSettings.dropletType || null)) {
					context[value] = _this._originalSettings[value];
				}
			} else {
				throw new Error('Droplet property "' + value + '" definition does not exist.');
			}
		});
	}
};

/**
 * Designed as a PropType validator much like string, isRequired, arrayOf etc, this
 * function specifically tests the validity of the `editable` prop and its children.
 */
Droplet._validateEditableSet = function (value, prop, droplet_name, droplet_type) {
	var attribute,
	    key,
	    attrkey,
	    prop_error = 'Error in Droplet prop ' + droplet_name + ' (' + prop + '):';

	// allow undefined values
	if (typeof value === 'undefined') {
		return true;
	}

	// testing the droplet value
	if (_PropTypes2.default._assert((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object', prop, 'Value must be an object.', droplet_name, droplet_type)) {
		// continue testing
		for (key in value) {
			// testing individual attributes
			attribute = value[key];

			// attribute is unrecognised or not an object
			if (Droplet.editableAttributes.indexOf(key) === -1 || (typeof attribute === 'undefined' ? 'undefined' : _typeof(attribute)) !== 'object') {
				throw new Error(prop_error + ' "' + key + '" is not an editable attribute or is of the wrong type');
			}

			// attribute is 'attrs', but is not an object of objects
			if (key === 'attrs') {
				for (attrkey in attribute) {
					Droplet._validateEditableItem(attrkey, attribute[attrkey], prop_error);
				}
			} else {
				Droplet._validateEditableItem(key, attribute, prop_error);
			}
		}
	}

	return true;
};

Droplet._validateEditableItem = function (item, data, error_prefix) {
	var error = error_prefix + item + ' - ';

	if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') {
		throw new Error(error + 'not an EditableItemDefinition object');
	}

	// check "type" exists
	if (typeof data.type === 'undefined') {
		throw new Error(error + 'doesn’t contain ‘type’ value');
	}

	// check "type" is valid
	if (Droplet.editableFieldTypes.indexOf(data.type) === -1) {
		throw new Error(error + 'invalid type attribute "' + data.type + '"');
	}

	// run checks on the editable attributes that match FormField data attributes
	_FormField2.default.validateDataAttribute(data, item, error_prefix);

	return true;
};

/**
 * Defines the possible prop types for Droplets. Some are always required.
 * @prop {string} value - Droplet 'value'. When used as an `attribute` type value, can be
 * set to `null` to define a value-less attribute.
 * @prop {string} name - Droplet name (used as a label).
 * @prop {string[]} attachmentIds - Drop zone attachment IDs.
 * @prop {string} dropletType - Droplet type. One of `element`, `text` or `attribute`.
 * @prop {object} [attrs] - Droplet attributes, in the case of the `element` type.
 * @prop {string} tagname - Droplet tagName attribute, i.e. the actual HTMLElement used.
 * Requred when type is `element`.
 * @prop {string} innerHTML - Droplet's innerHTML.
 * @prop {EditableItemDefinition} editable - Editable properties of `element` types. [add link to tutorial!].
 * @prop {string} key - Attribute keys (names) of `attribute` types.
 */
Droplet.PropTypes = {
	value: _PropTypes2.default.string.isRequired,
	name: _PropTypes2.default.string.notEmpty.isRequired,
	attachmentIds: _PropTypes2.default.arrayOf.string.isRequired,
	dropletType: _PropTypes2.default.string.isRequired,
	attrs: _PropTypes2.default.object,
	tagName: _PropTypes2.default.string.notEmpty.isRequired,
	innerHTML: _PropTypes2.default.string,
	editable: Droplet._validateEditableSet,
	key: _PropTypes2.default.string.notEmpty.isRequired
};

Droplet.editableAttributes = ['value', 'attrs', 'tagName', 'innerHTML'];

Droplet.editableFieldTypes = ['text', 'longtext', 'dropdown', 'checkbox', 'radio'];

exports.default = Droplet;

/***/ }),

/***/ 24:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
var registerGeneralEvent = exports.registerGeneralEvent = function registerGeneralEvent(component, id, info) {
	var args = arguments;

	return function (event) {
		event.preventDefault();
		if (typeof component.props.onEvent === 'function') {
			component.props.onEvent.apply(component, [event, info, id].concat(Array.prototype.slice.call(args, 3)));
		}
	}.bind(this);
};

var collectRef = exports.collectRef = function collectRef(props, collection, key) {
	return function (ref) {
		if (typeof props.refCollector === 'function') {
			props.refCollector(collection, ref, key);
		} else {
			throw new Error('ref collection used but no collector has been set up for ' + collection + (key ? '/' + key : ''));
		}
	};
};

/**
 * Returns a function for validating specific keys within an object property.
 */
var validatePropKeys = exports.validatePropKeys = function validatePropKeys(require) {
	return function (props, key, component) {
		var a;

		for (a = 0; a < require.length; a += 1) {
			if (!props[key].hasOwnProperty(require[a]) && props[key][require[a]] !== undefined) {
				return new Error('Prop	`' + key + '` does not contain definition `' + require[a] + '` in ' + component + ' component.');
			}
		}
	};
};

/**
 * Escapes a string for use as a match within a regex
 * @see http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex/6969486#6969486
 */
var escapeRegExp = exports.escapeRegExp = function escapeRegExp(str) {
	return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\$&');
};

/***/ }),

/***/ 275:
/***/ (function(module, exports) {

(function(host) {

  var properties = {
    browser: [
      [/msie ([\.\_\d]+)/, "ie"],
      [/trident\/.*?rv:([\.\_\d]+)/, "ie"],
      [/firefox\/([\.\_\d]+)/, "firefox"],
      [/chrome\/([\.\_\d]+)/, "chrome"],
      [/version\/([\.\_\d]+).*?safari/, "safari"],
      [/mobile safari ([\.\_\d]+)/, "safari"],
      [/android.*?version\/([\.\_\d]+).*?safari/, "com.android.browser"],
      [/crios\/([\.\_\d]+).*?safari/, "chrome"],
      [/opera/, "opera"],
      [/opera\/([\.\_\d]+)/, "opera"],
      [/opera ([\.\_\d]+)/, "opera"],
      [/opera mini.*?version\/([\.\_\d]+)/, "opera.mini"],
      [/opios\/([a-z\.\_\d]+)/, "opera"],
      [/blackberry/, "blackberry"],
      [/blackberry.*?version\/([\.\_\d]+)/, "blackberry"],
      [/bb\d+.*?version\/([\.\_\d]+)/, "blackberry"],
      [/rim.*?version\/([\.\_\d]+)/, "blackberry"],
      [/iceweasel\/([\.\_\d]+)/, "iceweasel"],
      [/edge\/([\.\d]+)/, "edge"]
    ],
    os: [
      [/linux ()([a-z\.\_\d]+)/, "linux"],
      [/mac os x/, "macos"],
      [/mac os x.*?([\.\_\d]+)/, "macos"],
      [/os ([\.\_\d]+) like mac os/, "ios"],
      [/openbsd ()([a-z\.\_\d]+)/, "openbsd"],
      [/android/, "android"],
      [/android ([a-z\.\_\d]+);/, "android"],
      [/mozilla\/[a-z\.\_\d]+ \((?:mobile)|(?:tablet)/, "firefoxos"],
      [/windows\s*(?:nt)?\s*([\.\_\d]+)/, "windows"],
      [/windows phone.*?([\.\_\d]+)/, "windows.phone"],
      [/windows mobile/, "windows.mobile"],
      [/blackberry/, "blackberryos"],
      [/bb\d+/, "blackberryos"],
      [/rim.*?os\s*([\.\_\d]+)/, "blackberryos"]
    ],
    device: [
      [/ipad/, "ipad"],
      [/iphone/, "iphone"],
      [/lumia/, "lumia"],
      [/htc/, "htc"],
      [/nexus/, "nexus"],
      [/galaxy nexus/, "galaxy.nexus"],
      [/nokia/, "nokia"],
      [/ gt\-/, "galaxy"],
      [/ sm\-/, "galaxy"],
      [/xbox/, "xbox"],
      [/(?:bb\d+)|(?:blackberry)|(?: rim )/, "blackberry"]
    ]
  };

  var UNKNOWN = "Unknown";

  var propertyNames = Object.keys(properties);

  function Sniffr() {
    var self = this;

    propertyNames.forEach(function(propertyName) {
      self[propertyName] = {
        name: UNKNOWN,
        version: [],
        versionString: UNKNOWN
      };
    });
  }

  function determineProperty(self, propertyName, userAgent) {
    properties[propertyName].forEach(function(propertyMatcher) {
      var propertyRegex = propertyMatcher[0];
      var propertyValue = propertyMatcher[1];

      var match = userAgent.match(propertyRegex);

      if (match) {
        self[propertyName].name = propertyValue;

        if (match[2]) {
          self[propertyName].versionString = match[2];
          self[propertyName].version = [];
        } else if (match[1]) {
          self[propertyName].versionString = match[1].replace(/_/g, ".");
          self[propertyName].version = parseVersion(match[1]);
        } else {
          self[propertyName].versionString = UNKNOWN;
          self[propertyName].version = [];
        }
      }
    });
  }

  function parseVersion(versionString) {
    return versionString.split(/[\._]/).map(function(versionPart) {
      return parseInt(versionPart);
    });
  }

  Sniffr.prototype.sniff = function(userAgentString) {
    var self = this;
    var userAgent = (userAgentString || navigator.userAgent || "").toLowerCase();

    propertyNames.forEach(function(propertyName) {
      determineProperty(self, propertyName, userAgent);
    });
  };


  if (typeof module !== 'undefined' && module.exports) {
    module.exports = Sniffr;
  } else {
    host.Sniffr = new Sniffr();
    host.Sniffr.sniff(navigator.userAgent);
  }
})(this);


/***/ }),

/***/ 276:
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
var stylesInDom = {},
	memoize = function(fn) {
		var memo;
		return function () {
			if (typeof memo === "undefined") memo = fn.apply(this, arguments);
			return memo;
		};
	},
	isOldIE = memoize(function() {
		return /msie [6-9]\b/.test(self.navigator.userAgent.toLowerCase());
	}),
	getHeadElement = memoize(function () {
		return document.head || document.getElementsByTagName("head")[0];
	}),
	singletonElement = null,
	singletonCounter = 0,
	styleElementsInsertedAtTop = [],
	fixUrls = __webpack_require__(277);

module.exports = function(list, options) {
	if(typeof DEBUG !== "undefined" && DEBUG) {
		if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};
	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (typeof options.singleton === "undefined") options.singleton = isOldIE();

	// By default, add <style> tags to the bottom of <head>.
	if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

	var styles = listToStyles(list);
	addStylesToDom(styles, options);

	return function update(newList) {
		var mayRemove = [];
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			domStyle.refs--;
			mayRemove.push(domStyle);
		}
		if(newList) {
			var newStyles = listToStyles(newList);
			addStylesToDom(newStyles, options);
		}
		for(var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];
			if(domStyle.refs === 0) {
				for(var j = 0; j < domStyle.parts.length; j++)
					domStyle.parts[j]();
				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom(styles, options) {
	for(var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];
		if(domStyle) {
			domStyle.refs++;
			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}
			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];
			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}
			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles(list) {
	var styles = [];
	var newStyles = {};
	for(var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};
		if(!newStyles[id])
			styles.push(newStyles[id] = {id: id, parts: [part]});
		else
			newStyles[id].parts.push(part);
	}
	return styles;
}

function insertStyleElement(options, styleElement) {
	var head = getHeadElement();
	var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
	if (options.insertAt === "top") {
		if(!lastStyleElementInsertedAtTop) {
			head.insertBefore(styleElement, head.firstChild);
		} else if(lastStyleElementInsertedAtTop.nextSibling) {
			head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			head.appendChild(styleElement);
		}
		styleElementsInsertedAtTop.push(styleElement);
	} else if (options.insertAt === "bottom") {
		head.appendChild(styleElement);
	} else {
		throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
	}
}

function removeStyleElement(styleElement) {
	styleElement.parentNode.removeChild(styleElement);
	var idx = styleElementsInsertedAtTop.indexOf(styleElement);
	if(idx >= 0) {
		styleElementsInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement(options) {
	var styleElement = document.createElement("style");
	options.attrs.type = "text/css";

	attachTagAttrs(styleElement, options.attrs);
	insertStyleElement(options, styleElement);
	return styleElement;
}

function createLinkElement(options) {
	var linkElement = document.createElement("link");
	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	attachTagAttrs(linkElement, options.attrs);
	insertStyleElement(options, linkElement);
	return linkElement;
}

function attachTagAttrs(element, attrs) {
	Object.keys(attrs).forEach(function (key) {
		element.setAttribute(key, attrs[key]);
	});
}

function addStyle(obj, options) {
	var styleElement, update, remove;

	if (options.singleton) {
		var styleIndex = singletonCounter++;
		styleElement = singletonElement || (singletonElement = createStyleElement(options));
		update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
		remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
	} else if(obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function") {
		styleElement = createLinkElement(options);
		update = updateLink.bind(null, styleElement, options);
		remove = function() {
			removeStyleElement(styleElement);
			if(styleElement.href)
				URL.revokeObjectURL(styleElement.href);
		};
	} else {
		styleElement = createStyleElement(options);
		update = applyToTag.bind(null, styleElement);
		remove = function() {
			removeStyleElement(styleElement);
		};
	}

	update(obj);

	return function updateStyle(newObj) {
		if(newObj) {
			if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
				return;
			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;
		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag(styleElement, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (styleElement.styleSheet) {
		styleElement.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = styleElement.childNodes;
		if (childNodes[index]) styleElement.removeChild(childNodes[index]);
		if (childNodes.length) {
			styleElement.insertBefore(cssNode, childNodes[index]);
		} else {
			styleElement.appendChild(cssNode);
		}
	}
}

function applyToTag(styleElement, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		styleElement.setAttribute("media", media)
	}

	if(styleElement.styleSheet) {
		styleElement.styleSheet.cssText = css;
	} else {
		while(styleElement.firstChild) {
			styleElement.removeChild(styleElement.firstChild);
		}
		styleElement.appendChild(document.createTextNode(css));
	}
}

function updateLink(linkElement, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/* If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
	and there is no publicPath defined then lets turn convertToAbsoluteUrls
	on by default.  Otherwise default to the convertToAbsoluteUrls option
	directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls){
		css = fixUrls(css);
	}

	if(sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = linkElement.href;

	linkElement.href = URL.createObjectURL(blob);

	if(oldSrc)
		URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ 277:
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	var fixedCss = css.replace(/url *\( *(.+?) *\)/g, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),

/***/ 278:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(147);
if(typeof content === 'string') content = [[module.i, content, '']];
// add the styles to the DOM
var update = __webpack_require__(276)(content, {});
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../css-loader/index.js!../../../sass-loader/lib/loader.js!./main.scss", function() {
			var newContent = require("!!../../../css-loader/index.js!../../../sass-loader/lib/loader.js!./main.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 284:
/***/ (function(module, exports, __webpack_require__) {


var sprite = __webpack_require__(68);
var image = "<symbol viewBox=\"0 0 8 8\" id=\"icon-puzzle-piece\" > <path d=\"M3 0c-.28 0-.54.1-.72.28-.18.18-.28.44-.28.72 0 .28.18.48.28.72.03.06.03.16.03.28h-2.31v6h2.31c0-.12-.01-.22-.03-.28-.1-.24-.28-.44-.28-.72 0-.28.1-.54.28-.72.18-.18.44-.28.72-.28.28 0 .54.1.72.28.18.18.28.44.28.72 0 .28-.18.48-.28.72-.03.06-.03.16-.03.28h2.31v-2.31c.12 0 .22.01.28.03.24.1.44.28.72.28.28 0 .54-.1.72-.28.18-.18.28-.44.28-.72 0-.28-.1-.54-.28-.72-.18-.18-.44-.28-.72-.28-.28 0-.48.18-.72.28-.06.03-.16.03-.28.03v-2.31h-2.31c0-.12.01-.22.03-.28.1-.24.28-.44.28-.72 0-.28-.1-.54-.28-.72-.18-.18-.44-.28-.72-.28z\"/> </symbol>";
module.exports = sprite.add(image, "icon-puzzle-piece");

/***/ }),

/***/ 285:
/***/ (function(module, exports, __webpack_require__) {


var sprite = __webpack_require__(68);
var image = "<symbol viewBox=\"0 0 8 8\" id=\"icon-tag\" > <path d=\"M0 0v3l5 5 3-3-5-5h-3zm2 1c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1z\"/> </symbol>";
module.exports = sprite.add(image, "icon-tag");

/***/ }),

/***/ 286:
/***/ (function(module, exports, __webpack_require__) {


var sprite = __webpack_require__(68);
var image = "<symbol viewBox=\"0 0 8 8\" id=\"icon-text\" > <path d=\"M0 0v2h.5c0-.55.45-1 1-1h1.5v5.5c0 .28-.22.5-.5.5h-.5v1h4v-1h-.5c-.28 0-.5-.22-.5-.5v-5.5h1.5c.55 0 1 .45 1 1h.5v-2h-8z\"/> </symbol>";
module.exports = sprite.add(image, "icon-text");

/***/ }),

/***/ 287:
/***/ (function(module, exports, __webpack_require__) {

var Sniffr = __webpack_require__(275);

/**
 * List of SVG attributes to fix url target in them
 * @type {string[]}
 */
var fixAttributes = [
  'clipPath',
  'colorProfile',
  'src',
  'cursor',
  'fill',
  'filter',
  'marker',
  'markerStart',
  'markerMid',
  'markerEnd',
  'mask',
  'stroke'
];

/**
 * Query to find'em
 * @type {string}
 */
var fixAttributesQuery = '[' + fixAttributes.join('],[') + ']';
/**
 * @type {RegExp}
 */
var URI_FUNC_REGEX = /^url\((.*)\)$/;

/**
 * Convert array-like to array
 * @param {Object} arrayLike
 * @returns {Array.<*>}
 */
function arrayFrom(arrayLike) {
  return Array.prototype.slice.call(arrayLike, 0);
}

/**
 * Handles forbidden symbols which cannot be directly used inside attributes with url(...) content.
 * Adds leading slash for the brackets
 * @param {string} url
 * @return {string} encoded url
 */
function encodeUrlForEmbedding(url) {
  return url.replace(/\(|\)/g, "\\$&");
}

/**
 * Replaces prefix in `url()` functions
 * @param {Element} svg
 * @param {string} currentUrlPrefix
 * @param {string} newUrlPrefix
 */
function baseUrlWorkAround(svg, currentUrlPrefix, newUrlPrefix) {
  var nodes = svg.querySelectorAll(fixAttributesQuery);

  if (!nodes) {
    return;
  }

  arrayFrom(nodes).forEach(function (node) {
    if (!node.attributes) {
      return;
    }

    arrayFrom(node.attributes).forEach(function (attribute) {
      var attributeName = attribute.localName.toLowerCase();

      if (fixAttributes.indexOf(attributeName) !== -1) {
        var match = URI_FUNC_REGEX.exec(node.getAttribute(attributeName));

        // Do not touch urls with unexpected prefix
        if (match && match[1].indexOf(currentUrlPrefix) === 0) {
          var referenceUrl = encodeUrlForEmbedding(newUrlPrefix + match[1].split(currentUrlPrefix)[1]);
          node.setAttribute(attributeName, 'url(' + referenceUrl + ')');
        }
      }
    });
  });
}

/**
 * Because of Firefox bug #353575 gradients and patterns don't work if they are within a symbol.
 * To workaround this we move the gradient definition outside the symbol element
 * @see https://bugzilla.mozilla.org/show_bug.cgi?id=353575
 * @param {Element} svg
 */
var FirefoxSymbolBugWorkaround = function (svg) {
  var defs = svg.querySelector('defs');

  var moveToDefsElems = svg.querySelectorAll('symbol linearGradient, symbol radialGradient, symbol pattern');
  for (var i = 0, len = moveToDefsElems.length; i < len; i++) {
    defs.appendChild(moveToDefsElems[i]);
  }
};

/**
 * Fix for browser (IE, maybe other too) which are throwing 'WrongDocumentError'
 * if you insert an element which is not part of the document
 * @see http://stackoverflow.com/questions/7981100/how-do-i-dynamically-insert-an-svg-image-into-html#7986519
 * @param {Element} svg
 */
function importSvg(svg) {
  try {
    if (document.importNode) {
      return document.importNode(svg, true);
    }
  } catch(e) {}

  return svg;
}

/**
 * @type {string}
 */
var DEFAULT_URI_PREFIX = '#';

/**
 * @type {string}
 */
var xLinkHref = 'xlink:href';
/**
 * @type {string}
 */
var xLinkNS = 'http://www.w3.org/1999/xlink';
/**
 * @type {string}
 */
var svgOpening = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="' + xLinkNS + '"';
/**
 * @type {string}
 */
var svgClosing = '</svg>';
/**
 * @type {string}
 */
var contentPlaceHolder = '{content}';

/**
 * Representation of SVG sprite
 * @constructor
 */
function Sprite() {
  var baseElement = document.getElementsByTagName('base')[0];
  var currentUrl = window.location.href.split('#')[0];
  var baseUrl = baseElement && baseElement.href;
  this.urlPrefix = baseUrl && baseUrl !== currentUrl ? currentUrl + DEFAULT_URI_PREFIX : DEFAULT_URI_PREFIX;

  var sniffr = new Sniffr();
  sniffr.sniff();
  this.browser = sniffr.browser;
  this.content = [];

  if (this.browser.name !== 'ie' && baseUrl) {
    window.addEventListener('spriteLoaderLocationUpdated', function (e) {
      var currentPrefix = this.urlPrefix;
      var newUrlPrefix = e.detail.newUrl.split(DEFAULT_URI_PREFIX)[0] + DEFAULT_URI_PREFIX;
      baseUrlWorkAround(this.svg, currentPrefix, newUrlPrefix);
      this.urlPrefix = newUrlPrefix;

      if (this.browser.name === 'firefox' || this.browser.name === 'edge' || this.browser.name === 'chrome' && this.browser.version[0] >= 49) {
        var nodes = arrayFrom(document.querySelectorAll('use[*|href]'));
        nodes.forEach(function (node) {
          var href = node.getAttribute(xLinkHref);
          if (href && href.indexOf(currentPrefix) === 0) {
            node.setAttributeNS(xLinkNS, xLinkHref, newUrlPrefix + href.split(DEFAULT_URI_PREFIX)[1]);
          }
        });
      }
    }.bind(this));
  }
}

Sprite.styles = ['position:absolute', 'width:0', 'height:0'];

Sprite.spriteTemplate = function(){ return svgOpening + ' style="'+ Sprite.styles.join(';') +'"><defs>' + contentPlaceHolder + '</defs>' + svgClosing; }
Sprite.symbolTemplate = function() { return svgOpening + '>' + contentPlaceHolder + svgClosing; }

/**
 * @type {Array<String>}
 */
Sprite.prototype.content = null;

/**
 * @param {String} content
 * @param {String} id
 */
Sprite.prototype.add = function (content, id) {
  if (this.svg) {
    this.appendSymbol(content);
  }

  this.content.push(content);

  return DEFAULT_URI_PREFIX + id;
};

/**
 *
 * @param content
 * @param template
 * @returns {Element}
 */
Sprite.prototype.wrapSVG = function (content, template) {
  var svgString = template.replace(contentPlaceHolder, content);

  var svg = new DOMParser().parseFromString(svgString, 'image/svg+xml').documentElement;
  var importedSvg = importSvg(svg);

  if (this.browser.name !== 'ie' && this.urlPrefix) {
    baseUrlWorkAround(importedSvg, DEFAULT_URI_PREFIX, this.urlPrefix);
  }

  return importedSvg;
};

Sprite.prototype.appendSymbol = function (content) {
  var symbol = this.wrapSVG(content, Sprite.symbolTemplate()).childNodes[0];

  this.svg.querySelector('defs').appendChild(symbol);
  if (this.browser.name === 'firefox') {
    FirefoxSymbolBugWorkaround(this.svg);
  }
};

/**
 * @returns {String}
 */
Sprite.prototype.toString = function () {
  var wrapper = document.createElement('div');
  wrapper.appendChild(this.render());
  return wrapper.innerHTML;
};

/**
 * @param {HTMLElement} [target]
 * @param {Boolean} [prepend=true]
 * @returns {HTMLElement} Rendered sprite node
 */
Sprite.prototype.render = function (target, prepend) {
  target = target || null;
  prepend = typeof prepend === 'boolean' ? prepend : true;

  var svg = this.wrapSVG(this.content.join(''), Sprite.spriteTemplate());

  if (this.browser.name === 'firefox') {
    FirefoxSymbolBugWorkaround(svg);
  }

  if (target) {
    if (prepend && target.childNodes[0]) {
      target.insertBefore(svg, target.childNodes[0]);
    } else {
      target.appendChild(svg);
    }
  }

  this.svg = svg;

  return svg;
};

module.exports = Sprite;


/***/ }),

/***/ 292:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// require.ensure([], () => {
var App = __webpack_require__(113).default;

var app = new App({
	onElementRender: function onElementRender(markup, droplet, zone, is_output) {
		if (droplet.name === 'Letter button' && is_output) {
			markup.innerHTML = '<span>' + markup.innerHTML + '</span>';
		}

		return markup;
	}
});

app.load('templates/default.html', 'templates/pallet.json').catch(function (error) {
	console.error(error);
});
// }, 'app');

/***/ }),

/***/ 32:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * FormField data object
 * @typedef FormFieldData
 * @property {boolean} [required]
 * @property {string} [label]
 * @property {mixed} [options]
 * @property {string} [placeholder]
 * @property {mixed} [value]
 * @example
 * var field = FormField('fieldname', 'dropdown', {
 * 	'label': 'Please select a value',
 * 	'options': ['Value 1', 'Value 2', 'Value 3'],
 * 	'value': 'Value 2'
 * });
 */

/**
* This class exists almost entirely for data consistency.
* @class
* @param {string} name - Field name.
* @param {string} type - Input type.
* @param {FormFieldData} data - Field data.
*/
var FormField = function FormField(name, type) {
	var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	this._setNameAndType(name, type);
	this._validateAndSet(data);
};

FormField.prototype = {
	_setNameAndType: function _setNameAndType(name, type) {
		if (typeof name !== 'string') {
			throw new Error('Invalid field name "' + name + '"');
		} else {
			this.name = name;
		}

		if (typeof type !== 'string' || FormField.validTypes.indexOf(type) === -1) {
			throw new Error('Invalid field type "' + type + '"');
		} else {
			this.type = type;
		}
	},

	_validateAndSet: function _validateAndSet(data) {
		var _data = Object.deepAssign({}, data);

		if (FormField.validateDataAttribute(_data, this.name, 'Error with FormField data attribute')) {
			this.data = _data;

			// externalise remaining options
			this.required = data.required;
			this.options = data.options;
			this.placeholder = data.placeholder;
			this.label = data.label;

			this.value = typeof data.value !== 'undefined' ? data.value : '';
		}
	}
};

/**
 * Ensures a form field's data attributes are valid
 */
FormField.validateDataAttribute = function (data, item, error_prefix) {
	var error = error_prefix + ' ' + item + ' - ';

	// check "required" is a boolean, if defined
	if (typeof data.required !== 'undefined' && typeof data.required !== 'boolean') {
		throw new Error(error + '"required" attribute isn’t a boolean true or false');
	}

	// check "options" is valid
	if (typeof data.options !== 'undefined') {
		FormField._validateOptionsSetting(data.options, error);
	}

	// check "placeholder" is valid
	if (typeof data.placeholder !== 'undefined' && typeof data.placeholder !== 'string') {
		throw new Error(error + '"placeholder" attribute isn’t a string');
	}

	// check "value" is valid
	if (typeof data.value !== 'undefined') {
		FormField._validateValueSetting(data.value, data.options, error);
	}

	// check "label" is valid
	if (typeof data.label !== 'undefined' && typeof data.label !== 'string') {
		throw new Error(error + '"label" attribute isn’t a string');
	}

	// check "maxlength" is valid
	if (typeof data.maxlength !== 'undefined' && (typeof data.maxlength !== 'number' || data.maxlength < 1)) {
		throw new Error(error + '"maxlength" attribute isn’t a number or above zero');
	}

	return true;
};

FormField._validateOptionsSetting = function (options, error_prefix) {
	var key,
	    a,
	    error = error_prefix + '"options" is of an unrecognised type';

	if (Array.isArray(options)) {
		for (a = 0; a < options.length; a += 1) {
			if (typeof options[a] !== 'string') {
				throw new Error(error);
			}
		}
	} else if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && options !== null) {
		for (key in options) {
			if (typeof key !== 'string' || typeof options[key] !== 'string') {
				throw new Error(error + ' - object values must be a simple key/value set');
			}
		}
	} else if (options === null) {
		throw new Error(error + ' - options cannot be null');
	}

	return true;
};

FormField._validateValueSetting = function (value, options, error_prefix) {
	if (!Array.isArray(value) && typeof value !== 'string' && typeof value !== 'number') {
		throw new Error(error_prefix + '"value" is of an unrecognised type');
	}

	if (typeof options !== 'undefined') {
		// validate against options
		if (Array.isArray(options) && options.indexOf(value) === -1 || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && !Array.isArray(options) && !options[value]) {
			throw new Error(error_prefix + '"value" attribute contains an option that doesn’t exist');
		}
	}
};

FormField.validTypes = ['text', 'longtext', 'dropdown', 'checkbox', 'radio'];

exports.default = FormField;

/***/ }),

/***/ 40:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.GLYPHS = undefined;
exports.Icon = Icon;

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var GLYPHS = exports.GLYPHS = {
	TEXT: __webpack_require__(286),
	PUZZLE_PIECE: __webpack_require__(284),
	TAG: __webpack_require__(285)
};

function Icon(props) {
	return _react2.default.createElement(
		'svg',
		{ className: 'icon', width: props.width, height: props.height },
		_react2.default.createElement('use', { xlinkHref: props.glyph })
	);
}

Icon.defaultProps = {
	width: 16,
	height: 16
};

Icon.propTypes = {
	width: _react.PropTypes.number,
	height: _react.PropTypes.number,
	glyph: _react.PropTypes.string
};

/***/ }),

/***/ 41:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
var localStorage = window.localStorage,
    JSON = JSON || window.JSON;

/**
 * from https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API
 */
var checkStorage = function checkStorage(type) {
	try {
		var storage = window[type],
		    x = '__tag_storage_test__';
		storage.setItem(x, x);
		storage.removeItem(x);
		return true;
	} catch (e) {
		return false;
	}
};

var Communicator = function Communicator(id, origin) {
	var callbacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	if (!checkStorage('localStorage')) {
		return false;
	}

	if (typeof id !== 'string') {
		throw new Error('Please choose a string-based ID for the guest.');
	}

	if (typeof origin !== 'string') {
		throw new Error('Please choose a string-based origin address.');
	}

	this._settings = {
		name: 'tag-comm-data'
	};

	this._guests = {};
	this._queue = {};
	this.id = id;

	this._origin = origin;
	this._callbacks = Object.assign({
		message: null
	}, callbacks);

	window.addEventListener('message', this._receiveMessage.bind(this), false);

	this._sendPing();
};

Communicator.prototype = {
	/**
  * Attempt to ping source window
  */
	_sendPing: function _sendPing(node) {
		var ping = this._createMessage(null, {
			ping: this.id
		});

		if (!node) {
			if (window.opener) {
				node = window.opener;
			} else if (window.top !== window) {
				node = window.top;
			}
		}

		if (node) {
			// console.log(this.id + ' >> ping!');
			this._post(node, ping);
		}
	},

	_sendPong: function _sendPong(node) {
		var pong = this._createMessage(null, {
			pong: this.id
		});

		// console.log('pong! << ' + this.id);
		this._post(node, pong);
	},

	/**
  * Registers a single guest for communication purposes.
  * @param {string} id - Guest ID. Used when sending messages.
  * @param {mixed} dest - Destination node.
  */
	registerGuestAddress: function registerGuestAddress(id, dest) {
		if (typeof dest === 'undefined') {
			throw new Error('Cannot register address for ' + id + '. ' + 'A guest address DOM node, window or frame must be defined.');
		}

		if (!('postMessage' in dest)) {
			throw new Error('Communicator cannot send messages to destination. Please choose an HTMLElement ' + 'that supports the postMessage method');
		}

		if (typeof id !== 'string') {
			throw new Error('Please choose a string-based ID for the guest.');
		}

		// register local address for guest
		this._setGuestData(id, {
			id: id,
			node: dest
		});

		// start timer
		if (this.timer) {
			window.clearInterval(this.timer);
		}
	},

	/**
  * Sets or replaces the guest data.
  * @param {string} id - Guest ID.
  * @param {object} data - Guest data.
  * @private
  */
	_setGuestData: function _setGuestData(id, data) {
		if (!this._guests[id]) {
			this._guests[id] = {
				live: false,
				node: null
			};
		}

		Object.assign(this._guests[id], data);
	},

	/**
  * Sends a message to the defined guest.
  * @param {string} to - Guest ID, as stored.
  * @param {mixed} message - Any JS compatible data to send as a message.
  */
	send: function send(to, message) {
		var guest = this._getGuestById(to);

		if (guest && guest.live) {
			// post message immediately
			this._post(to, this._createMessage(message));
		} else {
			// queue message for posting
			this._addToQueue(to, message);
		}
	},

	/**
  * Adds a message to the local 'outbox' for the guest (by ID).
  */
	_addToQueue: function _addToQueue(to, message) {
		if (!this._queue[to]) {
			this._queue[to] = [];
		}

		this._queue[to].push(message);
	},

	_sendQueue: function _sendQueue(to) {
		var a;

		if (this._queue[to] && this._guests[to]) {
			// send messages in the order they were queued
			for (a = 0; a < this._queue[to].length; a += 1) {
				this._post(this._guests[to].node, this._createMessage(this._queue[to][a]));
			}

			// clear queue for this recipient
			this._queue[to] = [];
		}
	},

	/**
  * Gets a communicator guest by its ID, or returns `null`.
  * @returns {mixed} Guest data, or `null`.
  * @private
  */
	_getGuestById: function _getGuestById(id) {
		return this._guests[id] || null;
	},

	/**
  * Get a guest by known node (i.e. that registered in `this._guests`)
  * @private
  */
	_getGuestByNode: function _getGuestByNode(node) {
		var id;

		// console.group('_getGuestByNode');
		// console.log('finding', node);

		for (id in this._guests) {
			// console.log(id, this._guests[id], (this._guests[id].node === node));
			if (this._guests.hasOwnProperty(id) && this._guests[id].node === node) {
				// console.log('node found!', id);
				return this._getGuestById(id);
			}
		}
		// console.groupEnd();

		return null;
	},

	/**
  * Actually posts the message to the destination.
  * @param {string} to - Guest ID.
  * @param {mixed} message - Any JS compatible data to send as a message.
  * @private
  */
	_post: function _post(to, message) {
		var guest, node;

		if (typeof to === 'string') {
			guest = this._getGuestById(to);

			if (!guest.node) {
				throw new Error('Cannot communicate with guest "' + to + '". Has its Node address been registered?');
			}

			node = guest.node;
		} else {
			node = to;
		}

		node.postMessage(message, this._origin);
	},

	/**
  * Invoked when a live message is received.
  * @private
  */
	_receiveMessage: function _receiveMessage(event) {
		var origin = event.origin || event.originalEvent.origin,
		    source = event.source || event.originalEvent.source,
		    message = event.data,
		    guest;

		// console.group('_receiveMessage');
		// console.log('to "' + this.id + '":', event.data);
		if (origin !== location.origin) return;

		if ((message.ping || message.pong) && this._getGuestByNode(source)) {
			// received a ping/pong from valid source
			guest = message.ping || message.pong;
			// console.log(this.id, 'setting guest "', guest, '" live');
			this._setGuestLive(guest);
			this._sendQueue(guest);

			if (message.ping) {
				// pong back a ping (don't pong a pong or we'll be here forever)
				this._sendPong(source);
			}
		}

		if (this._callbacks.message && message.originalMessage) {
			this._callbacks.message(message.originalMessage);
		}

		// console.groupEnd();
	},

	_setGuestLive: function _setGuestLive(id) {
		this._setGuestData(id, {
			live: true
		});
	},

	_createMessage: function _createMessage(message, data) {
		return Object.assign({}, data, {
			host: this.id,
			originalMessage: message
		});
	}
};

exports.default = Communicator;

/***/ }),

/***/ 42:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _Droplet = __webpack_require__(23);

var _Droplet2 = _interopRequireDefault(_Droplet);

var _constants = __webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DropZone,
    drop_zone_id = 0;

/**
 * @class
 */
DropZone = function DropZone() {
	var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	var tag = arguments[1];

	this.tag = tag;
	this.id = 'drop_zone_' + ++drop_zone_id;
	this.attachmentId = data.attachmentId;
	this.maxAttachments = typeof data.maxAttachments !== 'undefined' ? data.maxAttachments : 1;
};

DropZone.prototype = {
	/**
  * Test if the DropZone instance will accept a new droplet. The test looks at the
  * maximum number of attachments and attachment eligibility based on attachmentId
  */
	willAccept: function willAccept(droplet, store) {
		var current_attachments = 0,
		    state;

		if (!(droplet instanceof _Droplet2.default)) {
			throw new Error(_constants.errorCodes.NOT_A_DROPLET);
		}

		if (store) {
			// store exists - get state (and current number of attachments)
			state = store.getState();

			if (state.zones[this.id] && state.zones[this.id].attachments) {
				current_attachments = state.zones[this.id].attachments.length;
			}
		}

		// test attachment count
		if (this.maxAttachments !== 0 && current_attachments === this.maxAttachments) {
			return false;
		}

		// test attachmentId eligibility
		if (this.attachmentId !== '*' && droplet.attachmentIds.indexOf(this.attachmentId) === -1) {
			return false;
		}

		return true;
	}
};

/**
 * Matches a drop zone within the supplied markup.
 * Can be used more than once on the same markup, and will internally increment through the data.
 */
DropZone.fetchZone = function (markup) {
	var match, zone;

	// keep looking for a valid drop zone - report on the bad ones
	while ((match = DropZone._re_zones.exec(markup)) !== null) {
		if (match !== null && (zone = DropZone.checkSyntax(match[0]))) {
			// return it
			return new DropZone({
				attachmentId: zone.attachmentId,
				maxAttachments: zone.maxAttachments
			}, match[0]);
		}
	}

	return null;
};

/**
 * Checks and reports on syntax errors within a supplied tag.
 */
DropZone.checkSyntax = function (tag) {
	var d;

	if ((d = tag.match(DropZone.syntax_re.re_structure)) !== null && d[1] !== null) {
		// check id portion
		if (!d[2] || !DropZone.syntax_re.re_id.test(d[2])) {
			return DropZone.snytaxFault(d[1], 'Invalid syntax. ID must either start with a letter and only contain' + ' letters, numbers, and the undescore (_) character, or be an asterisk (*) ' + 'to specify any attachment ID.', d[2]);
		}

		// check quantity portion
		if (d[4] && (!DropZone.syntax_re.re_qty.test(d[4]) || d[4] < 1 || d[4] > 100)) {
			return DropZone.snytaxFault(d[1], 'Invalid syntax. Quantity must be a valid number and between 1 and 100, ' + 'or the asterisk (*) character to specify unlimited up to the internal maximum.', d[4]);
		}
	} else {
		return DropZone.snytaxFault(tag, 'Invalid syntax.');
	}

	return {
		attachmentId: d[2],
		maxAttachments: d[4] === '*' ? 0 : parseFloat(d[4]) || 1
	};
};

DropZone.snytaxFault = function (str, message, char) {
	var error;

	if (char) {
		// escape % symbols
		str = str.replace('%', '%%');
		char = char.replace('%', '%%');

		// add colouring
		str = str.replace(char, '%c$&%c');

		error = 'Error with syntax in tag "' + str + '": ' + message;
		console.warn(error, 'color: red;', 'color: inherit;');
	} else {
		// basic error with no colouring
		error = 'Error with syntax in tag "' + str + '": ' + message;
		console.warn(error);
	}

	return false;
};

/**
 * Discriminating regex collection for testing drop zones with explicit syntax.
 */
DropZone.syntax_re = {
	re_structure: /^\{\{\s?(([^|\s]+)(\|([^|\s]*))?)\s?\}\}$/,
	re_id: /^[a-z*][a-z0-9_]*$/i,
	re_qty: /^[0-9*]+$/
};

/**
 * Inclusive regex for capturing individual zones with basic syntax
 */
DropZone._re_zones = /\{\{\s?(.+?)(\|(.*?))?\s?\}\}/gi;

exports.default = DropZone;

/***/ }),

/***/ 43:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _constants = __webpack_require__(9);

exports.default = {
	setUIState: function setUIState(ui_state) {
		return {
			type: _constants.actionTypes.UI_STATE,
			ui_state: ui_state
		};
	},

	setActiveDroplet: function setActiveDroplet(droplet_id) {
		return {
			type: _constants.actionTypes.SET_ACTIVE_DROPLET,
			droplet_id: droplet_id
		};
	},

	setDialogMode: function setDialogMode(mode) {
		var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		return {
			type: _constants.actionTypes.SET_DIALOG_MODE,
			mode: mode,
			state: state
		};
	},

	zoneAddAttachment: function zoneAddAttachment(id, droplet_id, attached, data) {
		return {
			type: _constants.actionTypes.ZONE_ADD_ATTACHMENT,
			id: id,
			droplet_id: droplet_id,
			attached: attached,
			data: data
		};
	},

	zoneEditAttachment: function zoneEditAttachment(id, attachment_index, data) {
		return {
			type: _constants.actionTypes.ZONE_EDIT_ATTACHMENT,
			id: id,
			attachment_index: attachment_index,
			data: data
		};
	},

	zoneDetachAttachment: function zoneDetachAttachment(id, attachment_index) {
		return {
			type: _constants.actionTypes.ZONE_DETACH_ATTACHMENT,
			id: id,
			attachment_index: attachment_index
		};
	}
};

/***/ }),

/***/ 68:
/***/ (function(module, exports, __webpack_require__) {

var Sprite = __webpack_require__(287);
var globalSprite = new Sprite();

if (document.body) {
  globalSprite.elem = globalSprite.render(document.body);
} else {
  document.addEventListener('DOMContentLoaded', function () {
    globalSprite.elem = globalSprite.render(document.body);
  }, false);
}

module.exports = globalSprite;


/***/ }),

/***/ 75:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.field = undefined;

var _react = __webpack_require__(3);

var _FormField = __webpack_require__(32);

var _FormField2 = _interopRequireDefault(_FormField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var field = exports.field = {
	field: _react.PropTypes.instanceOf(_FormField2.default).isRequired,
	value: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number, _react.PropTypes.arrayOf(_react.PropTypes.string)]).isRequired,
	onChange: _react.PropTypes.func
};

/***/ }),

/***/ 76:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _ajax = __webpack_require__(77);

var _ajax2 = _interopRequireDefault(_ajax);

var _DropZone = __webpack_require__(42);

var _DropZone2 = _interopRequireDefault(_DropZone);

var _Droplet = __webpack_require__(23);

var _Droplet2 = _interopRequireDefault(_Droplet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Template = function Template(parent) {
	var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	this._parent = parent;
	this.settings = settings;
	this._drop_zones = {};
	this._template = [];
	this._max_zones = 100;
};

Template.prototype = {
	load: function load(url) {
		var _this = this;

		return _ajax2.default.get(url).then(function (response) {
			if (response.text) {
				_this._markup = response.text;
			}
		}).catch(function (error) {
			throw new Error(error);
		});
	},

	create: function create() {
		var markup = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._markup;

		if (typeof markup === 'undefined') {
			throw new Error('Cannot call create() with no markup defined.');
		}

		// replace html with entities
		markup = Template.entities(markup);

		return this._createDropZones(markup);
	},

	_createDropZones: function _createDropZones(markup) {
		var zone,
		    counter = 0;

		// loop through markup finding drop zones
		while ((zone = _DropZone2.default.fetchZone(markup)) !== null) {
			this._drop_zones[zone.id] = zone;
			counter += 1;

			if (counter === this._max_zones) {
				throw new Error('Maximum number of zones in template reached (' + this._max_zones + ').');
			}
		}

		// loop through collected drop zones and replace tags in markup
		for (zone in this._drop_zones) {
			markup = markup.replace(this._drop_zones[zone].tag, '<span' + ' data-id="' + this._drop_zones[zone].id + '"' + ' data-attachment="' + this._drop_zones[zone].attachmentId + '">' + '</span>');
		}

		this._template = this._createTemplateArray(markup);

		return {
			drop_zones: this._drop_zones,
			template: this._template
		};
	},

	_createTemplateArray: function _createTemplateArray(markup) {
		var _this2 = this;

		var sandbox = document.createElement('div'),
		    data = [];
		sandbox.innerHTML = markup;

		sandbox.childNodes.forEach(function (node) {
			switch (node.nodeType) {
				case Node.TEXT_NODE:
					data.push({
						type: 'text',
						content: node.textContent
					});
					break;

				case Node.ELEMENT_NODE:
					data.push({
						type: 'dropzone',
						zone: _this2._drop_zones[node.dataset.id]
					});
					break;
			}
		});

		return data;
	},

	renderAsHTML: function renderAsHTML(zones) {
		var _this3 = this;

		var html = '';

		this._template.forEach(function (node) {
			if (node.type === 'text') {
				// plain text node
				html += node.content;
			} else if (node.type === 'dropzone' && zones[node.zone.id]) {
				// drop zone with attachments
				zones[node.zone.id].attachments.forEach(function (attachment) {
					var droplet = _this3._parent._UI.getDropletById(attachment.droplet_id),
					    data = Object.deepAssign({}, droplet.data, attachment.data);

					html += Template.renderDroplet(droplet, data, _this3._parent._UI.getDropZoneById(node.zone.id), _this3.settings.onElementRender);
				});
			}
		});

		return html;
	}
};

Template.renderDroplet = function (droplet, data, drop_zone) {
	var is_output = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

	var output;

	if (!(droplet instanceof _Droplet2.default)) {
		throw new Error('droplet argument must be a Droplet instance');
	}

	switch (droplet.dropletType) {
		case 'element':
			output = Template.renderElementDroplet(data, droplet, drop_zone, is_output);
			break;

		case 'text':
			output = Template.renderTextDroplet(data, droplet, drop_zone, is_output);
			break;

		case 'attribute':
			output = Template.renderAttributeDroplet(data, droplet, drop_zone, is_output);
			break;
	}

	return output;
};

Template.renderElementDroplet = function (data, droplet, drop_zone, is_output) {
	// !TODO - make sure self-closing tags are correctly rendered
	var attrs = [],
	    markup = {},
	    attr;

	markup.open = '<' + data.tagName;

	if (data.attrs) {
		for (attr in data.attrs) {
			attrs.push(attr += '="' + Template.entities(data.attrs[attr]) + '"');
		}

		if (attrs.length) {
			markup.open += ' ' + attrs.join(' ');
		}
	}

	if (data.innerHTML || Template.containerTags.indexOf(data.tagName) !== -1) {
		markup.open += '>';
		markup.innerHTML = data.innerHTML || '';
		markup.close = '</' + data.tagName + '>';
	} else {
		markup.close = '/>';
	}

	markup = Template.onElementRender(markup, droplet, drop_zone, is_output);

	return markup.open + markup.innerHTML + markup.close;
};

Template.renderTextDroplet = function (data, droplet, drop_zone, is_output) {
	var value = Template.onElementRender(data.value, droplet, drop_zone, is_output);

	return Template.entities(value);
};

Template.renderAttributeDroplet = function (data, droplet, drop_zone, is_output) {
	var markup = {
		key: data.key,
		value: data.value
	};

	markup = Template.onElementRender(markup, droplet, drop_zone, is_output);

	return markup.key + '="' + Template.entities(markup.value) + '"';
};

Template.entities = function (str) {
	return str.replace(/[\u00A0-\u9999<>\&]/gim, function (i) {
		return '&#' + i.charCodeAt(0) + ';';
	});
};

Template.onElementRender = function (markup, droplet, zone, is_output) {
	return markup;
};

Template.containerTags = ['a'];

exports.default = Template;

/***/ }),

/***/ 77:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = __webpack_require__(70);

var _promise2 = _interopRequireDefault(_promise);

var _superagent = __webpack_require__(73);

var _superagent2 = _interopRequireDefault(_superagent);

var _superagentPromise = __webpack_require__(72);

var _superagentPromise2 = _interopRequireDefault(_superagentPromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _superagentPromise2.default)(_superagent2.default, _promise2.default);

/***/ }),

/***/ 9:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
var actionTypes = exports.actionTypes = {
	UI_STATE: 'ui-state',
	ZONE_ADD_ATTACHMENT: 'zone-add-attachment',
	ZONE_EDIT_ATTACHMENT: 'zone-edit-attachment',
	ZONE_DETACH_ATTACHMENT: 'zone-detach-attachment',
	SET_DIALOG_MODE: 'set-dialog-mode',
	SET_ACTIVE_DROPLET: 'set-active-droplet'
};

var dialogModes = exports.dialogModes = {
	NONE: 'none',
	EDIT_DROPLET: 'edit-droplet'
};

var uiStates = exports.uiStates = {
	INITIALISING: 'initialising',
	ACTIVE: 'active'
};

var messageCommands = exports.messageCommands = {
	RELOAD: 'reload'
};

var errorCodes = exports.errorCodes = {
	NOT_A_DROPLET: 'A valid Droplet instance must be passed to DropZone#willAccept.'
};

var setLabels = exports.setLabels = {
	value: 'Value',
	attrs: 'Attributes',
	tagName: 'Tag name',
	innerHTML: 'HTML content'
};

/***/ })

},[292]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,