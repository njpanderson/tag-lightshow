webpackJsonp([0],[
/* 0 */,
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
/**
 * @module assets/constants
 */

/**
 * Action types
 * @private
 */
var actionTypes = exports.actionTypes = {
	UI_STATE: 'ui-state',
	ZONE_ADD_ATTACHMENT: 'zone-add-attachment',
	ZONE_EDIT_ATTACHMENT: 'zone-edit-attachment',
	ZONE_DETACH_ATTACHMENT: 'zone-detach-attachment',
	ZONE_CLEAR_ALL_ATTACHMENTS: 'zone-clear-all-attachments',
	SET_DIALOG_MODE: 'set-dialog-mode',
	SET_ACTIVE_DROPLET: 'set-active-droplet',
	SET_TOUR_STAGE: 'set-tour-stage',
	SHOW_TOOLTIP: 'show-tooltip',
	HIDE_TOOLTIP: 'hide-tooltip',
	SET_TOOLTIP_CONTENT: 'set-tooltip-content',
	COMPLETE_FIRST_DROP: 'complete-first-drop',
	COMPLETE_LAST_DROP: 'complete-last-drop',
	RESET_APP: 'reset-app'
};

/**
 * Dialog modes
 */
var dialogModes = exports.dialogModes = {
	NONE: 'none',
	GENERAL: 'general',
	EDIT_DROPLET: 'edit-droplet',
	TOUR: 'tour'
};

var uiStates = exports.uiStates = {
	INITIALISING: 'initialising',
	ACTIVE: 'active'
};

var messageCommands = exports.messageCommands = {
	RELOAD: 'reload',
	RESET: 'reset',
	DIALOG: 'dialog',
	DIALOG_CALLBACK: 'dialog-callback'
};

var errorCodes = exports.errorCodes = {
	NOT_A_DROPLET: 'A valid Droplet instance must be passed to DropZone#willAccept.'
};

var setLabels = exports.setLabels = {
	value: 'Value',
	attrs: 'Attributes',
	tagName: 'Tag name',
	innerHTML: 'HTML content'
};

/***/ }),
/* 9 */,
/* 10 */,
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var registerGeneralEvent = exports.registerGeneralEvent = function registerGeneralEvent(component, id, info) {
	var args = arguments;

	return function (event) {
		event.preventDefault();
		if (typeof component.props.onEvent === 'function') {
			component.props.onEvent.apply(component, [event, info, id].concat(Array.prototype.slice.call(args, 3)));
		}
	}.bind(this);
};

var collectRef = exports.collectRef = function collectRef(props, collection, key) {
	return function (ref) {
		if (typeof props.refCollector === 'function') {
			props.refCollector(collection, ref, key);
		} else {
			throw new Error('ref collection used but no collector has been set up for ' + collection + (key ? '/' + key : ''));
		}
	};
};

/**
 * Returns a function for validating specific keys within an object property.
 */
var validatePropKeys = exports.validatePropKeys = function validatePropKeys(require) {
	return function (props, key, component) {
		var a;

		for (a = 0; a < require.length; a += 1) {
			if (!props[key].hasOwnProperty(require[a]) && props[key][require[a]] !== undefined) {
				return new Error('Prop	`' + key + '` does not contain definition `' + require[a] + '` in ' + component + ' component.');
			}
		}
	};
};

/**
 * Escapes a string for use as a match within a regex
 * @see http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex/6969486#6969486
 */
var escapeRegExp = exports.escapeRegExp = function escapeRegExp(str) {
	return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\$&');
};

var rawMarkup = exports.rawMarkup = function rawMarkup(html) {
	return { __html: html };
};

/**
 * from https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API.
 * Checks if localStorage works.
 * (localStorage can be disabled using security policies or private browsing modes)
 */
var checkStorage = exports.checkStorage = function checkStorage(type) {
	try {
		var storage = window[type],
		    x = '__tag_storage_test__';
		storage.setItem(x, x);
		storage.removeItem(x);
		return true;
	} catch (e) {
		return false;
	}
};

/**
 * @description
 * Provides loose comparison of the keys of two objects.
 * If the value of a key is an array, the test object's key is also confirmed to be the same type.
 * If the alue of a key is an object, it is tested recursively.
 * @param {object} test - Test object
 * @param {object} expected - Expected result
 */
var structCompare = exports.structCompare = function structCompare(test, expected) {
	var result = true,
	    key;

	if ((typeof test === 'undefined' ? 'undefined' : _typeof(test)) !== 'object' || (typeof expected === 'undefined' ? 'undefined' : _typeof(expected)) !== 'object') {
		return false;
	}

	for (key in expected) {
		if (expected.hasOwnProperty(key)) {
			if (_typeof(expected[key]) === 'object') {
				if (Array.isArray(expected[key])) {
					// expected value is an array
					if (!Array.isArray(test[key])) {
						result = false;
					}
				} else {
					// expect value is an object
					if (key in test) {
						// key exists in test
						result = structCompare(test[key], expected[key]);
					} else {
						result = false;
					}
				}
			} else {
				// value is (probably) scalar
				if (!(key in test)) {
					result = false;
				}
			}
		}

		// if the result is false at any point, just break here
		if (result === false) {
			break;
		}
	}

	return result;
};

/***/ }),
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.GLYPHS = undefined;
exports.Icon = Icon;

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Icon glyphs available for use.
 * @property {string} TEXT
 * @property {string} PUZZLE_PIECE
 * @property {string} TAG
 * @property {string} COMPASS
 * @property {string} LOOP_CIRCULAR
 * @property {string} MEDIA_PLAY
 * @property {string} LIGHTBULB
 * @property {string} RESIZE_WIDTH
 */
var GLYPHS = exports.GLYPHS = {
	TEXT: __webpack_require__(307),
	PUZZLE_PIECE: __webpack_require__(304),
	TAG: __webpack_require__(306),
	COMPASS: __webpack_require__(300),
	LOOP_CIRCULAR: __webpack_require__(302),
	MEDIA_PLAY: __webpack_require__(303),
	LIGHTBULB: __webpack_require__(301),
	RESIZE_WIDTH: __webpack_require__(305)
}; /**
    * @module components/views/Icon
    */
function Icon(props) {
	var className = props.glyph.replace(/^#/, '');

	return _react2.default.createElement(
		'svg',
		{ className: 'icon', width: props.width, height: props.height },
		_react2.default.createElement('use', { xlinkHref: props.glyph, className: className })
	);
}

Icon.defaultProps = {
	width: 16,
	height: 16
};

Icon.propTypes = {
	width: _react.PropTypes.number,
	height: _react.PropTypes.number,
	glyph: _react.PropTypes.string
};

/***/ }),
/* 17 */,
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var Sprite = __webpack_require__(308);
var globalSprite = new Sprite();

if (document.body) {
  globalSprite.elem = globalSprite.render(document.body);
} else {
  document.addEventListener('DOMContentLoaded', function () {
    globalSprite.elem = globalSprite.render(document.body);
  }, false);
}

module.exports = globalSprite;


/***/ }),
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _Droplet = __webpack_require__(27);

var _Droplet2 = _interopRequireDefault(_Droplet);

var _constants = __webpack_require__(8);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DropZone,
    drop_zone_id = 0;

/**
 * @class
 */
DropZone = function DropZone() {
	var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	var tag = arguments[1];

	this.tag = tag;
	this.id = 'drop_zone_' + ++drop_zone_id;
	this.attachmentId = data.attachmentId;
	this.maxAttachments = typeof data.maxAttachments !== 'undefined' ? data.maxAttachments : 1;
};

DropZone.prototype = {
	/**
  * Test if the DropZone instance will accept a new droplet. The test looks at the
  * maximum number of attachments and attachment eligibility based on attachmentId
  */
	willAccept: function willAccept(droplet, store) {
		var current_attachments = 0,
		    state;

		if (!(droplet instanceof _Droplet2.default)) {
			throw new Error(_constants.errorCodes.NOT_A_DROPLET);
		}

		if (store) {
			// store exists - get state (and current number of attachments)
			state = store.getState();

			if (state.zones[this.id] && state.zones[this.id].attachments) {
				current_attachments = state.zones[this.id].attachments.length;
			}
		}

		// test attachment count
		if (this.maxAttachments !== 0 && current_attachments === this.maxAttachments) {
			return false;
		}

		// test attachmentId eligibility
		if (this.attachmentId !== '*' && droplet.attachmentIds.indexOf(this.attachmentId) === -1) {
			return false;
		}

		return true;
	}
};

/**
 * Matches a drop zone within the supplied markup.
 * Can be used more than once on the same markup, and will internally increment through the data.
 */
DropZone.fetchZone = function (markup) {
	var match, zone;

	// keep looking for a valid drop zone - report on the bad ones
	while ((match = DropZone._re_zones.exec(markup)) !== null) {
		if (match !== null && (zone = DropZone.checkSyntax(match[0]))) {
			// return it
			return new DropZone({
				attachmentId: zone.attachmentId,
				maxAttachments: zone.maxAttachments
			}, match[0]);
		}
	}

	return null;
};

/**
 * Checks and reports on syntax errors within a supplied tag.
 */
DropZone.checkSyntax = function (tag) {
	var d;

	if ((d = tag.match(DropZone.syntax_re.re_structure)) !== null && d[1] !== null) {
		// check id portion
		if (!d[2] || !DropZone.syntax_re.re_id.test(d[2])) {
			return DropZone.snytaxFault(d[1], 'Invalid syntax. ID must either start with a letter and only contain' + ' letters, numbers, and the undescore (_) character, or be an asterisk (*) ' + 'to specify any attachment ID.', d[2]);
		}

		// check quantity portion
		if (d[4] && (!DropZone.syntax_re.re_qty.test(d[4]) || d[4] < 1 || d[4] > 100)) {
			return DropZone.snytaxFault(d[1], 'Invalid syntax. Quantity must be a valid number and between 1 and 100, ' + 'or the asterisk (*) character to specify unlimited up to the internal maximum.', d[4]);
		}
	} else {
		return DropZone.snytaxFault(tag, 'Invalid syntax.');
	}

	return {
		attachmentId: d[2],
		maxAttachments: d[4] === '*' ? 0 : parseFloat(d[4]) || 1
	};
};

DropZone.snytaxFault = function (str, message, char) {
	var error;

	if (char) {
		// escape % symbols
		str = str.replace('%', '%%');
		char = char.replace('%', '%%');

		// add colouring
		str = str.replace(char, '%c$&%c');

		error = 'Error with syntax in tag "' + str + '": ' + message;
		console.warn(error, 'color: red;', 'color: inherit;');
	} else {
		// basic error with no colouring
		error = 'Error with syntax in tag "' + str + '": ' + message;
		console.warn(error);
	}

	return false;
};

/**
 * Discriminating regex collection for testing drop zones with explicit syntax.
 */
DropZone.syntax_re = {
	re_structure: /^\{\{\s?(([^|\s]+)(\|([^|\s]*))?)\s?\}\}$/,
	re_id: /^[a-z*][a-z0-9_]*$/i,
	re_qty: /^[0-9*]+$/
};

/**
 * Inclusive regex for capturing individual zones with basic syntax
 */
DropZone._re_zones = /\{\{\s?(.+?)(\|(.*?))?\s?\}\}/gi;

exports.default = DropZone;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A single `editable` defiition to produce one field.
 * @typedef EditableItemDefinition
 * @property {string} type - One of 'text', 'longtext', 'dropdown', 'checkbox', or 'radio'.
 * @property {bool} [required] - Whether the field must be filled in or not.
 * @property {mixed} [value] - Either an array of values, or a single string value.
 * @property {string} [placeholder] - In the case of a text value, this will show in place of empty values.
 * @property {string} [selected] - In the case of an array value, this set the value as 'selected'.
 */

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _PropTypes = __webpack_require__(153);

var _PropTypes2 = _interopRequireDefault(_PropTypes);

var _FormField = __webpack_require__(35);

var _FormField2 = _interopRequireDefault(_FormField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Droplet,
    droplet_id = 0;

/**
 * Individual droplet class. Handles validation of props in a similar fashion to
 * React, but (probably) with a lot less style.
 * @class
 */
Droplet = function Droplet() {
	var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	var id = arguments[1];

	if (typeof id === 'number') {
		this.id = 'droplet_' + id;
	} else {
		this.id = 'droplet_' + ++droplet_id;
	}

	this._originalSettings = Object.deepAssign({}, settings);
	this.data = {};
	this.name = null;
	this.dropletType = null;
	this.attachmentIds = [];

	this.init();
};

Droplet.prototype = {
	/**
  * Initialisation.
  * @private
  */
	init: function init() {
		// set base properties for all droplets
		this._validateAndSet(['name', 'dropletType', 'attachmentIds', 'editable', 'guidance'], this);

		// check droplet type is valid
		switch (this.dropletType) {
			case 'element':
			case 'text':
			case 'attribute':
				this._setExtraFields();
				break;

			default:
				throw new Error('Droplet type ' + this.dropletType + ' is invalid.');
		}
	},

	/**
  * Registers type specific fields for validation.
  * @private
  */
	_setExtraFields: function _setExtraFields() {
		switch (this.dropletType) {
			case 'text':
				this._validateAndSet(['value'], this.data);
				break;

			case 'element':
				this._validateAndSet(['attrs', 'tagName', 'innerHTML'], this.data);
				break;

			case 'attribute':
				this._validateAndSet(['key', 'value'], this.data);
				break;
		}
	},

	/**
  * Validates (using the PropType functions) and sets the instance values
  * given the defined properties.
  */
	_validateAndSet: function _validateAndSet(values, context) {
		var _this = this;

		values.forEach(function (value) {
			if (Droplet.PropTypes.hasOwnProperty(value)) {
				if (Droplet.PropTypes[value](_this._originalSettings[value], value, _this._originalSettings.name || null, _this._originalSettings.dropletType || null)) {
					context[value] = _this._originalSettings[value];
				}
			} else {
				throw new Error('Droplet property "' + value + '" definition does not exist.');
			}
		});
	}
};

/**
 * Designed as a PropType validator much like string, isRequired, arrayOf etc, this
 * function specifically tests the validity of the `editable` prop and its children.
 */
Droplet._validateEditableSet = function (value, prop, droplet_name, droplet_type) {
	var attribute,
	    key,
	    attrkey,
	    prop_error = 'Error in Droplet prop ' + droplet_name + ' (' + prop + '):';

	// allow undefined values
	if (typeof value === 'undefined') {
		return true;
	}

	// testing the droplet value
	if (_PropTypes2.default._assert((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object', prop, 'Value must be an object.', droplet_name, droplet_type)) {
		// continue testing
		for (key in value) {
			// testing individual attributes
			attribute = value[key];

			// attribute is unrecognised or not an object
			if (Droplet.editableAttributes.indexOf(key) === -1 || (typeof attribute === 'undefined' ? 'undefined' : _typeof(attribute)) !== 'object') {
				throw new Error(prop_error + ' "' + key + '" is not an editable attribute or is of the wrong type');
			}

			// attribute is 'attrs', but is not an object of objects
			if (key === 'attrs') {
				for (attrkey in attribute) {
					Droplet._validateEditableItem(attrkey, attribute[attrkey], prop_error);
				}
			} else {
				Droplet._validateEditableItem(key, attribute, prop_error);
			}
		}
	}

	return true;
};

Droplet._validateEditableItem = function (item, data, error_prefix) {
	var error = error_prefix + item + ' - ';

	if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') {
		throw new Error(error + 'not an EditableItemDefinition object');
	}

	// check "type" exists
	if (typeof data.type === 'undefined') {
		throw new Error(error + 'doesn’t contain ‘type’ value');
	}

	// check "type" is valid
	if (Droplet.editableFieldTypes.indexOf(data.type) === -1) {
		throw new Error(error + 'invalid type attribute "' + data.type + '"');
	}

	// run checks on the editable attributes that match FormField data attributes
	_FormField2.default.validateDataAttribute(data, item, error_prefix);

	return true;
};

/**
 * Defines the possible prop types for Droplets. Some are always required.
 * @prop {string} value - Droplet 'value'. When used as an `attribute` type value, can be
 * set to `null` to define a value-less attribute.
 * @prop {string} name - Droplet name (used as a label).
 * @prop {string[]} attachmentIds - Drop zone attachment IDs.
 * @prop {string} dropletType - Droplet type. One of `element`, `text` or `attribute`.
 * @prop {object} [attrs] - Droplet attributes, in the case of the `element` type.
 * @prop {string} tagname - Droplet tagName attribute, i.e. the actual HTMLElement used.
 * Requred when type is `element`.
 * @prop {string} innerHTML - Droplet's innerHTML.
 * @prop {EditableItemDefinition} editable - Editable properties of `element` types. [add link to tutorial!].
 * @prop {string} key - Attribute keys (names) of `attribute` types.
 */
Droplet.PropTypes = {
	value: _PropTypes2.default.string.isRequired,
	name: _PropTypes2.default.string.notEmpty.isRequired,
	attachmentIds: _PropTypes2.default.arrayOf.string.isRequired,
	dropletType: _PropTypes2.default.string.isRequired,
	attrs: _PropTypes2.default.object,
	tagName: _PropTypes2.default.string.notEmpty.isRequired,
	innerHTML: _PropTypes2.default.string,
	editable: Droplet._validateEditableSet,
	key: _PropTypes2.default.string.notEmpty.isRequired,
	guidance: _PropTypes2.default.string
};

Droplet.editableAttributes = ['value', 'attrs', 'tagName', 'innerHTML'];

Droplet.editableFieldTypes = ['text', 'longtext', 'dropdown', 'checkbox', 'radio'];

exports.default = Droplet;

/***/ }),
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.dialog = exports.field = undefined;

var _react = __webpack_require__(3);

var _FormField = __webpack_require__(35);

var _FormField2 = _interopRequireDefault(_FormField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var field = exports.field = {
	refCollector: _react.PropTypes.func,
	field: _react.PropTypes.instanceOf(_FormField2.default).isRequired,
	value: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number, _react.PropTypes.arrayOf(_react.PropTypes.string)]).isRequired,
	onChange: _react.PropTypes.func
};

var dialog = exports.dialog = {
	data: _react.PropTypes.object.isRequired,
	settings: _react.PropTypes.object.isRequired,
	refCollector: _react.PropTypes.func,
	onDialogCancel: _react.PropTypes.func,
	onDialogComplete: _react.PropTypes.func,
	onButtonClick: _react.PropTypes.func,
	lib: _react.PropTypes.object
};

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * FormField data object
 * @typedef FormFieldData
 * @property {boolean} [required]
 * @property {string} [label]
 * @property {mixed} [options]
 * @property {string} [placeholder]
 * @property {mixed} [value]
 * @example
 * var field = FormField('fieldname', 'dropdown', {
 * 	'label': 'Please select a value',
 * 	'options': ['Value 1', 'Value 2', 'Value 3'],
 * 	'value': 'Value 2'
 * });
 */

/**
* This class exists almost entirely for data consistency.
* @class
* @param {string} name - Field name.
* @param {string} type - Input type.
* @param {FormFieldData} data - Field data.
*/
var FormField = function FormField(name, type) {
	var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	this._setNameAndType(name, type);
	this._validateAndSet(data);
};

FormField.prototype = {
	_setNameAndType: function _setNameAndType(name, type) {
		if (typeof name !== 'string') {
			throw new Error('Invalid field name "' + name + '"');
		} else {
			this.name = name;
		}

		if (typeof type !== 'string' || FormField.validTypes.indexOf(type) === -1) {
			throw new Error('Invalid field type "' + type + '"');
		} else {
			this.type = type;
		}
	},

	_validateAndSet: function _validateAndSet(data) {
		var _data = Object.deepAssign({}, data);

		if (FormField.validateDataAttribute(_data, this.name, 'Error with FormField data attribute')) {
			this.data = _data;

			// externalise remaining options
			this.required = data.required;
			this.options = data.options;
			this.placeholder = data.placeholder;
			this.label = data.label;

			this.value = typeof data.value !== 'undefined' ? data.value : '';
		}
	}
};

/**
 * Ensures a form field's data attributes are valid
 */
FormField.validateDataAttribute = function (data, item, error_prefix) {
	var error = error_prefix + ' ' + item + ' - ';

	// check "required" is a boolean, if defined
	if (typeof data.required !== 'undefined' && typeof data.required !== 'boolean') {
		throw new Error(error + '"required" attribute isn’t a boolean true or false');
	}

	// check "options" is valid
	if (typeof data.options !== 'undefined') {
		FormField._validateOptionsSetting(data.options, error);
	}

	// check "placeholder" is valid
	if (typeof data.placeholder !== 'undefined' && typeof data.placeholder !== 'string') {
		throw new Error(error + '"placeholder" attribute isn’t a string');
	}

	// check "value" is valid
	if (typeof data.value !== 'undefined') {
		FormField._validateValueSetting(data.value, data.options, error);
	}

	// check "label" is valid
	if (typeof data.label !== 'undefined' && typeof data.label !== 'string') {
		throw new Error(error + '"label" attribute isn’t a string');
	}

	// check "maxlength" is valid
	if (typeof data.maxlength !== 'undefined' && (typeof data.maxlength !== 'number' || data.maxlength < 1)) {
		throw new Error(error + '"maxlength" attribute isn’t a number or above zero');
	}

	return true;
};

FormField._validateOptionsSetting = function (options, error_prefix) {
	var key,
	    a,
	    error = error_prefix + '"options" is of an unrecognised type';

	if (Array.isArray(options)) {
		for (a = 0; a < options.length; a += 1) {
			if (typeof options[a] !== 'string') {
				throw new Error(error);
			}
		}
	} else if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && options !== null) {
		for (key in options) {
			if (typeof key !== 'string' || typeof options[key] !== 'string') {
				throw new Error(error + ' - object values must be a simple key/value set');
			}
		}
	} else if (options === null) {
		throw new Error(error + ' - options cannot be null');
	}

	return true;
};

FormField._validateValueSetting = function (value, options, error_prefix) {
	if (!Array.isArray(value) && typeof value !== 'string' && typeof value !== 'number') {
		throw new Error(error_prefix + '"value" is of an unrecognised type');
	}

	if (typeof options !== 'undefined') {
		// validate against options
		if (Array.isArray(options) && options.indexOf(value) === -1 || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && !Array.isArray(options) && !options[value]) {
			throw new Error(error_prefix + '"value" attribute contains an option that doesn’t exist');
		}
	}
};

FormField.validTypes = ['text', 'longtext', 'dropdown', 'checkbox', 'radio'];

exports.default = FormField;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _ajax = __webpack_require__(81);

var _ajax2 = _interopRequireDefault(_ajax);

var _DropZone = __webpack_require__(26);

var _DropZone2 = _interopRequireDefault(_DropZone);

var _Droplet = __webpack_require__(27);

var _Droplet2 = _interopRequireDefault(_Droplet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Template = function Template(parent) {
	var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	this._parent = parent;
	this.settings = settings;
	this._drop_zones = {};
	this._template = [];
	this._max_zones = 100;
};

Template.prototype = {
	load: function load(url) {
		var _this = this;

		return _ajax2.default.get(url).then(function (response) {
			if (response.text) {
				_this._markup = response.text;
			}
		}).catch(function (error) {
			throw new Error(error);
		});
	},

	create: function create() {
		var markup = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._markup;

		if (typeof markup === 'undefined') {
			throw new Error('Cannot call create() with no markup defined.');
		}

		// replace html with entities
		markup = Template.entities(markup);

		return this._createDropZones(markup);
	},

	_createDropZones: function _createDropZones(markup) {
		var zone,
		    counter = 0;

		// loop through markup finding drop zones
		while ((zone = _DropZone2.default.fetchZone(markup)) !== null) {
			this._drop_zones[zone.id] = zone;
			counter += 1;

			if (counter === this._max_zones) {
				throw new Error('Maximum number of zones in template reached (' + this._max_zones + ').');
			}
		}

		// loop through collected drop zones and replace tags in markup
		for (zone in this._drop_zones) {
			markup = markup.replace(this._drop_zones[zone].tag, '<span' + ' data-id="' + this._drop_zones[zone].id + '"' + ' data-attachment="' + this._drop_zones[zone].attachmentId + '">' + '</span>');
		}

		this._template = this._createTemplateArray(markup);

		return {
			drop_zones: this._drop_zones,
			template: this._template
		};
	},

	_createTemplateArray: function _createTemplateArray(markup) {
		var sandbox = document.createElement('div'),
		    data = [],
		    node,
		    a;
		sandbox.innerHTML = markup;

		for (a = 0; node = sandbox.childNodes[a]; a += 1) {
			switch (node.nodeType) {
				case Node.TEXT_NODE:
					data.push({
						type: 'text',
						content: node.textContent
					});
					break;

				case Node.ELEMENT_NODE:
					data.push({
						type: 'dropzone',
						zone: this._drop_zones[node.dataset.id]
					});
					break;
			}
		}

		return data;
	},

	renderAsHTML: function renderAsHTML(zones) {
		var _this2 = this;

		var html = '';

		this._template.forEach(function (node) {
			if (node.type === 'text') {
				// plain text node
				html += node.content;
			} else if (node.type === 'dropzone' && zones[node.zone.id]) {
				// drop zone with attachments
				zones[node.zone.id].attachments.forEach(function (attachment) {
					var droplet = _this2._parent._UI.getDropletById(attachment.droplet_id),
					    data = Object.deepAssign({}, droplet.data, attachment.data);

					html += Template.renderDroplet(droplet, data, _this2._parent._UI.getDropZoneById(node.zone.id), _this2.settings.onElementRender);
				});
			}
		});

		return html;
	}
};

Template.renderDroplet = function (droplet, data, drop_zone) {
	var is_output = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

	var output;

	if (!(droplet instanceof _Droplet2.default)) {
		throw new Error('droplet argument must be a Droplet instance');
	}

	switch (droplet.dropletType) {
		case 'element':
			output = Template.renderElementDroplet(data, droplet, drop_zone, is_output);
			break;

		case 'text':
			output = Template.renderTextDroplet(data, droplet, drop_zone, is_output);
			break;

		case 'attribute':
			output = Template.renderAttributeDroplet(data, droplet, drop_zone, is_output);
			break;
	}

	return output;
};

Template.renderElementDroplet = function (data, droplet, drop_zone, is_output) {
	// TODO - make sure self-closing tags are correctly rendered
	var attrs = [],
	    markup = {},
	    attr;

	markup.open = '<' + data.tagName;

	if (data.attrs) {
		for (attr in data.attrs) {
			attrs.push(attr += '="' + Template.entities(data.attrs[attr]) + '"');
		}

		if (attrs.length) {
			markup.open += ' ' + attrs.join(' ');
		}
	}

	if (data.innerHTML || Template.voidTags.indexOf(data.tagName) === -1) {
		markup.open += '>';
		markup.innerHTML = data.innerHTML || '';
		markup.close = '</' + data.tagName + '>';
	} else {
		markup.close = '/>';
	}

	markup = Template.onElementRender(markup, droplet, drop_zone, is_output);

	return markup.open + (markup.innerHTML || '') + markup.close;
};

Template.renderTextDroplet = function (data, droplet, drop_zone, is_output) {
	var value = Template.onElementRender(data.value, droplet, drop_zone, is_output);

	return Template.entities(value);
};

Template.renderAttributeDroplet = function (data, droplet, drop_zone, is_output) {
	var markup = {
		key: data.key,
		value: data.value
	};

	markup = Template.onElementRender(markup, droplet, drop_zone, is_output);

	return markup.key + '="' + Template.entities(markup.value) + '"';
};

Template.entities = function (str) {
	return str.replace(/[\u00A0-\u9999<>\&]/gim, function (i) {
		return '&#' + i.charCodeAt(0) + ';';
	});
};

/**
 * @param {object} markup - The current markup data as set by Template#renderDroplet.
 * @param {object} droplet - The Droplet being rendered.
 * @param {object} zone - The Drop Zone the Droplet is attached to.
 * @param {bool} is_output - See below.
 * @description
 * Receives element data from Droplets as attached to Drop Zones, as well as the
 * existing markup about to be rendered. The return value should equal the `markup`
 * argument sent but can be augmented to alter rendering.
 *
 * ## The `is_output` argument.
 * Rendering can take place in two forms: Either for the template display or within as
 * tooltips as visible source code, or within the view frame as part of an outputted page.
 * The `is_output` argument will be `false` in the former case and `true` in the latter.
 */
Template.onElementRender = function () {
	return arguments[0];
};

/**
 * From https://www.w3.org/TR/html/syntax.html#writing-html-documents-elements
 * This array is a list of tag considered to be "void" and have no closing tag.
 * All other tags can (and do) have closing tags when being rendered.
 */
Template.voidTags = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];

exports.default = Template;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _constants = __webpack_require__(8);

exports.default = {
	setUIState: function setUIState(ui_state) {
		return {
			type: _constants.actionTypes.UI_STATE,
			ui_state: ui_state
		};
	},

	resetApp: function resetApp() {
		return {
			type: _constants.actionTypes.RESET_APP
		};
	},

	completeFirstDrop: function completeFirstDrop() {
		return {
			type: _constants.actionTypes.COMPLETE_FIRST_DROP
		};
	},

	completeLastDrop: function completeLastDrop() {
		return {
			type: _constants.actionTypes.COMPLETE_LAST_DROP
		};
	},

	setActiveDroplet: function setActiveDroplet(droplet_id) {
		return {
			type: _constants.actionTypes.SET_ACTIVE_DROPLET,
			droplet_id: droplet_id
		};
	},

	setDialogMode: function setDialogMode(mode) {
		var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		var onDialogComplete = arguments[2];
		var onDialogCancel = arguments[3];

		return {
			type: _constants.actionTypes.SET_DIALOG_MODE,
			mode: mode,
			data: data,
			onDialogComplete: onDialogComplete,
			onDialogCancel: onDialogCancel
		};
	},

	zoneAddAttachment: function zoneAddAttachment(id, droplet_id, attached, data) {
		return {
			type: _constants.actionTypes.ZONE_ADD_ATTACHMENT,
			id: id,
			droplet_id: droplet_id,
			attached: attached,
			data: data
		};
	},

	zoneEditAttachment: function zoneEditAttachment(id, attachment_index, data) {
		return {
			type: _constants.actionTypes.ZONE_EDIT_ATTACHMENT,
			id: id,
			attachment_index: attachment_index,
			data: data
		};
	},

	zoneDetachAttachment: function zoneDetachAttachment(id, attachment_index) {
		return {
			type: _constants.actionTypes.ZONE_DETACH_ATTACHMENT,
			id: id,
			attachment_index: attachment_index
		};
	},

	zoneClearAllAttachments: function zoneClearAllAttachments() {
		return {
			type: _constants.actionTypes.ZONE_CLEAR_ALL_ATTACHMENTS
		};
	},

	setTourStage: function setTourStage(stage) {
		return {
			type: _constants.actionTypes.SET_TOUR_STAGE,
			stage: stage
		};
	},

	showTooltip: function showTooltip(attachment) {
		var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		return {
			type: _constants.actionTypes.SHOW_TOOLTIP,
			attachment: attachment,
			options: options
		};
	},

	hideTooltip: function hideTooltip() {
		return {
			type: _constants.actionTypes.HIDE_TOOLTIP
		};
	},

	setTooltipContent: function setTooltipContent(title, content, iconGlyph) {
		return {
			type: _constants.actionTypes.SET_TOOLTIP_CONTENT,
			content: content,
			title: title,
			iconGlyph: iconGlyph
		};
	}
};

/***/ }),
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
var Communicator = function Communicator(id, origin) {
	var callbacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	if (typeof id !== 'string') {
		throw new Error('Please choose a string-based ID for the guest.');
	}

	if (typeof origin !== 'string') {
		throw new Error('Please choose a string-based origin address.');
	}

	this._settings = {
		name: 'tag-comm-data'
	};

	this._guests = {};
	this._queue = {};
	this.id = id;
	this.message_index = 0;

	this._origin = origin;
	this._callbacks = Object.assign({
		message: null
	}, callbacks);

	window.addEventListener('message', this._receiveMessage.bind(this), false);

	this._sendPing();
};

Communicator.prototype = {
	/**
  * Attempt to ping source window
  */
	_sendPing: function _sendPing(node) {
		var ping = this._createMessage(null, {
			ping: this.id
		});

		if (!node) {
			if (window.opener) {
				node = window.opener;
			} else if (window.top !== window) {
				node = window.top;
			}
		}

		if (node) {
			this._post(node, ping);
		}
	},

	_sendPong: function _sendPong(node) {
		var pong = this._createMessage(null, {
			pong: this.id
		});

		this._post(node, pong);
	},

	/**
  * Registers a single guest for communication purposes.
  * @param {string} id - Guest ID. Used when sending messages.
  * @param {mixed} dest - Destination node.
  */
	registerGuestAddress: function registerGuestAddress(id, dest) {
		if (typeof dest === 'undefined') {
			throw new Error('Cannot register address for ' + id + '. ' + 'A guest address DOM node, window or frame must be defined.');
		}

		if (!('postMessage' in dest)) {
			throw new Error('Communicator cannot send messages to destination. Please choose an HTMLElement ' + 'that supports the postMessage method');
		}

		if (typeof id !== 'string') {
			throw new Error('Please choose a string-based ID for the guest.');
		}

		// register local address for guest
		this._setGuestData(id, {
			id: id,
			node: dest
		});

		// start timer
		if (this.timer) {
			window.clearInterval(this.timer);
		}
	},

	/**
  * Sets or replaces the guest data.
  * @param {string} id - Guest ID.
  * @param {object} data - Guest data.
  * @private
  */
	_setGuestData: function _setGuestData(id, data) {
		if (!this._guests[id]) {
			this._guests[id] = {
				live: false,
				node: null
			};
		}

		Object.assign(this._guests[id], data);
	},

	/**
  * @param {string} to - Guest ID, as stored.
  * @param {mixed} message - Any JS compatible data to send as a message.
  * @param {string} id - Add a message ID to allow the recipient to prevent race conditions.
  * @description
  * Sends a message to the defined guest.
  * If no ID is defined, one will be generated.
  * @returns {string} The ID of the message as defined or generated.
  */
	send: function send(to, message) {
		var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

		var guest = this._getGuestById(to);

		id = id || this._generateSendId(to);

		if (guest && guest.live) {
			// post message immediately
			this._post(to, this._createMessage(message, {}, id));
		} else {
			// queue message for posting
			this._addToQueue(to, message, id);
		}

		return id;
	},

	/**
  * Adds a message to the local 'outbox' for the guest (by ID).
  */
	_addToQueue: function _addToQueue(to, message, id) {
		if (!this._queue[to]) {
			this._queue[to] = [];
		}

		this._queue[to].push({
			message: message,
			id: id
		});
	},

	_sendQueue: function _sendQueue(to) {
		var a;

		if (this._queue[to] && this._guests[to]) {
			// send messages in the order they were queued
			for (a = 0; a < this._queue[to].length; a += 1) {
				this._post(this._guests[to].node, this._createMessage(this._queue[to][a].message, {}, this._queue[to][a].id));
			}

			// clear queue for this recipient
			this._queue[to] = [];
		}
	},

	/**
  * Gets a communicator guest by its ID, or returns `null`.
  * @returns {mixed} Guest data, or `null`.
  * @private
  */
	_getGuestById: function _getGuestById(id) {
		return this._guests[id] || null;
	},

	/**
  * Get a guest by known node (i.e. that registered in `this._guests`)
  * @private
  */
	_getGuestByNode: function _getGuestByNode(node) {
		var id;

		for (id in this._guests) {
			if (this._guests.hasOwnProperty(id) && this._guests[id].node === node) {
				return this._getGuestById(id);
			}
		}

		return null;
	},

	/**
  * Actually posts the message to the destination.
  * @param {string} to - Guest ID.
  * @param {mixed} message - Any JS compatible data to send as a message.
  * @private
  */
	_post: function _post(to, message) {
		var guest, node;

		if (typeof to === 'string') {
			guest = this._getGuestById(to);

			if (!guest.node) {
				throw new Error('Cannot communicate with guest "' + to + '". Has its Node address been registered?');
			}

			node = guest.node;
		} else {
			node = to;
		}

		node.postMessage(message, this._origin);
	},

	/**
  * Invoked when a live message is received.
  * @private
  */
	_receiveMessage: function _receiveMessage(event) {
		var origin = event.origin || event.originalEvent.origin,
		    source = event.source || event.originalEvent.source,
		    message = event.data,
		    guest;

		if (origin !== location.origin) return;

		if ((message.ping || message.pong) && this._getGuestByNode(source)) {
			// received a ping/pong from valid source
			guest = message.ping || message.pong;

			this._setGuestLive(guest);
			this._sendQueue(guest);

			if (message.ping) {
				// pong back a ping (don't pong a pong or we'll be here forever)
				this._sendPong(source);
			}
		}

		if (this._callbacks.message && message.originalMessage) {
			this._callbacks.message(message.originalMessage, message.id);
		}
	},

	_setGuestLive: function _setGuestLive(id) {
		this._setGuestData(id, {
			live: true
		});
	},

	_createMessage: function _createMessage(message, data, id) {
		return Object.assign({}, data, {
			host: this.id,
			id: id,
			originalMessage: message
		});
	},

	_generateSendId: function _generateSendId(prefix) {
		if (window.performance && 'now' in window.performance) {
			return prefix + '-xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
				var r = (window.performance.now() + Math.random() * 16) % 16 | 0;
				return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
			});
		} else {
			return prefix + '-' + this.message_index++;
		}
	}
};

exports.default = Communicator;

/***/ }),
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _constants = __webpack_require__(8);

// default state for...
exports.default = {
	// general application
	app: {
		ui_state: _constants.uiStates.INITIALISING,
		active: false,
		first_valid_drop: false,
		last_valid_drop: false
	},

	// active zones and current attachments
	zones: {},

	// UI states - do not persist
	UI: {
		// the currently active dialog and its data
		dialog: {
			mode: _constants.dialogModes.NONE,
			data: null,
			onDialogComplete: null,
			onDialogCancel: null,
			overlay: true,
			attachment: null,
			id: ''
		},

		// the currently active droplet (i.e. the one that will be "dropped" when a
		// drop zone is next clicked)
		active_droplet_id: '',

		// stage the tour is at (from 1 - dialogs.tour.length)
		tour_stage: null,

		tooltip: {
			show: false,
			attachment: null,
			options: null,
			title: '',
			iconGlyph: '',
			content: ''
		}
	}
};

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = createDialogs;
var tourDialogModifiers = {
	arrow: {
		element: '.arrow'
	}
};

var tourButtons = {
	proceed: [{
		type: 'cancel',
		label: 'Close'
	}, {
		type: 'submit',
		label: 'Continue'
	}],
	try_it: [{
		type: 'cancel',
		label: 'Close'
	}, {
		type: 'pause',
		label: 'Try it out'
	}, {
		type: 'submit',
		label: 'Continue'
	}],
	end: [{
		type: 'submit',
		label: 'Finish tour'
	}]
};

function createDialogs(settings) {
	return {
		intro: {
			title: 'Welcome to <span class="logo">&lt;<b>Tag</b>&gt;</span>!',
			message: ['Tag is an app designed to explain how web pages are constructed.', 'If you are new to tag, you can use the Tour button in the toolbar.', 'Otherwise, just click “OK” and get creating!']
		},
		resetState: {
			title: 'Reset Tag',
			message: ['Are you sure you want to go back to the beginning?', 'All of your current work will be cleared.'],
			buttons: [{
				type: 'cancel',
				label: 'Cancel'
			}, {
				type: 'submit',
				className: 'danger',
				label: 'Clear my work'
			}]
		},
		dropletBadPlacement: {
			title: 'Oops!',
			message: ['Almost there, but the Droplet you’ve chosen doesn’t go here.', 'Try again and see if you can find the correct place.', 'Remember, the target will be <span class="drop-zone accept"><span class="target"><b>green</b></span></span> when you can place the Droplet.']
		},
		firstDropletDrop: function firstDropletDrop(droplet_output) {
			return {
				title: 'Well done!',
				message: ['<code>' + droplet_output + '</code>', 'You’ve placed your <b>very first</b> Droplet onto the Template. Hurrah!', 'Press the <span class="pseudo-button run"><svg class="icon" width="14" height="14"><use xlink:href="#icon-media-play"></use></svg>Run</span> button to see how it looks.']
			};
		},
		lastDropletDrop: {
			title: 'Well done!',
			message: ['You’ve placed at <b>least one Droplet</b> on every target in the template. Yippee!', 'Why not try the <span class="pseudo-button run"><svg class="icon" width="14" height="14"><use xlink:href="#icon-media-play"></use></svg>Run</span> button to see how it looks?']
		},
		tour: [{
			title: 'Welcome to <span class="logo">&lt;<b>Tag</b>&gt;</span>!',
			message: ['Tag is an app designed to explain how web pages are constructed.', 'The idea is simple: Place <b>elements</b> onto the <b>template</b>, and then use the ' + '<span class="pseudo-button run"><svg class="icon" width="14" height="14"><use xlink:href="#icon-media-play"></use></svg>Run</span> button to see how the page will look in the <b>view</b>.', 'Some parts of the tour will let you try things out before moving on. If you want to, use the <span class="pseudo-button">Try it out</span> button when you see it, then use <span class="pseudo-button"><svg class="icon" width="14" height="14"><use xlink:href="#icon-compass"></use></svg>Continue tour</span> to go back to the tour.'],
			buttons: tourButtons.proceed
		}, {
			title: 'The template',
			message: ['This is the template. It contains the source code for your web page, and is where you’ll add snippets of code.', 'Add elements to the <span class="drop-zone"><span class="target"><b>' + settings.dropZone.label + '</b></span></span> targets to construct the page.'],
			overlay: false,
			attachment: {
				selector: '.main > .template',
				options: {
					placement: 'right',
					modifiers: tourDialogModifiers
				}
			},
			buttons: tourButtons.proceed
		}, {
			title: 'The pallet',
			message: ['This is the pallet. It contains Droplets, which can be added to the template above.'],
			overlay: false,
			attachment: {
				selector: 'section.pallet',
				options: {
					placement: 'top',
					modifiers: tourDialogModifiers
				}
			},
			buttons: tourButtons.proceed
		}, {
			title: 'Droplet',
			message: ['This is a Droplet. It can be added to the template above.', 'Certain <span class="drop-zone"><span class="target"><b>' + settings.dropZone.label + '</b></span></span> targets only allow certain Droplets to be added to them.', 'When a target goes green <span class="drop-zone accept"><span class="target"><b>' + settings.dropZone.label + '</b></span></span>, it means it can accept the Droplet you have chosen, or <span class="drop-zone decline"><span class="target"><b>' + settings.dropZone.label + '</b></span></span> if the Droplet can’t be placed there.', 'Click on a Droplet and then click on one of the <span class="drop-zone"><span class="target"><b>' + settings.dropZone.label + '</b></span></span> targets in the template to attach it.'],
			overlay: false,
			attachment: {
				selector: 'section.pallet .droplet:first-child',
				options: {
					placement: 'top',
					modifiers: tourDialogModifiers
				}
			},
			buttons: tourButtons.try_it
		}, {
			title: 'The view',
			message: ['This is the view. It will show you how the page looks after running the code!', 'Use the <span class="pseudo-button run"><svg class="icon" width="14" height="14"><use xlink:href="#icon-media-play"></use></svg>Run</span> button to update the view'],
			overlay: false,
			attachment: {
				selector: 'section.view',
				options: {
					placement: 'left',
					modifiers: tourDialogModifiers
				}
			},
			buttons: tourButtons.try_it
		}, {
			title: 'All done!',
			message: ['Once you’ve used the <span class="pseudo-button run"><svg class="icon" width="14" height="14"><use xlink:href="#icon-media-play"></use></svg>Run</span> button, the view has updated and your last change should now be showing here!'],
			overlay: false,
			attachment: {
				selector: 'section.view',
				options: {
					placement: 'left',
					modifiers: tourDialogModifiers
				}
			},
			buttons: tourButtons.finish
		}]
	};
};

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _Icon = __webpack_require__(16);

var _utils = __webpack_require__(11);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DialogHeading = function DialogHeading(props) {
	var notes = [],
	    icon;

	props.notes.forEach(function (note, index) {
		return notes.push(_react2.default.createElement('p', { key: 'note-' + index,
			dangerouslySetInnerHTML: (0, _utils.rawMarkup)(note) }));
	});

	if (props.iconGlyph) {
		icon = _react2.default.createElement(_Icon.Icon, { glyph: props.iconGlyph });
	}

	return _react2.default.createElement(
		'div',
		{ className: props.className },
		_react2.default.createElement(
			'h2',
			null,
			icon,
			_react2.default.createElement('span', { dangerouslySetInnerHTML: (0, _utils.rawMarkup)(props.title) })
		),
		notes
	);
};

DialogHeading.propTypes = {
	iconGlyph: _react.PropTypes.string,
	className: _react.PropTypes.string.isRequired,
	title: _react.PropTypes.string.isRequired,
	notes: _react.PropTypes.arrayOf(_react.PropTypes.string)
};

exports.default = DialogHeading;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _Fieldset = __webpack_require__(143);

var _Fieldset2 = _interopRequireDefault(_Fieldset);

var _Button = __webpack_require__(137);

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @typedef FormOnSubmit
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @param {object} formValues - the current values of the form elements, as an object.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/**
 * @typedef FormFieldSets
 * @description
 * An array of fieldsets — each item of which contains an object defining a
 * single fieldset. See {@link FormFieldset}.
 * @example
 * var fieldsets = [
 * 	{@link FormFieldSet}...
 * ];
 */

/**
 * An object defining a single fieldset.
 * @typedef FormFieldSet
 * @property {string} key - Unique key value.
 * @property {string} legend - Legend label.
 * @property {object} fields - Fields within the fieldset. The keys of which
 * should represent the name of the field, with the values being one of
 * {@link FormField} each.
 * @example
 * var fieldset = [
 * 	{@link FormField}...
 * ]
 */

/**
 * @typedef FormButton
 * @property {string} type - Either 'cancel', 'submit' or a custom type.
 * @property {string} label - Button label.
 * @property {object} data - Data sent as `data` to the form onSubmit prop.
 * @property {object} className - Extra class name(s) for the button.
 */


/**
 * @description
 * Takes a form specification and produces an HTML form.
 * See {@link Form.propTypes} for more information
 */
var Form = function (_Component) {
	_inherits(Form, _Component);

	function Form(props) {
		_classCallCheck(this, Form);

		var formValues = {};

		var _this = _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).call(this, props));

		_this.ui = {
			refs: {
				buttons: {},
				fields: {}
			}
		};

		// set default state for fields based on original values
		if (_this.props.fieldSets) {
			_this.props.fieldSets.forEach(function (set) {
				formValues[set.key] = {};

				set.fields.forEach(function (field) {
					return formValues[set.key][field.name] = field.value;
				});
			});
		}

		// set default form value state
		_this.state = {
			formValues: formValues
		};

		// bind functions for events
		_this.elementChange = _this.elementChange.bind(_this);
		return _this;
	}

	_createClass(Form, [{
		key: 'valueSet',
		value: function valueSet(values, node) {
			var nodes = [],
			    key;

			if (Array.isArray(values)) {
				values.forEach(function (value) {
					nodes.push(_react2.default.createElement(
						'node',
						{ value: value },
						value
					));
				});
			} else if ((typeof values === 'undefined' ? 'undefined' : _typeof(values)) === 'object') {
				for (key in values) {
					nodes.push(_react2.default.createElement(
						'node',
						{ value: key },
						values[key]
					));
				}
			}

			return nodes;
		}
	}, {
		key: 'fieldSets',
		value: function fieldSets() {
			var _this2 = this;

			var output = [];

			if (this.props.fieldSets) {
				this.props.fieldSets.forEach(function (set) {
					var key = 'fieldset-' + set.key;

					output.push(_react2.default.createElement(_Fieldset2.default, {
						key: key,
						refCollector: _this2.collectFieldRef.bind(_this2),
						set: set.key,
						fields: set.fields,
						legend: set.legend,
						onFieldUpdate: _this2.elementChange
					}));
				});
			}

			return output;
		}
	}, {
		key: 'elementChange',
		value: function elementChange(set, name, value, values_state) {
			var sets = Object.assign({}, this.state.formValues);

			sets[set] = values_state;

			this.setState({
				formValues: sets
			});
		}
	}, {
		key: 'componentOnSubmit',
		value: function componentOnSubmit(proxy_event) {
			this.onSubmit(proxy_event, 'submit');
		}
	}, {
		key: 'onSubmit',
		value: function onSubmit(event, button, button_data) {
			if (event) {
				event.preventDefault();
			}

			this.props.onSubmit(this.state.formValues, button, button_data);
		}

		/**
   * Return a function to collect Button component DOM references.
   */

	}, {
		key: 'collectButtonRef',
		value: function collectButtonRef(key) {
			return function (ref) {
				this.ui.refs.buttons[key] = ref;
			}.bind(this);
		}

		/**
   * @description
   * Collect a reference to a field. Each field component uses two arguments
   * for their refCollector prop (unlike the usual one):
   * 1. An identifying key
   * 2. The DOM reference
   */

	}, {
		key: 'collectFieldRef',
		value: function collectFieldRef(key, ref) {
			this.ui.refs.fields[key] = ref;
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _this3 = this;

			var a, b, key;

			if ('ontouchstart' in window) {
				// if it's a touch device, it'll likely have an on-screen keyboard
				// which could get in the way of the dialog opening and cause UX issues.
				return;
			}

			// handle focusing of the first field (or button) in the form
			if (this.props.fieldSets && this.props.fieldSets.length) {
				// highlight first collected field
				for (a = 0; a < this.props.fieldSets.length; a += 1) {
					for (b = 0; b < this.props.fieldSets[a].fields.length; b += 1) {
						key = 'field-' + this.props.fieldSets[a].fields[b].name;

						if (this.props.fieldSets[a].fields[b].type !== 'hidden' && this.ui.refs.fields[key]) {
							this.ui.refs.fields[key].focus();
							a = this.props.fieldSets.length;
							break;
						}
					}
				}
			} else {
				// highlight first collected button
				this.props.buttons.forEach(function (button, index) {
					var key = 'button-' + index;

					if (_this3.ui.refs.buttons[key] && button.type === 'submit') {
						_this3.ui.refs.buttons[key].focus();
					}
				});
			}
		}

		/**
   * @description
   * Iterate through the `buttons` object in `props` and produce a list of Button
   * components.
   */

	}, {
		key: 'getButtons',
		value: function getButtons() {
			var _this4 = this;

			var buttons = [];

			if (this.props.buttons && this.props.buttons.length) {
				this.props.buttons.forEach(function (button, index) {
					var key = 'button-' + index,
					    click_function;

					click_function = function (component, key) {
						return function (event) {
							if (component.ui.refs.buttons && component.ui.refs.buttons[key]) {
								component.ui.refs.buttons[key].blur();
								component.props.onButtonClick(component.ui.refs.buttons[key], event);
							}

							if (button.type === 'cancel') {
								// cancel button
								component.props.onCancel();
							} else if (button.type !== 'submit') {
								// anything except submit
								component.onSubmit(null, button.type, button.data);
							}
						};
					}(_this4, key, button.onClick);

					buttons.push(_react2.default.createElement(_Button2.default, {
						key: key,
						refCollector: _this4.collectButtonRef(key),
						type: button.type,
						label: button.label,
						className: button.className,
						onClick: click_function }));
				});
			}

			return buttons;
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'form',
				{ action: '', onSubmit: this.componentOnSubmit.bind(this) },
				_react2.default.createElement(
					'div',
					{ className: 'fields' },
					this.fieldSets()
				),
				_react2.default.createElement(
					'fieldset',
					{ className: 'buttons' },
					this.getButtons()
				)
			);
		}
	}]);

	return Form;
}(_react.Component);

/**
 * @property {function} onCancel - invoked when the form is cancelled
 * @property {FormOnSubmit} onSubmit - invoked when the form is submitted
 * @property {FormFieldSets} fieldSets - fieldsets for display
 */


Form.propTypes = {
	onButtonClick: _react.PropTypes.func.isRequired,
	onCancel: _react.PropTypes.func,
	onSubmit: _react.PropTypes.func,
	fieldSets: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		key: _react.PropTypes.string,
		legend: _react.PropTypes.string,
		fields: _react.PropTypes.array
	})),
	buttons: _react.PropTypes.array
};

Form.defaultProps = {
	onCancel: function onCancel() {},
	onSubmit: function onSubmit() {}
};

exports.default = Form;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _utils = __webpack_require__(11);

var JSON = JSON || window.JSON;
var store = window.localStorage || window.sessionStorage;

var Storage = function Storage(prefix) {
	this.prefix = prefix + '_';
	this.storageEnabled = (0, _utils.checkStorage)('localStorage');
};

Storage.prototype = {
	get: function get(key, default_value) {
		var value;

		if (this.storageEnabled && (value = store.getItem(this.prefix + key)) !== null) {
			try {
				value = JSON.parse(value);
				return value;
			} catch (e) {
				return default_value;
			}
		}

		return default_value;
	},

	set: function set(key, value) {
		if (this.storageEnabled) {
			store.setItem(this.prefix + key, JSON.stringify(value));
		}
	}
};

exports.default = Storage;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = __webpack_require__(71);

var _promise2 = _interopRequireDefault(_promise);

var _superagent = __webpack_require__(74);

var _superagent2 = _interopRequireDefault(_superagent);

var _superagentPromise = __webpack_require__(73);

var _superagentPromise2 = _interopRequireDefault(_superagentPromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _superagentPromise2.default)(_superagent2.default, _promise2.default);

/***/ }),
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * The built in HTMLElement type. Used to define DOM compatible nodes of Element type.
                                                                                                                                                                                                                                                                               * @typedef HTMLElement
                                                                                                                                                                                                                                                                               */

/**
 * React's internal simulated event type. Exposes further properties for ease of development.
 * @typedef ReactEvent
 */

/**
 * @callback DialogPromise
 * @param {DialogData} dialog - Data from the dialog.
 */

/**
 * @typedef DialogData
 * @property {object} data - Data from any form elements within the dialog.
 * @property {string} action - Action string. 'submit', 'cancel' or a custom action, if set.
 * @property {object} action_data - Data specific to the special action, if set.
 */

var _redux = __webpack_require__(33);

__webpack_require__(156);

__webpack_require__(294);

var _UI = __webpack_require__(155);

var _UI2 = _interopRequireDefault(_UI);

var _Icon = __webpack_require__(16);

var _Droplet = __webpack_require__(27);

var _Droplet2 = _interopRequireDefault(_Droplet);

var _ajax = __webpack_require__(81);

var _ajax2 = _interopRequireDefault(_ajax);

var _Template = __webpack_require__(36);

var _Template2 = _interopRequireDefault(_Template);

var _Storage = __webpack_require__(80);

var _Storage2 = _interopRequireDefault(_Storage);

var _utils = __webpack_require__(11);

var _actions = __webpack_require__(37);

var _actions2 = _interopRequireDefault(_actions);

var _reducers = __webpack_require__(157);

var _reducers2 = _interopRequireDefault(_reducers);

var _defaults = __webpack_require__(125);

var _defaults2 = _interopRequireDefault(_defaults);

var _defaultState = __webpack_require__(76);

var _defaultState2 = _interopRequireDefault(_defaultState);

var _dialogs = __webpack_require__(77);

var _dialogs2 = _interopRequireDefault(_dialogs);

var _constants = __webpack_require__(8);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Main application wraper.
 * @param {AppDefaults} settings - Settings object.
 * @class
 */
var App = function App() {
	var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	this.settings = Object.deepAssign({}, App.defaults, settings);
	this._init();
	this.dialogs = (0, _dialogs2.default)(this.settings);
	this.storage = new _Storage2.default('tag_app');

	// set Template.onElementRender to settings, if defined
	if (settings.onElementRender) {
		_Template2.default.onElementRender = settings.onElementRender.bind(this);
	}

	// bind hideDialog to this context in case its used as a direct argument within a promise
	this.hideDialog = this.hideDialog.bind(this);
};

App.prototype = {
	_init: function _init() {
		this._refs = {
			ui: {
				app: document.querySelector('.app')
			},
			mounted: {},
			components: {}
		};

		// app data store (not stateful)
		this._data = {
			template: '',
			pallet: []
		};

		// templates module
		this._template = new _Template2.default(this, this.settings);
	},

	/**
  * Load the template/pallet data and activate Tag.
  */
	load: function load(url, pallet) {
		var _this = this;

		return this._template.load(url).then(function () {
			// load the HTML template and create it
			var data = _this._template.create();

			_this._data.drop_zones = data.drop_zones;
			_this._data.template = data.template;
		}).then(function () {
			// load the JSON based pallet data
			return _this._loadPallet(pallet);
		}).then(function () {
			var stored_state = _this.storage.get('state', undefined);

			if (stored_state !== undefined && (typeof stored_state === 'undefined' ? 'undefined' : _typeof(stored_state)) === 'object') {
				// stored state exists - reset UI (which is non-persistant)
				stored_state.UI = {};
				stored_state.UI = _defaultState2.default.UI;

				if (!_this._validate_state(stored_state)) {
					// reset stored_state back to undefined if  it's not valid
					stored_state = undefined;
				}
			} else {
				// reset back to undefined
				stored_state = undefined;
			}

			// app state store - default
			_this._store = (0, _redux.createStore)(_reducers2.default, stored_state, typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({
				// black list all session-based non persistant actions
				// (some of which contain unserialisable objects)
				actionsBlacklist: [_constants.actionTypes.SET_ACTIVE_DROPLET, _constants.actionTypes.SET_DIALOG_MODE, _constants.actionTypes.SET_TOUR_STAGE, _constants.actionTypes.SHOW_TOOLTIP, _constants.actionTypes.HIDE_TOOLTIP, _constants.actionTypes.SET_TOOLTIP_CONTENT]
			}));

			// activate the UI
			_this._UI = new _UI2.default(_this, _this.settings, _this._refs, _this._data, _this._store, _this._template);

			// render
			_this._UI.render();

			// set active state
			_this._store.dispatch(_actions2.default.setUIState(_constants.uiStates.ACTIVE));
		}).catch(function (error) {
			throw error;
		});
	},

	/**
  * Load the pallet data
  * @private
  */
	_loadPallet: function _loadPallet(url) {
		var _this2 = this;

		return _ajax2.default.get(url).then(function (response) {
			var pallet, item;

			try {
				pallet = JSON.parse(response.text);
			} catch (e) {
				return Promise.reject(new Error('Pallet data at file "' + url + '"" could not be parsed.' + ' is it valid JSON?'));
			}

			if (Array.isArray(pallet) && pallet.length) {
				for (item in pallet) {
					_this2._data.pallet.push(new _Droplet2.default(pallet[item]));
				}
			} else {
				throw new Error('Looks like the pallet at path ' + url + ' isn’t a valid array in JSON format.');
			}
		}).catch(function (error) {
			throw error;
		});
	},

	/**
  * Validates a state object by comparing it to the default state.
  * @private
  */
	_validate_state: function _validate_state(state) {
		return (0, _utils.structCompare)(state, _defaultState2.default);
	},

	/**
  * Displays a dialog message with optional confirmations
  * @param {string} title - Title of the dialog.
  * @param {array|HTMLElement} message - Message to display.
  * @param {array} [buttons] - Buttons to show. Defaults to a single "OK" button.
  * @returns {DialogPromise} a Promise, the resolve/reject methods of which will denote
  * completion or cancellation of the dialog. Custom button events will not complete
  * the promise.
  */
	dialog: function dialog(title, message) {
		var buttons = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

		this._requireUI();

		if (!Array.isArray(message)) {
			message = [message];
		}

		return this._UI._showDialog(_constants.dialogModes.GENERAL, {
			title: title,
			message: message,
			buttons: buttons
		});
	},

	/**
  * Hides whichever active dialog is currently open.
  */
	hideDialog: function hideDialog() {
		this._UI._hideDialog.apply(this._UI);
	},

	/**
  * Starts the standardised tour process, guiding the user through the interface.
  */
	startTour: function startTour() {
		this._requireUI();
		this._UI._tour.start();
	},

	/**
  * Resets the template and view frame. *note*, all placements will be lost.
  */
	reset: function reset() {
		var _this3 = this;

		this._requireUI();

		this._UI._showDialog(_constants.dialogModes.GENERAL, this.dialogs.resetState).then(function () {
			// clear all zones and reset the app
			_this3._store.dispatch(_actions2.default.zoneClearAllAttachments());
			_this3._store.dispatch(_actions2.default.resetApp());

			// clear view
			_this3._UI._comms.send('view', {
				cmd: _constants.messageCommands.RESET
			});

			_this3.hideDialog();
		});
	},

	/**
  * Updates the view frame with the latest template and its attachments.
  */
	updateView: function updateView() {
		this._requireUI();
		this._UI._updateView();
	},

	/**
  * Requires a _UI instance. Will throw if one doesn't exist.
  */
	_requireUI: function _requireUI() {
		if (!this._UI) {
			throw new Error('UI has not yet been initialised! Have you used #load() yet?');
		}
	}
};

/**
 * Default settings.
 */
App.defaults = _defaults2.default;

/**
 * Icon glyphs
 */
App.GLYPHS = _Icon.GLYPHS;

exports.default = App;

/***/ }),
/* 123 */,
/* 124 */,
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _Icon = __webpack_require__(16);

var _constants = __webpack_require__(8);

/**
 * The default settings applied to tag's App class on instantiation.
 * @typedef AppDefaults
 * @property {object} classes - Class definitions.
 * @property {object} selectors - CSS Selector definitions.
 * @property {object} template - Template options.
 * @property {number} template.initial_flex_basis=50 - The initial flex basis (width) of
 * the template container.
 * @property {object} view - View options.
 * @property {string} view.src='view.html' - Source filename for the view frame (relative to the App index).
 * @property {boolean} view.autoUpdate=false - Whether to automatically update the view when Droplet attachments change.
 * @property {object} dropZone - Drop Zone options.
 * @property {string} dropZone.label='...' - The label to use for Drop Zone targets.
 * @property {boolean} dropZone.warnOnBadPlacement=true - Produce a dialog when placing a Droplet into an invalid Drop Zone.
 * @property {boolean} dropZone.noticeOnFirstPlacement=true - Produce a dialog on the first valid placement of a Droplet
 * @property {boolean} dropZone.noticeOnLastPlacement=true - Produce a dialog when all of the Drop Zones have at least one attachment.
 * @property {ToolbarItem[]} toolbar - Toolbar items.
 */

exports.default = {
	classes: {
		canvas: 'tag-canvas',
		canvas_active: 'active',
		droplet_active: 'droplet-active',
		is_dragging: 'dragging',
		item_dragging: 'item-dragging',
		dropzone_target: 'target',
		dropzone_is_active: 'is-active',
		dropzone_is_target: 'is-target',
		attached: 'attached',
		text_element: 'text',
		hidden: 'hidden',
		button: 'button',
		button_animate: 'animate',
		popup: 'popup',
		tooltip: 'tooltip',
		template: {
			node: 'template',
			inner: 'template-inner'
		},
		droplet: {
			node: 'droplet',
			active: 'active'
		},
		dropzone: {
			node: 'drop-zone',
			possible_target: 'possible-target',
			will_accept: 'will-accept',
			will_decline: 'will-decline'
		},
		dialog: {
			main: 'dialog',
			visible: 'visible',
			container: 'dialog-container',
			heading: 'dialog-heading',
			no_overlay: 'no-overlay'
		},
		toolbar: {
			separator: 'separator'
		}
	},
	selectors: {
		drop_zone: '.drop-zone .target',
		droplet: '.droplet',
		button_circle: '.circle'
	},
	template: {
		initial_flex_basis: 50
	},
	view: {
		src: 'view.html',
		autoUpdate: false
	},
	dropZone: {
		label: '...',
		warnOnBadPlacement: true,
		noticeOnFirstPlacement: true,
		noticeOnLastPlacement: true
	},
	toolbar: [{
		label: function label(state) {
			if (state.UI.tour_stage !== null && state.UI.dialog.mode === _constants.dialogModes.NONE) {
				return 'Continue tour';
			} else {
				return 'Tour';
			}
		},
		icon: _Icon.GLYPHS.COMPASS,
		method: 'startTour'
	}, {
		label: 'Reset',
		icon: _Icon.GLYPHS.LOOP_CIRCULAR,
		method: 'reset'
	}, {
		label: 'Run',
		icon: _Icon.GLYPHS.MEDIA_PLAY,
		method: 'updateView',
		className: 'run',
		separator: true
	}],
	onElementRender: null,
	showIntro: false
};

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.optionValueSet = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var optionValueSet = exports.optionValueSet = function optionValueSet(values) {
	var nodes = [],
	    key;

	if (Array.isArray(values)) {
		values.forEach(function (value, index) {
			var key = 'item-' + index;
			nodes.push(_react2.default.createElement(
				'option',
				{ key: key, value: value },
				value
			));
		});
	} else if ((typeof values === 'undefined' ? 'undefined' : _typeof(values)) === 'object') {
		for (key in values) {
			nodes.push(_react2.default.createElement(
				'option',
				{ key: key, value: key },
				values[key]
			));
		}
	}

	return nodes;
};

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _utils = __webpack_require__(11);

var _View = __webpack_require__(149);

var _View2 = _interopRequireDefault(_View);

var _TooltipContainer = __webpack_require__(133);

var _TooltipContainer2 = _interopRequireDefault(_TooltipContainer);

var _HeaderContainer = __webpack_require__(130);

var _HeaderContainer2 = _interopRequireDefault(_HeaderContainer);

var _TemplateContainer = __webpack_require__(132);

var _TemplateContainer2 = _interopRequireDefault(_TemplateContainer);

var _DialogContainer = __webpack_require__(129);

var _DialogContainer2 = _interopRequireDefault(_DialogContainer);

var _PalletContainer = __webpack_require__(131);

var _PalletContainer2 = _interopRequireDefault(_PalletContainer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Canvas = function (_Component) {
	_inherits(Canvas, _Component);

	function Canvas(props) {
		_classCallCheck(this, Canvas);

		return _possibleConstructorReturn(this, (Canvas.__proto__ || Object.getPrototypeOf(Canvas)).call(this, props));
	}

	_createClass(Canvas, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			if (typeof this.props.onMount === 'function') {
				this.props.onMount('canvas');
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var classes = [this.props.settings.classes.canvas, this.props.state.ui_state];

			if (typeof this.props.active_droplet_id === 'string' && this.props.active_droplet_id !== '') {
				classes.push(this.props.settings.classes.droplet_active);
			}

			return _react2.default.createElement(
				'div',
				{ className: classes.join(' '),
					ref: (0, _utils.collectRef)(this.props, 'canvas')
				},
				_react2.default.createElement(
					_HeaderContainer2.default,
					{
						settings: this.props.settings,
						onButtonClick: this.props.onButtonClick,
						lib: this.props.lib },
					_react2.default.createElement(
						'h1',
						{ className: 'logo' },
						'<',
						_react2.default.createElement(
							'b',
							null,
							'Tag'
						),
						'>'
					),
					_react2.default.createElement(
						'p',
						null,
						'The webpage learning tool.'
					)
				),
				_react2.default.createElement(
					'div',
					{ className: 'main' },
					_react2.default.createElement(_TemplateContainer2.default, {
						data: this.props.data,
						settings: this.props.settings,
						refCollector: this.props.refCollector,
						onMount: this.props.onMount,
						onAttachmentClick: this.props.onAttachmentClick,
						onDropZoneEvent: this.props.onDropZoneEvent,
						template: this.props.data.template,
						lib: this.props.lib
					}),
					_react2.default.createElement('div', { className: 'drag-handle',
						onMouseEnter: this.props.onDragHandleEvent,
						onMouseLeave: this.props.onDragHandleEvent,
						onMouseDown: this.props.onDragHandleEvent,
						onMouseUp: this.props.onDragHandleEvent,
						onTouchStart: this.props.onDragHandleEvent,
						onTouchEnd: this.props.onDragHandleEvent,
						ref: (0, _utils.collectRef)(this.props, 'drag_handle') }),
					_react2.default.createElement(_View2.default, {
						settings: this.props.settings,
						onMount: this.props.onMount,
						refCollector: this.props.refCollector })
				),
				_react2.default.createElement(_PalletContainer2.default, {
					data: this.props.data,
					settings: this.props.settings,
					lib: this.props.lib,
					onMount: this.props.onMount,
					onDropletEvent: this.props.onDropletEvent,
					refCollector: this.props.refCollector }),
				_react2.default.createElement('div', { className: 'overlay' }),
				_react2.default.createElement(_DialogContainer2.default, {
					settings: this.props.settings,
					lib: this.props.lib,
					onButtonClick: this.props.onButtonClick }),
				_react2.default.createElement(_TooltipContainer2.default, {
					settings: this.props.settings,
					attacher: this.props.lib.setUIPopperAttachment })
			);
		}
	}]);

	return Canvas;
}(_react.Component);

Canvas.propTypes = {
	// from CanvasContainer
	state: _react.PropTypes.object.isRequired,
	active_droplet_id: _react.PropTypes.any,
	state_tooltip: _react.PropTypes.object,

	// from UI#render
	data: _react.PropTypes.object.isRequired,
	onMount: _react.PropTypes.func.isRequired,
	onAttachmentClick: _react.PropTypes.func.isRequired,
	onDropletEvent: _react.PropTypes.func.isRequired,
	onDropZoneEvent: _react.PropTypes.func.isRequired,
	onDragHandleEvent: _react.PropTypes.func.isRequired,
	onButtonClick: _react.PropTypes.func.isRequired,
	refCollector: _react.PropTypes.func.isRequired,
	settings: _react.PropTypes.object.isRequired,
	lib: _react.PropTypes.object.isRequired
};

exports.default = Canvas;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactRedux = __webpack_require__(15);

var _Canvas = __webpack_require__(127);

var _Canvas2 = _interopRequireDefault(_Canvas);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
	return {
		state: state.app,
		active_droplet_id: state.UI.active_droplet_id
	};
};

var CanvasContainer = (0, _reactRedux.connect)(mapStateToProps)(_Canvas2.default);

exports.default = CanvasContainer;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactRedux = __webpack_require__(15);

var _Dialog = __webpack_require__(134);

var _Dialog2 = _interopRequireDefault(_Dialog);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
	return {
		id: state.UI.dialog.id,
		mode: state.UI.dialog.mode,
		data: state.UI.dialog.data,
		onDialogComplete: state.UI.dialog.onDialogComplete,
		onDialogCancel: state.UI.dialog.onDialogCancel
	};
};

var DialogContainer = (0, _reactRedux.connect)(mapStateToProps)(_Dialog2.default);

exports.default = DialogContainer;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactRedux = __webpack_require__(15);

var _Header = __webpack_require__(144);

var _Header2 = _interopRequireDefault(_Header);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
	return {
		tour_stage: state.UI.tour_stage,
		dialog_mode: state.UI.dialog.mode
	};
};

var HeaderContainer = (0, _reactRedux.connect)(mapStateToProps)(_Header2.default);

exports.default = HeaderContainer;

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactRedux = __webpack_require__(15);

var _actions = __webpack_require__(37);

var _actions2 = _interopRequireDefault(_actions);

var _Pallet = __webpack_require__(145);

var _Pallet2 = _interopRequireDefault(_Pallet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
	return {
		activeDropletId: state.UI.active_droplet_id
	};
};

var mapDispatchToProps = function mapDispatchToProps(dispatch, props) {
	return {
		onDropletEvent: function onDropletEvent(event, droplet, data) {
			switch (event.type) {
				case 'mouseenter':
				case 'touchstart':
					dispatch(_actions2.default.setTooltipContent(data.title, data.content, data.iconGlyph));
					dispatch(_actions2.default.showTooltip(data.ref));
					break;

				case 'mouseleave':
				case 'touchend':
				case 'click':
					dispatch(_actions2.default.hideTooltip());
					break;
			}

			props.onDropletEvent(event, droplet, data);
		}
	};
};

var PalletContainer = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Pallet2.default);

exports.default = PalletContainer;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactRedux = __webpack_require__(15);

var _Template = __webpack_require__(146);

var _Template2 = _interopRequireDefault(_Template);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
	return {
		zones: state.zones,
		activeDropletID: state.UI.active_droplet_id
	};
};

var TemplateContainer = (0, _reactRedux.connect)(mapStateToProps)(_Template2.default);

exports.default = TemplateContainer;

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactRedux = __webpack_require__(15);

var _Tooltip = __webpack_require__(148);

var _Tooltip2 = _interopRequireDefault(_Tooltip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
	return {
		state: state.UI.tooltip
	};
};

var TooltipContainer = (0, _reactRedux.connect)(mapStateToProps)(_Tooltip2.default);

exports.default = TooltipContainer;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _constants = __webpack_require__(8);

var _DialogGeneral = __webpack_require__(136);

var _DialogGeneral2 = _interopRequireDefault(_DialogGeneral);

var _DialogEditDroplet = __webpack_require__(135);

var _DialogEditDroplet2 = _interopRequireDefault(_DialogEditDroplet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import the dialogs used, then put into a global for referencing


var DialogComponents = {};
DialogComponents[_constants.dialogModes.EDIT_DROPLET] = _DialogEditDroplet2.default;
DialogComponents[_constants.dialogModes.GENERAL] = _DialogGeneral2.default;
DialogComponents[_constants.dialogModes.TOUR] = _DialogGeneral2.default;

var Dialog = function (_Component) {
	_inherits(Dialog, _Component);

	function Dialog(props) {
		_classCallCheck(this, Dialog);

		return _possibleConstructorReturn(this, (Dialog.__proto__ || Object.getPrototypeOf(Dialog)).call(this, props));
	}

	/**
  * `ref` and `popper` reference is refreshed here instead of componentDidMount
  * because this component doesn't really "unmount" as such - it just changes the
  * inner `Component` value for dialog contents.
  */


	_createClass(Dialog, [{
		key: 'collectRef',
		value: function collectRef(ref) {
			if (ref !== null) {
				this.dialogRef = ref;

				if (this.popper) {
					// popper already exists - remove and set null
					this.popper.destroy();
					this.popper = null;
				}

				if (this.props.data && this.props.data.attachment) {
					// attachment data exists - apply with popper
					this.popper = this.props.lib.setUIPopperAttachment(this.props.data.attachment, this.dialogRef);
				}
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var Component,
			    classes = [this.props.settings.classes.dialog.main];

			if (this.props.mode !== _constants.dialogModes.NONE) {
				classes.push(this.props.settings.classes.dialog.visible);
			}

			// get appropriate component for dialog mode
			Component = DialogComponents[this.props.mode];

			if (Component) {
				// a dialog is being requested - render the appropriate component
				if (this.props.data.overlay === false) {
					classes.push(this.props.settings.classes.dialog.no_overlay);
				}

				return _react2.default.createElement(
					'div',
					{ className: classes.join(' ') },
					_react2.default.createElement(Component, {
						key: this.props.id,
						data: this.props.data,
						settings: this.props.settings,
						refCollector: this.collectRef.bind(this),
						onDialogComplete: this.props.onDialogComplete,
						onDialogCancel: this.props.onDialogCancel,
						onButtonClick: this.props.onButtonClick,
						lib: this.props.lib })
				);
			} else {
				return _react2.default.createElement('div', { className: classes.join(' ') });
			}
		}
	}]);

	return Dialog;
}(_react.Component);

Dialog.propTypes = {
	// from DialogContainer
	mode: _react.PropTypes.string,
	data: _react.PropTypes.object,
	onDialogCancel: _react.PropTypes.func,
	onButtonClick: _react.PropTypes.func,
	id: _react.PropTypes.string.isRequired,

	// from Canvas
	settings: _react.PropTypes.object,
	onDialogComplete: _react.PropTypes.func,
	lib: _react.PropTypes.object
};

Dialog.defaultProps = {
	onDialogCancel: null,
	onDialogComplete: null
};

exports.default = Dialog;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _FormField = __webpack_require__(35);

var _FormField2 = _interopRequireDefault(_FormField);

var _constants = __webpack_require__(8);

var _commonPropTypes = __webpack_require__(34);

var _Icon = __webpack_require__(16);

var _DialogHeading = __webpack_require__(78);

var _DialogHeading2 = _interopRequireDefault(_DialogHeading);

var _Form = __webpack_require__(79);

var _Form2 = _interopRequireDefault(_Form);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var headingsByType = {
	'element': {
		text: 'Element',
		icon: _Icon.GLYPHS.TAG
	},
	'text': {
		text: 'Text item',
		icon: _Icon.GLYPHS.TEXT
	},
	'attribute': {
		text: 'Attribute',
		icon: _Icon.GLYPHS.PUZZLE_PIECE
	}
};

var DialogEditDroplet = function (_Component) {
	_inherits(DialogEditDroplet, _Component);

	function DialogEditDroplet(props) {
		_classCallCheck(this, DialogEditDroplet);

		var _this = _possibleConstructorReturn(this, (DialogEditDroplet.__proto__ || Object.getPrototypeOf(DialogEditDroplet)).call(this, props));

		if (_this.props.data && _this.props.data.droplet_id) {
			_this.droplet = _this.props.lib.getDropletById(_this.props.data.droplet_id);
		}

		_this.onDialogComplete = _this.onDialogComplete.bind(_this);
		_this.detachAttachment = _this.detachAttachment.bind(_this);
		return _this;
	}

	/**
  * Instead of passing completion straight to the prop, handles conversion of raw form
  * data back into a format matching the original droplet data.
  */


	_createClass(DialogEditDroplet, [{
		key: 'onDialogComplete',
		value: function onDialogComplete(values, action, action_data) {
			var droplet_values = {},
			    key;

			if (typeof this.props.onDialogComplete === 'function') {
				// convert data back into format replicating Droplet.data format
				for (key in values) {
					if (values.hasOwnProperty(key)) {
						if (key === 'attrs') {
							droplet_values[key] = values[key];
						} else {
							droplet_values[key] = values[key][key];
						}
					}
				}

				droplet_values = Object.deepAssign({}, this.droplet.data, droplet_values);

				// finally, fire the original prop with the converted data
				this.props.onDialogComplete(droplet_values, action, action_data);
			}
		}
	}, {
		key: 'detachAttachment',
		value: function detachAttachment() {
			if (this.props.data.attachment_index !== null) {
				this.props.lib.zoneDetachAttachment(this.props.data.zone_id, this.props.data.attachment_index);
			} else {
				throw new Error('attachment_index is null or not defined. Cannot detach');
			}

			this.props.onDialogCancel();
		}
	}, {
		key: 'getFieldsets',
		value: function getFieldsets() {
			var fieldsets = [],
			    attachment = null,
			    fieldset,
			    field,
			    attribute,
			    item;

			if (this.props.data.attachment_index !== null) {
				attachment = this.props.lib.zoneGetAttachment(this.props.data.zone_id, this.props.data.attachment_index);
			}

			for (attribute in this.droplet.editable) {
				fieldset = {
					key: attribute,
					legend: _constants.setLabels[attribute],
					fields: []
				};

				// add indidual fields, depending on editable attribute type
				if (attribute === 'attrs') {
					// the 'attrs' attribute, which contains key/value pairs
					for (item in this.droplet.editable[attribute]) {
						field = Object.deepAssign({}, this.droplet.editable[attribute][item]);

						// preset value from attachment
						if (attachment !== null && attachment.data.attrs && attachment.data.attrs[item]) {
							field.value = attachment.data.attrs[item];
						}

						fieldset.fields.push(new _FormField2.default(item, this.droplet.editable[attribute][item].type, field));
					}
				} else {
					// string based attributes
					field = Object.deepAssign({}, this.droplet.editable[attribute]);

					// preset value from attachment
					if (attachment !== null && attachment.data[attribute]) {
						field.value = attachment.data[attribute];
					}

					fieldset.fields.push(new _FormField2.default(attribute, this.droplet.editable[attribute].type, field));
				}

				// add fieldset to form
				fieldsets.push(fieldset);
			}

			return fieldsets;
		}
	}, {
		key: 'render',
		value: function render() {
			var fieldsets = this.getFieldsets(),
			    buttons = [],
			    classes = [this.props.settings.classes.dialog.container, this.props.settings.classes.popup],
			    title,
			    notes;

			classes.push('droplet-' + this.droplet.dropletType);

			// add cancel button (for every dialog type)
			buttons.push({
				type: 'cancel',
				label: 'Cancel'
			});

			if (this.props.data.attachment_index !== null) {
				// editing an existing droplet
				title = 'Edit ' + headingsByType[this.droplet.dropletType].text;

				if (fieldsets.length) {
					notes = ['You can edit the Droplet using the fields below. ' + 'Change the bits you want to customise and use “Add Droplet” when you’re done.'];

					buttons.push({
						type: 'submit',
						label: 'Edit Droplet'
					});
				} else {
					notes = ['There is nothing to edit on this Droplet, but you can remove it ' + 'With the “Remove Droplet” button.'];
				}

				buttons.push({
					type: 'remove_droplet',
					label: 'Remove Droplet',
					className: 'danger pull-left',
					data: {
						attachment_index: this.props.data.attachment_index,
						zone_id: this.props.data.zone_id
					}
				});
			} else {
				// adding
				title = 'Add ' + headingsByType[this.droplet.dropletType].text;
				notes = ['You’ve found the right drop place to put this Droplet! ', 'Edit anything you would like to change and then use “Edit Droplet”.'];
				buttons = buttons.concat({
					type: 'submit',
					label: 'Add Droplet'
				});
			}

			return _react2.default.createElement(
				'div',
				{ className: classes.join(' '),
					ref: this.props.refCollector },
				_react2.default.createElement(_DialogHeading2.default, {
					title: title,
					notes: notes,
					iconGlyph: headingsByType[this.droplet.dropletType].icon,
					className: this.props.settings.classes.dialog.heading }),
				_react2.default.createElement(_Form2.default, {
					fieldSets: fieldsets,
					buttons: buttons,
					onButtonClick: this.props.onButtonClick,
					onSubmit: this.onDialogComplete,
					onCancel: this.props.onDialogCancel }),
				_react2.default.createElement('span', { className: 'arrow' })
			);
		}
	}]);

	return DialogEditDroplet;
}(_react.Component);

DialogEditDroplet.propTypes = _commonPropTypes.dialog;

exports.default = DialogEditDroplet;

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _DialogHeading = __webpack_require__(78);

var _DialogHeading2 = _interopRequireDefault(_DialogHeading);

var _Form = __webpack_require__(79);

var _Form2 = _interopRequireDefault(_Form);

var _commonPropTypes = __webpack_require__(34);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DialogGeneral = function (_Component) {
	_inherits(DialogGeneral, _Component);

	function DialogGeneral(props) {
		_classCallCheck(this, DialogGeneral);

		return _possibleConstructorReturn(this, (DialogGeneral.__proto__ || Object.getPrototypeOf(DialogGeneral)).call(this, props));
	}

	_createClass(DialogGeneral, [{
		key: 'render',
		value: function render() {
			var buttons = this.props.data.buttons,
			    classes = [this.props.settings.classes.dialog.container, this.props.settings.classes.popup];

			if (!buttons || !buttons.length) {
				buttons = [{
					type: 'submit',
					label: 'OK'
				}];
			}

			return _react2.default.createElement(
				'div',
				{ className: classes.join(' '),
					ref: this.props.refCollector },
				_react2.default.createElement(_DialogHeading2.default, {
					title: this.props.data.title,
					notes: this.props.data.message,
					className: this.props.settings.classes.dialog.heading }),
				_react2.default.createElement(_Form2.default, {
					buttons: buttons,
					onButtonClick: this.props.onButtonClick,
					onSubmit: this.props.onDialogComplete,
					onCancel: this.props.onDialogCancel }),
				_react2.default.createElement('span', { className: 'arrow' })
			);
		}
	}]);

	return DialogGeneral;
}(_react.Component);

DialogGeneral.propTypes = _commonPropTypes.dialog;

exports.default = DialogGeneral;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Button = function Button(props) {
	var type = props.type === 'submit' ? 'submit' : 'button',
	    classes = ['button', props.className],
	    onClick = props.onClick;

	if (props.type === 'cancel') {
		classes.push('cancel');
	} else if (props.type === 'submit') {
		classes.push('primary');
	}

	return _react2.default.createElement(
		'button',
		{
			ref: props.refCollector,
			className: classes.join(' '),
			onClick: onClick,
			type: type },
		_react2.default.createElement(
			'span',
			null,
			props.label,
			_react2.default.createElement('span', { className: 'circle' })
		)
	);
};

Button.propTypes = {
	type: _react.PropTypes.string.isRequired,
	label: _react.PropTypes.string.isRequired,
	className: _react.PropTypes.string,
	onClick: _react.PropTypes.func,
	refCollector: _react.PropTypes.func
};

exports.default = Button;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _utils = __webpack_require__(11);

var _DropZone = __webpack_require__(26);

var _DropZone2 = _interopRequireDefault(_DropZone);

var _DropZoneAttachmentList = __webpack_require__(140);

var _DropZoneAttachmentList2 = _interopRequireDefault(_DropZoneAttachmentList);

var _DropZoneTarget = __webpack_require__(141);

var _DropZoneTarget2 = _interopRequireDefault(_DropZoneTarget);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DropZoneComponent = function (_Component) {
	_inherits(DropZoneComponent, _Component);

	function DropZoneComponent(props) {
		_classCallCheck(this, DropZoneComponent);

		var _this = _possibleConstructorReturn(this, (DropZoneComponent.__proto__ || Object.getPrototypeOf(DropZoneComponent)).call(this, props));

		_this.myrefs = {};
		_this.onEvent = _this.onEvent.bind(_this);
		return _this;
	}

	_createClass(DropZoneComponent, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			if (typeof this.props.onMount === 'function') {
				this.props.onMount('dropzone', this.props.zone.id);
			}
		}
	}, {
		key: 'onEvent',
		value: function onEvent(event) {
			if (event.type === 'click') {
				event.preventDefault();
			}

			this.props.onEvent(event, this.props.zone);
		}
	}, {
		key: 'render',
		value: function render() {
			var key = this.props.zone.id + '-zone',
			    classNames = [this.props.settings.classes.dropzone.node];

			if (this.props.className !== '') {
				classNames.push(this.props.className);
			}

			return _react2.default.createElement(
				'span',
				{
					key: key,
					className: classNames.join(' '),
					ref: (0, _utils.collectRef)(this.props, ['dropzone'], this.props.zone.id),
					'data-id': this.props.zone.id,
					'data-attachment': this.props.zone.attachmentId },
				_react2.default.createElement(_DropZoneAttachmentList2.default, {
					zone: this.props.zone,
					activeAttachments: this.props.activeAttachments,
					onAttachmentClick: this.props.onAttachmentClick,
					lib: this.props.lib }),
				_react2.default.createElement(_DropZoneTarget2.default, {
					zone: this.props.zone,
					settings: this.props.settings,
					activeAttachments: this.props.activeAttachments,
					refCollector: this.props.refCollector,
					onEvent: this.onEvent })
			);
		}
	}]);

	return DropZoneComponent;
}(_react.Component);

DropZoneComponent.propTypes = {
	zone: _react.PropTypes.instanceOf(_DropZone2.default).isRequired,
	className: _react.PropTypes.string,
	settings: _react.PropTypes.object.isRequired,
	activeAttachments: _react.PropTypes.array.isRequired,
	onMount: _react.PropTypes.func.isRequired,
	onAttachmentClick: _react.PropTypes.func.isRequired,
	onEvent: _react.PropTypes.func.isRequired,
	refCollector: _react.PropTypes.func.isRequired,
	lib: _react.PropTypes.object.isRequired
};

exports.default = DropZoneComponent;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _Template = __webpack_require__(36);

var _Template2 = _interopRequireDefault(_Template);

var _Droplet = __webpack_require__(27);

var _Droplet2 = _interopRequireDefault(_Droplet);

var _DropZone = __webpack_require__(26);

var _DropZone2 = _interopRequireDefault(_DropZone);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DropZoneAttachment = function (_Component) {
	_inherits(DropZoneAttachment, _Component);

	function DropZoneAttachment(props) {
		_classCallCheck(this, DropZoneAttachment);

		var _this = _possibleConstructorReturn(this, (DropZoneAttachment.__proto__ || Object.getPrototypeOf(DropZoneAttachment)).call(this, props));

		_this.onClick = _this.onClick.bind(_this);
		return _this;
	}

	_createClass(DropZoneAttachment, [{
		key: 'onClick',
		value: function onClick(event) {
			event.preventDefault();

			this.props.onClick(event, this.props.droplet, this.props.attachmentIndex);
		}
	}, {
		key: 'render',
		value: function render() {
			var className = 'dropzone-attachment',
			    data;

			// merge edited data with droplet data
			data = Object.deepAssign({}, this.props.droplet.data, this.props.data);

			// set classname
			className += ' ' + this.props.droplet.dropletType;

			return _react2.default.createElement(
				'span',
				{
					className: className,
					onClick: this.onClick },
				_Template2.default.renderDroplet(this.props.droplet, data, this.props.zone, false)
			);
		}
	}]);

	return DropZoneAttachment;
}(_react.Component);

DropZoneAttachment.propTypes = {
	droplet: _react.PropTypes.instanceOf(_Droplet2.default).isRequired,
	zone: _react.PropTypes.instanceOf(_DropZone2.default).isRequired,
	attachmentIndex: _react.PropTypes.number.isRequired,
	onClick: _react.PropTypes.func.isRequired,
	data: _react.PropTypes.object.isRequired
};

exports.default = DropZoneAttachment;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _DropZone = __webpack_require__(26);

var _DropZone2 = _interopRequireDefault(_DropZone);

var _DropZoneAttachment = __webpack_require__(139);

var _DropZoneAttachment2 = _interopRequireDefault(_DropZoneAttachment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DropZoneAttachmentList = function (_Component) {
	_inherits(DropZoneAttachmentList, _Component);

	function DropZoneAttachmentList(props) {
		_classCallCheck(this, DropZoneAttachmentList);

		var _this = _possibleConstructorReturn(this, (DropZoneAttachmentList.__proto__ || Object.getPrototypeOf(DropZoneAttachmentList)).call(this, props));

		_this.attachmentClick = _this.attachmentClick.bind(_this);
		return _this;
	}

	_createClass(DropZoneAttachmentList, [{
		key: 'attachmentClick',
		value: function attachmentClick(event, droplet, attachmentIndex) {
			if (typeof this.props.onAttachmentClick === 'function') {
				this.props.onAttachmentClick(droplet, this.props.zone, attachmentIndex);
			}
		}
	}, {
		key: 'renderActiveAttachments',
		value: function renderActiveAttachments() {
			var _this2 = this;

			var children = [];

			this.props.activeAttachments.forEach(function (attachment, index) {
				children.push(_react2.default.createElement(_DropZoneAttachment2.default, {
					key: attachment.droplet_id + '-attachment-' + index,
					attachmentIndex: index,
					onClick: _this2.attachmentClick,
					droplet: _this2.props.lib.getDropletById(attachment.droplet_id),
					zone: _this2.props.zone,
					data: attachment.data }));
			});

			return children;
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'span',
				{
					className: 'attachments' },
				this.renderActiveAttachments()
			);
		}
	}]);

	return DropZoneAttachmentList;
}(_react.Component);

DropZoneAttachmentList.propTypes = {
	zone: _react.PropTypes.instanceOf(_DropZone2.default).isRequired,
	activeAttachments: _react.PropTypes.array.isRequired,
	onAttachmentClick: _react.PropTypes.func.isRequired,
	lib: _react.PropTypes.object.isRequired
};

exports.default = DropZoneAttachmentList;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _utils = __webpack_require__(11);

var _DropZone = __webpack_require__(26);

var _DropZone2 = _interopRequireDefault(_DropZone);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DropZoneTarget = function (_Component) {
	_inherits(DropZoneTarget, _Component);

	function DropZoneTarget(props) {
		_classCallCheck(this, DropZoneTarget);

		var _this = _possibleConstructorReturn(this, (DropZoneTarget.__proto__ || Object.getPrototypeOf(DropZoneTarget)).call(this, props));

		_this.onEvent = _this.onEvent.bind(_this);
		return _this;
	}

	_createClass(DropZoneTarget, [{
		key: 'onEvent',
		value: function onEvent(event) {
			if (event.type === 'click') {
				event.preventDefault();
			}

			this.props.onEvent(event, this.props.zone);
		}
	}, {
		key: 'render',
		value: function render() {
			var key = this.props.zone.id + '-target',
			    classNames = [this.props.settings.classes.dropzone_target];

			if (this.props.activeAttachments.length >= this.props.zone.maxAttachments) {
				classNames.push(this.props.settings.classes.hidden);
			}

			return _react2.default.createElement(
				'span',
				{ className: 'target-outer' },
				_react2.default.createElement(
					'span',
					{ key: key,
						onClick: this.onEvent,
						ref: (0, _utils.collectRef)(this.props, ['dropzone_target'], this.props.zone.id),
						className: classNames.join(' ') },
					_react2.default.createElement(
						'b',
						null,
						this.props.settings.dropZone.label
					)
				)
			);
		}
	}]);

	return DropZoneTarget;
}(_react.Component);

DropZoneTarget.propTypes = {
	zone: _react.PropTypes.instanceOf(_DropZone2.default).isRequired,
	settings: _react.PropTypes.object.isRequired,
	activeAttachments: _react.PropTypes.array.isRequired,
	onEvent: _react.PropTypes.func.isRequired,
	refCollector: _react.PropTypes.func
};

exports.default = DropZoneTarget;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _utils = __webpack_require__(11);

var _Droplet = __webpack_require__(27);

var _Droplet2 = _interopRequireDefault(_Droplet);

var _Template = __webpack_require__(36);

var _Template2 = _interopRequireDefault(_Template);

var _Icon = __webpack_require__(16);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dropletTypeToGlyphs = {
	'text': _Icon.GLYPHS.TEXT,
	'element': _Icon.GLYPHS.TAG,
	'attribute': _Icon.GLYPHS.PUZZLE_PIECE
};

var DropletComponent = function (_Component) {
	_inherits(DropletComponent, _Component);

	function DropletComponent(props) {
		_classCallCheck(this, DropletComponent);

		var _this = _possibleConstructorReturn(this, (DropletComponent.__proto__ || Object.getPrototypeOf(DropletComponent)).call(this, props));

		_this.tooltip_cache = '';
		_this.ui = {
			droplet: null
		};

		_this.onEvent = _this.onEvent.bind(_this);
		return _this;
	}

	_createClass(DropletComponent, [{
		key: 'refCollector',
		value: function refCollector(ref) {
			var collector = (0, _utils.collectRef)(this.props, ['droplet'], this.props.droplet.id);
			this.ui.droplet = ref;
			collector(ref);
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			if (typeof this.props.onMount === 'function') {
				this.props.onMount('droplet', this.props.droplet.id);
			}
		}
	}, {
		key: 'onEvent',
		value: function onEvent(event) {
			if (event.type === 'click') {
				event.preventDefault();
			}

			if (event.type === 'mouseenter' || event.type === 'touchstart') {
				if (this.tooltip_cache === '') {
					this.tooltip_cache += '<code>' + _Template2.default.entities(_Template2.default.renderDroplet(this.props.droplet, this.props.droplet.data, null, false)) + '</code>';

					if (this.props.droplet.guidance) {
						this.tooltip_cache += this.props.droplet.guidance;
					}

					this.tooltip_cache += '<p>' + ('ontouchstart' in window ? 'Tap' : 'Click') + ' on the Droplet to place it in the template.</p>';
				}
			}

			this.props.onEvent(event, this.props.droplet, {
				ref: this.ui.droplet,
				title: this.props.droplet.name,
				content: this.tooltip_cache,
				iconGlyph: _Icon.GLYPHS.LIGHTBULB
			});
		}
	}, {
		key: 'showDescription',
		value: function showDescription() {
			var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

			console.log('showDescription', this.props.droplet.id, show);
		}
	}, {
		key: 'render',
		value: function render() {
			var classes = [this.props.settings.classes.droplet.node, 'type-' + this.props.droplet.dropletType];

			if (this.props.active) {
				classes.push(this.props.settings.classes.droplet.active);
			}

			return _react2.default.createElement(
				'button',
				{
					id: this.props.droplet.id,
					className: classes.join(' '),
					onClick: this.onEvent,
					onMouseEnter: this.onEvent,
					onMouseLeave: this.onEvent,
					onTouchStart: this.onEvent,
					onTouchEnd: this.onEvent,
					ref: this.refCollector.bind(this) },
				_react2.default.createElement(
					'span',
					{ className: 'label' },
					_react2.default.createElement(_Icon.Icon, { glyph: dropletTypeToGlyphs[this.props.droplet.dropletType] }),
					this.props.droplet.name
				)
			);
		}
	}]);

	return DropletComponent;
}(_react.Component);

DropletComponent.propTypes = {
	active: _react.PropTypes.bool,
	settings: _react.PropTypes.object.isRequired,
	lib: _react.PropTypes.object.isRequired,
	refCollector: _react.PropTypes.func.isRequired,
	droplet: _react.PropTypes.instanceOf(_Droplet2.default).isRequired,
	onMount: _react.PropTypes.func,
	onEvent: _react.PropTypes.func
};

exports.default = DropletComponent;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _FormField = __webpack_require__(35);

var _FormField2 = _interopRequireDefault(_FormField);

var _TextField = __webpack_require__(151);

var _TextField2 = _interopRequireDefault(_TextField);

var _DropDown = __webpack_require__(150);

var _DropDown2 = _interopRequireDefault(_DropDown);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FieldComponents = {
	'text': _TextField2.default,
	'dropdown': _DropDown2.default
};

var Fieldset = function (_Component) {
	_inherits(Fieldset, _Component);

	function Fieldset(props) {
		_classCallCheck(this, Fieldset);

		var formValues = {};

		// set default state for fields based on original values
		var _this = _possibleConstructorReturn(this, (Fieldset.__proto__ || Object.getPrototypeOf(Fieldset)).call(this, props));

		_this.props.fields.forEach(function (field) {
			return formValues[field.name] = field.value || '';
		});

		// set default form value state
		_this.state = {
			formValues: formValues
		};

		// bind functions for events
		_this.elementChange = _this.elementChange.bind(_this);
		return _this;
	}

	_createClass(Fieldset, [{
		key: 'collectRef',
		value: function collectRef(key) {
			return function (ref) {
				if (typeof this.props.refCollector === 'function') {
					this.props.refCollector(key, ref);
				}
			}.bind(this);
		}
	}, {
		key: 'fields',
		value: function fields() {
			var _this2 = this;

			var Component,
			    output = [];

			this.props.fields.forEach(function (field) {
				var key = 'field-' + field.name;

				Component = FieldComponents[field.type];

				switch (field.type) {
					case 'text':
						output.push(_react2.default.createElement(Component, { key: key,
							refCollector: _this2.collectRef(key),
							field: field,
							onChange: _this2.elementChange,
							value: _this2.state.formValues[field.name] }));
						break;

					case 'dropdown':
						output.push(_react2.default.createElement(Component, { key: key,
							refCollector: _this2.collectRef(key),
							field: field,
							onChange: _this2.elementChange,
							value: _this2.state.formValues[field.name] }));
				}
			});

			return output;
		}
	}, {
		key: 'elementChange',
		value: function elementChange(event) {
			var target = event.target,
			    formValues = Object.deepAssign({}, this.state.formValues);

			formValues[target.name] = target.value;

			this.setState({
				formValues: formValues
			});

			this.props.onFieldUpdate(this.props.set, target.name, target.value, formValues);
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'fieldset',
				null,
				_react2.default.createElement(
					'legend',
					null,
					this.props.legend
				),
				this.fields()
			);
		}
	}]);

	return Fieldset;
}(_react.Component);

Fieldset.propTypes = {
	refCollector: _react.PropTypes.func,
	set: _react.PropTypes.string.isRequired,
	onFieldUpdate: _react.PropTypes.func.isRequired,
	legend: _react.PropTypes.string,
	fields: _react.PropTypes.arrayOf(_react2.default.PropTypes.instanceOf(_FormField2.default))
};

Fieldset.defaultProps = {
	onFieldUpdate: function onFieldUpdate() {},
	fields: {}
};

exports.default = Fieldset;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _Toolbar = __webpack_require__(147);

var _Toolbar2 = _interopRequireDefault(_Toolbar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Header = function (_Component) {
	_inherits(Header, _Component);

	function Header(props) {
		_classCallCheck(this, Header);

		return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).call(this, props));
	}

	_createClass(Header, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'header',
				null,
				this.props.children,
				_react2.default.createElement(_Toolbar2.default, {
					buttons: this.props.settings.toolbar,
					tour_stage: this.props.tour_stage,
					dialog_mode: this.props.dialog_mode,
					settings: this.props.settings,
					onButtonClick: this.props.onButtonClick,
					lib: this.props.lib })
			);
		}
	}]);

	return Header;
}(_react.Component);

Header.propTypes = {
	// from HeaderContainer
	tour_stage: _react.PropTypes.any,
	dialog_mode: _react.PropTypes.string,

	// from Canvas
	children: _react.PropTypes.node,
	settings: _react.PropTypes.object.isRequired,
	onButtonClick: _react.PropTypes.func,
	lib: _react.PropTypes.object.isRequired
};

exports.default = Header;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _Droplet = __webpack_require__(142);

var _Droplet2 = _interopRequireDefault(_Droplet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Pallet = function (_Component) {
	_inherits(Pallet, _Component);

	function Pallet(props) {
		_classCallCheck(this, Pallet);

		return _possibleConstructorReturn(this, (Pallet.__proto__ || Object.getPrototypeOf(Pallet)).call(this, props));
	}

	_createClass(Pallet, [{
		key: 'getItems',
		value: function getItems() {
			var _this2 = this;

			var items = [];

			if (this.props.data.pallet) {
				this.props.data.pallet.forEach(function (droplet) {
					items.push(_react2.default.createElement(_Droplet2.default, { droplet: droplet,
						active: _this2.props.activeDropletId === droplet.id,
						settings: _this2.props.settings,
						lib: _this2.props.lib,
						onMount: _this2.props.onMount,
						onEvent: _this2.props.onDropletEvent,
						refCollector: _this2.props.refCollector,
						key: droplet.id }));
				});
			}

			return items;
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'section',
				{ className: 'pallet' },
				_react2.default.createElement(
					'form',
					null,
					this.getItems.apply(this)
				)
			);
		}
	}]);

	return Pallet;
}(_react.Component);

Pallet.propTypes = {
	// from PalletContainer
	activeDropletId: _react.PropTypes.string.isRequired,

	// from Canvas
	data: _react.PropTypes.object.isRequired,
	settings: _react.PropTypes.object.isRequired,
	lib: _react.PropTypes.object.isRequired,
	onMount: _react.PropTypes.func,
	onDropletEvent: _react.PropTypes.func.isRequired,
	refCollector: _react.PropTypes.func
};

Pallet.defaultProps = {
	data: {
		pallet: []
	}
};

exports.default = Pallet;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _utils = __webpack_require__(11);

var _DropZone = __webpack_require__(138);

var _DropZone2 = _interopRequireDefault(_DropZone);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Template = function (_Component) {
	_inherits(Template, _Component);

	function Template(props) {
		_classCallCheck(this, Template);

		return _possibleConstructorReturn(this, (Template.__proto__ || Object.getPrototypeOf(Template)).call(this, props));
	}

	_createClass(Template, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			if (typeof this.props.onMount === 'function') {
				this.props.onMount('template');
			}
		}

		/**
   * Uses state (from props.zones) to ascertain the attachments
   */

	}, {
		key: 'getZoneAttachments',
		value: function getZoneAttachments(dropzone_id) {
			if (this.props.zones && this.props.zones[dropzone_id]) {
				return this.props.zones[dropzone_id].attachments;
			} else {
				return [];
			}
		}

		/**
   * @description
   * Computes the correct potential className for the drop zone based on:
   * - The active Droplet ID
   * - Whether or not this drop zone will accept the droplet
   */

	}, {
		key: 'getDropZoneClassNames',
		value: function getDropZoneClassNames(dropzone) {
			var classes = [],
			    droplet;

			if (this.props.activeDropletID !== '' && (droplet = this.props.lib.getDropletById(this.props.activeDropletID))) {
				classes.push(this.props.settings.classes.dropzone.possible_target);
				classes.push(this.props.settings.classes.dropzone[this.props.lib.isValidDrop(droplet, dropzone) ? 'will_accept' : 'will_decline']);

				return classes;
			} else {
				return [];
			}
		}
	}, {
		key: 'getTemplate',
		value: function getTemplate() {
			var _this2 = this;

			var children = [];

			this.props.template.forEach(function (node, index) {
				var key;

				switch (node.type) {
					case 'text':
						key = 'fragment-' + index;

						children.push(_react2.default.createElement(
							'span',
							{
								key: key,
								className: _this2.props.settings.classes.component },
							node.content
						));
						break;

					case 'dropzone':
						children.push(_react2.default.createElement(_DropZone2.default, {
							key: node.zone.id,
							zone: node.zone,
							className: _this2.getDropZoneClassNames(node.zone).join(' '),
							settings: _this2.props.settings,
							activeAttachments: _this2.getZoneAttachments(node.zone.id),
							refCollector: _this2.props.refCollector,
							onMount: _this2.props.onMount,
							onEvent: _this2.props.onDropZoneEvent,
							onAttachmentClick: _this2.props.onAttachmentClick,
							lib: _this2.props.lib }));
						break;
				}
			});

			return children;
		}
	}, {
		key: 'getInstruction',
		value: function getInstruction() {
			if (this.props.activeDropletID != '') {
				return _react2.default.createElement(
					'p',
					{ className: 'instruction' },
					'Choose a target for the droplet...'
				);
			}
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'section',
				{ className: this.props.settings.classes.template.node,
					ref: (0, _utils.collectRef)(this.props, 'template') },
				this.getInstruction(),
				_react2.default.createElement(
					'div',
					{ className: this.props.settings.classes.template.inner },
					_react2.default.createElement(
						'pre',
						null,
						_react2.default.createElement(
							'code',
							{ className: 'html',
								ref: (0, _utils.collectRef)(this.props, 'template_inner') },
							this.getTemplate()
						)
					)
				)
			);
		}
	}]);

	return Template;
}(_react.Component);

Template.propTypes = {
	// from TemplateContainer
	zones: _react.PropTypes.object.isRequired,
	activeDropletID: _react.PropTypes.string,

	// from Canvas
	settings: _react.PropTypes.object.isRequired,
	template: _react.PropTypes.array.isRequired,
	onMount: _react.PropTypes.func.isRequired,
	onAttachmentClick: _react.PropTypes.func.isRequired,
	onDropZoneEvent: _react.PropTypes.func.isRequired,
	refCollector: _react.PropTypes.func.isRequired,
	lib: _react.PropTypes.object.isRequired
};

Template.defaultProps = {
	template: ''
};

exports.default = Template;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _Icon = __webpack_require__(16);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @typedef ToolbarStateSegment
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description
small segment of the App's internal state which includes values relevant to toolbar
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * button production.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @property {object} UI
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @property {object} UI.dialog
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @property {module:assets/constants.dialogModes} UI.dialog.mode - The current mode of the active dialog.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @property {number|null} tour_stage - The current tour stage index. (Or `null`).
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/**
 * A toolbar label function will be invoked with the following arguments:
 * @typedef {function} ToolbarItemLabel
 * @param {ToolbarStateSegment} state - A segment of the current application state.
 */

/**
 * @typedef ToolbarItem
 * @property {ToolbarItemLabel|string} label - The toolbar label. Either a function or a literal string.
 * @property {module:components/views/Icon.GLYPHS} glyph - The icon glyph to use.
 * @property {string} method - The App method to invoke when the buttons is pressed.
 * @property {string} className - Extra class name(s) to apply to the button.
 * @property {boolean} separator=false - Produce a separator to the left of the button.
 */


var Toolbar = function (_Component) {
	_inherits(Toolbar, _Component);

	function Toolbar(props) {
		_classCallCheck(this, Toolbar);

		var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, props));

		_this.buttonRefs = {};
		return _this;
	}

	_createClass(Toolbar, [{
		key: 'registerButtonClick',
		value: function registerButtonClick(button, key) {
			return function (event) {
				var args = button.arguments || [];

				event.preventDefault();

				if (this.buttonRefs && this.buttonRefs[key]) {
					this.buttonRefs[key].blur();
					this.props.onButtonClick(this.buttonRefs[key], event);
				}

				if (typeof button.method === 'string' && this.props.lib.tools[button.method]) {
					// method is a defined App method (as a string)
					this.props.lib.tools[button.method].apply(null, args);
				} else {
					// method is a custom function. call with app context (unless bound elsewhere)
					button.method.apply(null, args);
				}
			}.bind(this);
		}
	}, {
		key: 'registerButtonRef',
		value: function registerButtonRef(key) {
			return function (ref) {
				if (ref !== null) {
					this.buttonRefs[key] = ref;
				}
			}.bind(this);
		}
	}, {
		key: 'getToolbarButtons',
		value: function getToolbarButtons() {
			var _this2 = this;

			var buttons = [];

			if (this.props.buttons && this.props.buttons.length) {
				this.props.buttons.forEach(function (button, index) {
					var key = 'button-' + index,
					    classes = [],
					    icon,
					    label;

					if (button.icon) {
						icon = _react2.default.createElement(_Icon.Icon, { glyph: button.icon,
							width: 14,
							height: 14 });
					}

					if (button.className) {
						classes.push(button.className);
					}

					if (button.separator) {
						classes.push(_this2.props.settings.classes.toolbar.separator);
					}

					if (typeof button.label === 'function') {
						label = button.label({
							UI: {
								dialog: {
									mode: _this2.props.dialog_mode
								},
								tour_stage: _this2.props.tour_stage
							}
						});
					} else {
						label = button.label;
					}

					buttons.push(_react2.default.createElement(
						'li',
						{ key: key,
							className: classes.join(' ') },
						_react2.default.createElement(
							'button',
							{
								className: _this2.props.settings.classes.button,
								ref: _this2.registerButtonRef(key),
								onClick: _this2.registerButtonClick(button, key) },
							_react2.default.createElement(
								'span',
								null,
								icon,
								label,
								_react2.default.createElement('span', { className: 'circle' })
							)
						)
					));
				});

				return buttons;
			}
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'menu',
				{ className: 'toolbar' },
				_react2.default.createElement(
					'form',
					null,
					_react2.default.createElement(
						'ul',
						null,
						this.getToolbarButtons()
					)
				)
			);
		}
	}]);

	return Toolbar;
}(_react.Component);

Toolbar.propTypes = {
	buttons: _react.PropTypes.arrayOf(_react.PropTypes.object),
	tour_stage: _react.PropTypes.any,
	dialog_mode: _react.PropTypes.string,
	settings: _react.PropTypes.object.isRequired,
	onButtonClick: _react.PropTypes.func,
	lib: _react.PropTypes.object.isRequired
};

exports.default = Toolbar;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _Icon = __webpack_require__(16);

var _utils = __webpack_require__(11);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tooltip = function (_Component) {
	_inherits(Tooltip, _Component);

	function Tooltip(props) {
		_classCallCheck(this, Tooltip);

		var _this = _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(this, props));

		_this.popper = null;
		_this.ui = {
			tooltip: null
		};
		return _this;
	}

	_createClass(Tooltip, [{
		key: 'refCollector',
		value: function refCollector(ref) {
			this.ui.tooltip = ref;
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.updateAttachment();
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			this.updateAttachment();
		}
	}, {
		key: 'updateAttachment',
		value: function updateAttachment() {
			var options;

			if (this.props.state.show) {
				// merge default options with those assigned via the state change
				options = Object.deepAssign({}, {
					placement: 'top',
					modifiers: {
						flip: ['top', 'bottom'],
						arrow: {
							element: '.arrow'
						}
					}
				}, this.props.state.options);

				this.popper = this.props.attacher(this.props.state.attachment, this.ui.tooltip, options);
			} else {
				if (this.popper) {
					this.popper.destroy();
					this.popper = null;
				}
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var classes, icon;

			classes = [this.props.settings.classes.popup, this.props.settings.classes.tooltip];

			if (!this.props.state.show) {
				classes.push(this.props.settings.classes.hidden);
			} else {
				if (this.props.state.iconGlyph) {
					icon = _react2.default.createElement(_Icon.Icon, { glyph: this.props.state.iconGlyph });
				}
			}

			return _react2.default.createElement(
				'div',
				{
					ref: this.refCollector.bind(this),
					className: classes.join(' ') },
				_react2.default.createElement(
					'div',
					{ className: 'content' },
					_react2.default.createElement(
						'h2',
						null,
						icon,
						_react2.default.createElement(
							'span',
							null,
							this.props.state.title
						)
					),
					_react2.default.createElement('div', { dangerouslySetInnerHTML: (0, _utils.rawMarkup)(this.props.state.content) })
				),
				_react2.default.createElement('span', { className: 'arrow' })
			);
		}
	}]);

	return Tooltip;
}(_react.Component);

Tooltip.propTypes = {
	settings: _react.PropTypes.object.isRequired,
	attacher: _react.PropTypes.func.isRequired,
	state: _react.PropTypes.object.isRequired
};

exports.default = Tooltip;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _utils = __webpack_require__(11);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var View = function (_Component) {
	_inherits(View, _Component);

	function View(props) {
		_classCallCheck(this, View);

		return _possibleConstructorReturn(this, (View.__proto__ || Object.getPrototypeOf(View)).call(this, props));
	}

	_createClass(View, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			if (typeof this.props.onMount === 'function') {
				this.props.onMount('view_frame');
			}
		}
	}, {
		key: 'shouldComponentUpdate',
		value: function shouldComponentUpdate() {
			// no. reloads/updates are handled by the view class
			return false;
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'section',
				{ className: 'view',
					ref: (0, _utils.collectRef)(this.props, 'view') },
				_react2.default.createElement('div', { className: 'drag-mask' }),
				_react2.default.createElement('iframe', { ref: (0, _utils.collectRef)(this.props, 'view_frame'),
					src: this.props.settings.view.src })
			);
		}
	}]);

	return View;
}(_react.Component);

View.propTypes = {
	settings: _react.PropTypes.object,
	onMount: _react.PropTypes.func,
	refCollector: _react.PropTypes.func
};

exports.default = View;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _commonPropTypes = __webpack_require__(34);

var _componentUtils = __webpack_require__(126);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function DropDown(props) {
	var label = props.field.label || props.field.name;

	return _react2.default.createElement(
		'div',
		{ className: 'field' },
		_react2.default.createElement(
			'label',
			null,
			label
		),
		_react2.default.createElement(
			'select',
			{
				type: 'text',
				name: props.field.name,
				onChange: props.onChange,
				value: props.value,
				ref: props.refCollector },
			(0, _componentUtils.optionValueSet)(props.field.options)
		)
	);
}

DropDown.propTypes = _commonPropTypes.field;

exports.default = DropDown;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _commonPropTypes = __webpack_require__(34);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TextField(props) {
	var label = props.field.label || props.field.name;

	return _react2.default.createElement(
		'div',
		{ className: 'field' },
		_react2.default.createElement(
			'label',
			null,
			label
		),
		_react2.default.createElement('input', {
			type: 'text',
			name: props.field.name,
			placeholder: props.field.placeholder,
			onChange: props.onChange,
			maxLength: props.field.data.maxlength,
			value: props.value,
			ref: props.refCollector })
	);
}

TextField.propTypes = _commonPropTypes.field;

exports.default = TextField;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _interact = __webpack_require__(69);

var _interact2 = _interopRequireDefault(_interact);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.interact = _interact2.default;

/**
 * Handles draggable/droppable items.
 * @class
 */
var DragDrop = function DragDrop(canvas, settings) {
	var callbacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	this._canvas = canvas;
	this.settings = settings;
	this._callbacks = callbacks;

	this.ui = {
		drag: [],
		drop: []
	};
};

DragDrop.prototype = {
	addDragable: function addDragable(element) {
		var _this = this;

		var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

		var dragable = new Dragable(element);

		// duplicate settings
		settings = Object.assign({}, settings);

		// make the element draggable
		dragable.setDragable(settings).on('dragstart', function () {
			_this._canvas.classList.add(_this.settings.classes.is_dragging);
			element.classList.add(_this.settings.classes.item_dragging);
		}).on('dragend', function () {
			_this._canvas.classList.remove(_this.settings.classes.is_dragging);
			element.classList.remove(_this.settings.classes.item_dragging);

			if (typeof _this._callbacks.dragEnd === 'function') {
				_this._callbacks.dragEnd(element, data);
			}
		});

		this.ui.drag.push(this._createInstance(element, dragable));
	},

	addDropable: function addDropable(element) {
		var _this2 = this;

		var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

		var dropable = new Dropable(element);

		dropable.setDropable(settings).on('dropactivate', function (event) {
			// add active dropzone feedback
			event.target.classList.add(_this2.settings.classes.dropzone_is_active);
		}).on('dragenter', function (event) {
			// feedback the possibility of a drop
			event.target.classList.add(_this2.settings.classes.dropzone_is_target);
			// event.relatedTarget.classList.add('can-drop');
			// event.relatedTarget.textContent = 'Dragged in';
		}).on('dragleave', function (event) {
			// remove the drop feedback style
			event.target.classList.remove(_this2.settings.classes.dropzone_is_target);
			// event.relatedTarget.classList.remove('can-drop');
			// event.relatedTarget.textContent = 'Dragged out';
		}).on('drop', function (event) {
			if (typeof _this2._callbacks.drop === 'function') {
				_this2._callbacks.drop(event.relatedTarget, event.target, data);
			}
		}).on('dropdeactivate', function (event) {
			// remove active dropzone feedback
			event.target.classList.remove(_this2.settings.classes.dropzone_is_active);
			event.target.classList.remove(_this2.settings.classes.dropzone_is_target);
		});

		this.ui.drop.push(this._createInstance(element, dropable));
	},

	resetDragPosition: function resetDragPosition(element) {
		if (element = this.getDragInstance(element)) {
			element.instance.resetPosition();
		}
	},

	getDragInstance: function getDragInstance(element) {
		return this.ui.drag.find(function (item) {
			return item.element === element;
		});
	},

	_createInstance: function _createInstance(element, instance) {
		return {
			element: element,
			instance: instance
		};
	}
};

/*
 * Generically handles the dragging and dropping of individual DOM nodes.
 * Uses interact.js (http://interactjs.io)
 */
var Dragable = function Dragable(element) {
	this._element = element;

	this._x = 0;
	this._y = 0;
};

Dragable.prototype = {
	/**
  * Set up a draggable item.
  */
	setDragable: function setDragable(settings) {
		var _this3 = this;

		return (0, _interact2.default)(this._element).draggable(settings).on('dragmove', settings.onDragMove || function (event) {
			_this3._x += event.dx;
			_this3._y += event.dy;

			_this3._element.style.webkitTransform = _this3._element.style.transform = 'translate(' + _this3._x + 'px, ' + _this3._y + 'px)';
		});
	},

	resetPosition: function resetPosition() {
		this._x = 0;
		this._y = 0;

		this._element.style.webkitTransform = this._element.style.transform = 'translate(0, 0)';
	}
};

/*
 * Generically handles drop zones in the DOM.
 * Uses interact.js (http://interactjs.io)
 */
var Dropable = function Dropable(element) {
	this._element = element;
};

Dropable.prototype = {
	/**
  * Set up a draggable item.
  */
	setDropable: function setDropable(settings) {
		return (0, _interact2.default)(this._element).dropzone(settings);
	}
};

exports.default = DragDrop;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Takes multiple functions and returns a function which invokes them consecutively
 * with the same argument signature: (prop) `value`, `propname`, `droplet_name`, `droplet_type`.
 */
function chain() {
	var args = Array.prototype.slice.call(arguments);

	return function (value, propname, droplet_name, droplet_type) {
		var _this = this;

		var test = true;

		// run each function in the chain
		args.forEach(function (fn) {
			if (!fn.apply(_this, [value, propname, droplet_name, droplet_type])) {
				test = false;
			}
		});

		return test;
	};
}

/**
 * Asserts the `test` value is truthy. In the case that it fails, an Error is thrown.
 * @param {boolean} test - Test expression result
 * @param {string} propname - The name of the property being tested
 * @param {string} message - The message, in case of failure. Will be appended to a general
 * error message.
 * @param {string} [droplet_name] - The name of the Droplet being tested
 * @param {string} [toplet_type] - The dropletType attribute of the Droplet being tested
 */
function assert(test, propname, message, droplet_name, droplet_type) {
	var error, prop_id;

	if (!test) {
		if (droplet_name) {
			prop_id = '"' + droplet_name + '"' + (droplet_type ? ' (' + droplet_type + ')' : '');
		}

		error = 'Error in Droplet' + (prop_id ? ' ' + prop_id + ' ' : ' ') + 'prop "' + propname + '". ' + message;
		throw new Error(error);
	} else {
		return true;
	}
}

function isRequired(value, prop, droplet_name, droplet_type) {
	return assert(typeof value !== 'undefined', prop, 'Value is required.', droplet_name, droplet_type);
}

function stringNotEmpty(value, prop, droplet_name, droplet_type) {
	return assert(typeof value !== 'undefined' && value !== '', prop, 'Value cannot be empty.', droplet_name, droplet_type);
}

function string(value, prop, droplet_name, droplet_type) {
	return assert(typeof value === 'undefined' || typeof value === 'string', prop, 'Value must be a string.', droplet_name, droplet_type);
}

string.isRequired = chain(string, isRequired);
string.notEmpty = chain(string, stringNotEmpty);
string.notEmpty.isRequired = chain(string, stringNotEmpty, isRequired);

function object(value, prop, droplet_name, droplet_type) {
	return assert(typeof value === 'undefined' || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object', prop, 'Value must be an object.', droplet_name, droplet_type);
}

object.isRequired = chain(object, isRequired);

function array(value, prop, droplet_name, droplet_type) {
	return assert(Array.isArray(value), prop, 'Value must be an array.', droplet_name, droplet_type);
}

array.isRequired = chain(array, isRequired);

function arrayOf() {}

arrayOf.string = chain(
// test for an array
array,
// test array values are all strings
function (value, prop, droplet_name, droplet_type) {
	var test = true,
	    a;

	for (a = 0; a < value.length; a += 1) {
		test = test ? typeof value[a] === 'string' : test;
	}

	return assert(test, prop, 'Value must be an array containing only strings', droplet_name, droplet_type);
});

arrayOf.string.isRequired = chain(arrayOf.string, isRequired);

exports.default = {
	_chain: chain,
	_assert: assert,
	string: string,
	object: object,
	array: array,
	arrayOf: arrayOf,
	isRequired: isRequired,
	stringNotEmpty: stringNotEmpty
};

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _constants = __webpack_require__(8);

var _actions = __webpack_require__(37);

var _actions2 = _interopRequireDefault(_actions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Handle production of tour dialogs.
 * @param {UI} parent - Parent UI class instance.
 * @class
 */
var Tour = function Tour(parent) {
	this._parent = parent;
};

Tour.prototype = {
	/**
  * Produce the tour introduction.
  */
	intro: function intro() {
		return this._parent._showDialog(_constants.dialogModes.GENERAL, this._parent.dialogs.intro).then(this._parent._hideDialog.bind(this._parent));
	},

	/**
  * Starts the tour (but will continue if paused).
  */
	start: function start() {
		return this._progressTour();
	},

	/**
  * Starts or progreses the tour (by one dialog).
  * @private
  */
	_progressTour: function _progressTour() {
		var _this = this;

		var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

		var state;

		// get next tour item from state or default
		if (index === null) {
			state = this._parent._store.getState().UI;
			index = state.tour_stage !== null ? state.tour_stage + 1 : 0;
		}

		if (this._parent.dialogs.tour.length - 1 >= index) {
			this._setTourStage(index);
			return this._showTourElement(index).then(function (dialog) {
				_this._parent._hideDialog();

				// if action is pause, will pause the tour by doing nothing
				if (dialog.action === 'cancel') {
					// end the tour
					_this._setTourStage(null);
				} else if (dialog.action !== 'pause') {
					// progress the tour
					_this._progressTour(index + 1);
				}
			});
		} else {
			// end of tour - set stage to null and hide dialog
			this._setTourStage(null);
			return this._parent._hideDialog();
		}
	},

	/**
  * Show a specific indexed element of the tour.
  * @private
  */
	_showTourElement: function _showTourElement(index) {
		return this._parent._showDialog(_constants.dialogModes.TOUR, this._parent.dialogs.tour[index]);
	},


	/**
  * Set the tour stage index (using Redux).
  * @private
  */
	_setTourStage: function _setTourStage(stage) {
		this._parent._store.dispatch(_actions2.default.setTourStage(stage));
	}
};

exports.default = Tour;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(72);

var _reactRedux = __webpack_require__(15);

var _popper = __webpack_require__(70);

var _popper2 = _interopRequireDefault(_popper);

var _DragDrop = __webpack_require__(152);

var _DragDrop2 = _interopRequireDefault(_DragDrop);

var _Communicator = __webpack_require__(47);

var _Communicator2 = _interopRequireDefault(_Communicator);

var _Tour = __webpack_require__(154);

var _Tour2 = _interopRequireDefault(_Tour);

var _Template = __webpack_require__(36);

var _Template2 = _interopRequireDefault(_Template);

var _Icon = __webpack_require__(16);

var _CanvasContainer = __webpack_require__(128);

var _CanvasContainer2 = _interopRequireDefault(_CanvasContainer);

var _actions = __webpack_require__(37);

var _actions2 = _interopRequireDefault(_actions);

var _dialogs = __webpack_require__(77);

var _dialogs2 = _interopRequireDefault(_dialogs);

var _constants = __webpack_require__(8);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Handles User Interface components and acts as the main controller.
 * @class
 */
var UI = function UI(parent, settings, refs, data, store, template) {
	/**
  * @private
  */
	this._parent = parent;

	/**
  * Settings as defined when instantiating. Inherits from {@link App.defaults}
  */
	this.settings = settings;

	/**
  * @private
  */
	this._refs = refs;

	/**
  * @private
  */
	this._data = data;

	/**
  * @private
  */
	this._store = store;

	/**
  * @private
  */
	this._template = template;

	/**
  * Dialog objects for use with {@link App#dialog}
  */
	this.dialogs = (0, _dialogs2.default)(settings);

	// UI class specific data entries
	this._data.UI = {
		dragdrop: {
			// droplets dragdrop class instance
			droplets: {}
		},

		// the current viewport width
		vp_width: 0,

		// the drag handle position
		dragHandlePosition: 0,

		// has the drag handle been moved?
		dragHandleMoved: false
	};

	this._comms = new _Communicator2.default('app', window.location.origin, {
		message: this._handleAppMessage.bind(this)
	});

	this._tour = new _Tour2.default(this);

	// set up library methods for passing to React components
	this.libraryMethods = {
		getDropletById: this.getDropletById.bind(this),
		setUIPopperAttachment: this._setUIPopperAttachment.bind(this),
		zoneDetachAttachment: this.zoneDetachAttachment.bind(this),
		zoneGetAttachment: this.zoneGetAttachment.bind(this),
		isValidDrop: this._isValidDrop.bind(this),
		tools: {
			dialog: this._parent.dialog.bind(this._parent),
			hideDialog: this._hideDialog.bind(this),
			startTour: this._tour.start.bind(this._tour),
			reset: this._parent.reset.bind(this._parent),
			updateView: this._updateView.bind(this)
		}
	};

	// perform bindings for methods commonly used within promises
	this._hideDialog = this._hideDialog.bind(this);
	this._showDialog = this._showDialog.bind(this);

	// show introduction (or not)
	if (this.settings.showIntro) {
		this._tour.intro();
	}

	// general queues
	this.queues = {
		dragdropBindings: []
	};

	window.addEventListener('resize', this._handleWindowResize.bind(this));
}; /**
    * @typedef DialogData
    * @property {string} title - The title of the dialog.
    * @property {array|string} message - Either a single string or an array of strings, defining
    * each paragraph of the dialog message. Basic HTML is allowed.
    * @property {FormButton[]|undefined} buttons - An array of FormButton buttons, or leave undefined
    * to use the default "OK" button.
    */


UI.prototype = {
	/**
  * Sends render() call to the React canvas.
  * @private
  */
	render: function render() {
		this._canvas = (0, _reactDom.render)(_react2.default.createElement(
			_reactRedux.Provider,
			{ store: this._store },
			_react2.default.createElement(_CanvasContainer2.default, {
				data: this._data,
				settings: this.settings,
				refCollector: this._refCollector.bind(this),
				onMount: this._mountEvent.bind(this),
				onAttachmentClick: this._handleAttachmentClick.bind(this),
				onDropletEvent: this._handleDropletEvent.bind(this),
				onDropZoneEvent: this._handleDropZoneEvent.bind(this),
				onDragHandleEvent: this._handleDragHandleEvent.bind(this),
				onButtonClick: this._handleButtonClick.bind(this),
				lib: this.libraryMethods })
		), this._refs.ui.app);
	},

	/**
  * Handles messages sent via the Communicator class (mainly from the View class).
  * @param {object} message - Data, as sent by the originator
  * @param {string} id - Message ID.
  * @private
  */
	_handleAppMessage: function _handleAppMessage(message, id) {
		switch (message.cmd) {
			case 'dialog':
				// a dialog is being requested
				this._showCommunicatorDialog(message.data.title, message.data.message, message.data.buttons, id);
				break;
		}
	},

	/**
  * @param {string} mode - One of the dialogModes modes.
  * @param {DialogData} data - Relevant data to store for the dialog to use.
  * @returns {DialogPromise} a Promise which will resolve with the dialog results.
  * @description
  *	Displays a dialog element. In this case that no callbacks (`onDialogComplete` or
  * `onDialogCancel` are defined, a Promise is returned, the resolve/reject methods
  * of which denote completion or cancellation of the dialog.
  * @private
  */
	_showDialog: function _showDialog(mode, data) {
		var _this = this;

		return new Promise(function (resolve) {
			_this._store.dispatch(_actions2.default.setDialogMode(mode, data, function (data, action, action_data) {
				resolve({ data: data, action: action, action_data: action_data });
			}, function () {
				resolve({ action: 'cancel' });
			}));
		});
	},

	/**
  * @description
  * Hides the dialog (after a short timeout) - uses state comparison to ensure
  * the dialog being hidden isn't a new one.
  * @private
  */
	_hideDialog: function _hideDialog() {
		var state = this._store.getState().UI.dialog;

		window.setTimeout(function () {
			var inner_state = this._store.getState().UI.dialog;

			if (state.id === inner_state.id) {
				// still the same dialog - close it
				this._store.dispatch(_actions2.default.setDialogMode(_constants.dialogModes.NONE));
			}
		}.bind(this), 300);
	},

	_showCommunicatorDialog: function _showCommunicatorDialog(title, message, buttons, comms_id) {
		var _this2 = this;

		this._showDialog(_constants.dialogModes.GENERAL, {
			title: title,
			message: message,
			buttons: buttons
		}).then(function (dialog) {
			_this2._hideDialog();

			if (dialog) {
				// submit/custom callback
				_this2._comms.send('view', {
					cmd: _constants.messageCommands.DIALOG_CALLBACK,
					data: dialog.data,
					action: dialog.action,
					action_data: dialog.action_data
				}, comms_id);
			} else {
				// cancel callback
				_this2._comms.send('view', {
					cmd: _constants.messageCommands.DIALOG_CALLBACK
				}, comms_id);
			}
		});
	},


	/**
  * @param {string} collection - The element's collection name.
  * @param {HTMLElement} element - The element being collected.
  * @param {string} key - The collection's key name.
  * Element reference collector. Collects DOM elements from React components.
  * Bind an element reference using the ref attribute and collectRef from utils.js
  * @private
  */
	_refCollector: function _refCollector(collection, element, key) {
		if (element !== null) {
			if (typeof key === 'string') {
				if (typeof this._refs.components[collection] === 'undefined') {
					this._refs.components[collection] = {};
				}

				this._refs.components[collection][key] = element;
			} else {
				this._refs.components[collection] = element;
			}
		}
	},

	/**
  * @param {string} collection - The element's collection name.
  * @param {string} key - The collection's key name.
  * @description
  * Captures mount events from React components by collection/key identifiers.
  * Identifiers are the same as the ones stored with App#_refCollector
  * @private
  */
	_mountEvent: function _mountEvent(collection, key) {
		if (this._getReferencedElement(collection, key)) {
			// valid component mounted
			switch (collection) {
				case 'canvas':
					// add drag binding for the drag handle
					this._queueDragDropBinding('drag', 'drag_handle', null, {
						onDragMove: this._handleDragHandleEvent.bind(this)
					});

					// process all drag/drop bindings
					this._setDragDropBindings();
					this._refs.mounted.canvas = true;
					break;

				case 'template':
					// this._queueDragDropBinding('drop', collection, key);
					this._refs.mounted.template = true;
					break;

				case 'droplet':
					// this._queueDragDropBinding('drag', collection, key);
					break;

				case 'dropzone':
					// this._queueDragDropBinding('drop', 'dropzone_target', key);
					break;

				case 'view_frame':
					this._comms.registerGuestAddress('view', this._refs.components[collection].contentWindow);

					this._refs.mounted.view_frame = true;
			}

			if (this._refs.mounted.canvas && this._refs.mounted.template && this._refs.mounted.view_frame) {
				// all required refs mounted - set active
				this._store.dispatch(_actions2.default.setUIState(_constants.uiStates.ACTIVE));

				// run initial size calculations
				this._handleWindowResize();
			}
		} else {
			throw new Error('Component mount event called but ref was not collected. ' + 'component: ' + collection + (key ? '/' + key : ''));
		}
	},

	/**
  * @param {string} type - Either 'drag' or 'drop'.
  * @param {string} collection - The ref collection.
  * @param {string} key - The ref key, within the collection.
  * @param {ojbect} settings - The settings for the interaction.
  * @description
  * Queues a drag/drop DOM binding till the mount event for the Canvas component.
  * This is done because the canvas is relied upon as the container for dragging.
  * @private
  */
	_queueDragDropBinding: function _queueDragDropBinding(type, collection, key, settings) {
		if (this._refs.components.canvas) {
			// canvas already exists - immediately bind
			this._setDragDropBindings([{ type: type, collection: collection, key: key, settings: settings }]);
		} else {
			// push to queue
			this.queues.dragdropBindings.push({ type: type, collection: collection, key: key, settings: settings });
		}
	},

	/**
  * Processes queued up drag/drop bindings created by UI#_queueDragDropBindings.
  * @param {array} [queue] - The bindings queue.
  * @private
  */
	_setDragDropBindings: function _setDragDropBindings() {
		var _this3 = this;

		var queue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.queues.dragdropBindings;

		// bind dragDrop handlers to the elements in the queue
		this._data.UI.dragdrop.droplets = new _DragDrop2.default(this._refs.components.canvas, this.settings, {
			drop: this._handleDropletDrop.bind(this),
			dragEnd: function dragEnd(element) {
				_this3._data.UI.dragdrop.droplets.resetDragPosition(element);
			}
		});

		queue.forEach(function (item) {
			var ref = _this3._getReferencedElement(item.collection, item.key),
			    data;

			if (item.collection === 'dropzone_target') {
				data = {
					zone_id: item.key
				};
			}

			// create a DragDrop instance and assign to the pallet item data
			if (item.type === 'drag') {
				_this3._data.UI.dragdrop.droplets.addDragable(ref, item.settings, data);
			} else if (item.type === 'drop') {
				_this3._data.UI.dragdrop.droplets.addDropable(ref, Object.deepAssign({}, {
					accept: _this3.settings.selectors.droplet
				}, item.settings), data);
			}
		});
	},

	/**
  * Handles drops of droplets into drop zones. Will attach to the zone
  * if the drop is valid.
  * @param {HTMLElement} element - The element being dragged.
  * @param {HTMLElement} target - The target being dropped onto.
  * @param {object} data - data object, as set with addDragable/addDropable.
  * @private
  */
	_handleDropletDrop: function _handleDropletDrop(element, target, data) {
		var drop_zone = this.getDropZoneById(data.zone_id),
		    droplet = this.getDropletById(element.id);

		return this.attachDropletToDropZone(droplet, drop_zone);
	},

	/**
  * Handle a click on a Drop Zone attachment item. May produce an editor window.
  * @param {Droplet} droplet - The Droplet.
  * @param {DropZone} drop_zone - The Drop Zone.
  * @param {number} attachment_index - The Drop Zone's attachment index, if it applies.
  * @private
  */
	_handleAttachmentClick: function _handleAttachmentClick(droplet, drop_zone, attachment_index) {
		var _this4 = this;

		var state = this._store.getState();

		if (state.UI.active_droplet_id === '') {
			// only allow editing if there is no droplet placement occuring
			this._showDialog(_constants.dialogModes.EDIT_DROPLET, {
				droplet_id: droplet.id,
				zone_id: drop_zone.id,
				attachment_index: attachment_index
			}).then(function (dialog) {
				_this4._hideDialog();

				if (dialog.action === 'remove_droplet') {
					_this4.zoneDetachAttachment(dialog.action_data.zone_id, dialog.action_data.attachment_index);
				} else if (dialog.action !== 'cancel') {
					_this4._commitDropletIntoDropZone.apply(_this4, [dialog.data]);
				}
			}.bind(this));
		}
	},

	/**
  * Handles events being fired from a Droplet
  * @param {ReactEvent} event - The event object.
  * @param {Droplet} droplet - The Droplet.
  * @private
  */
	_handleDropletEvent: function _handleDropletEvent(event, droplet) {
		var state;

		if (event.type === 'click') {
			state = this._store.getState();

			if (state.UI.active_droplet_id !== droplet.id) {
				this._store.dispatch(_actions2.default.setActiveDroplet(droplet.id));
			} else {
				this._store.dispatch(_actions2.default.setActiveDroplet(''));
			}
		}
	},

	/**
  * Handles events being fired from a Drop Zone.
  * @param {ReactEvent} event - The event object.
  * @param {DropZone} drop_zone - The Drop Zone.
  * @private
  */
	_handleDropZoneEvent: function _handleDropZoneEvent(event, drop_zone) {
		var state = this._store.getState(),
		    droplet;

		if (event.type === 'click' && state.UI.active_droplet_id !== '' && (droplet = this.getDropletById(state.UI.active_droplet_id))) {
			this.attachDropletToDropZone(droplet, drop_zone);
		}
	},

	/**
  * Handles events from the drag handle (between template and view containers).
  * @param {ReactEvent} event - The event object.
  * @private
  */
	_handleDragHandleEvent: function _handleDragHandleEvent(event) {
		var width;

		switch (event.type) {
			case 'mouseenter':
			case 'mouseleave':
				if (!this._data.UI.dragHandleMoved) {
					if (event.type === 'mouseenter') {
						this._store.dispatch(_actions2.default.setTooltipContent('Drag handle', '<b>Drag</b> this handle to resize the template and the view.' + ' <b>Press</b> to toggle the full page view.', _Icon.GLYPHS.RESIZE_WIDTH));
						this._store.dispatch(_actions2.default.showTooltip(this._getReferencedElement('drag_handle'), {
							placement: 'left',
							modifiers: {
								flip: ['left', 'right']
							}
						}));
					} else {
						this._store.dispatch(_actions2.default.hideTooltip());
					}
				}
				break;

			case 'dragmove':
				// incrememt dragHandlePosition based on x delta from interact instance
				this._data.UI.dragHandlePosition += event.dx;

				if (!this._data.UI.dragHandleMoved) {
					// remove the tooltip, in case it's still around
					this._data.UI.dragHandleMoved = true;
					this._store.dispatch(_actions2.default.hideTooltip());
				}

				// figure out handle position in % of the screen and convert it to percent,
				// then send straight to _setTemplateViewRatio function
				this._setTemplateViewRatio((this._data.UI.drag_handle_x + this._data.UI.dragHandlePosition) / this._data.UI.vp_width * 100);

				break;

			case 'mouseup':
			case 'touchend':
				if (this._data.UI.dragHandlePosition < 5 && this._data.UI.dragHandlePosition > -5) {
					// little movement - assume a click/tap occured
					width = this._getReferencedElement('drag_handle').offsetWidth;

					if (this._data.UI.drag_handle_x < width) {
						// set to 50/50
						this._setTemplateViewRatio(50);
					} else {
						// set to 0/100
						this._setTemplateViewRatio(0);
					}
				}

				// update metrics whenever we're stopping
				this._handleWindowResize();

				break;
		}
	},

	/**
  * Updates various metrics when the window has been resized
  * @private
  */
	_handleWindowResize: function _handleWindowResize() {
		this._data.UI.drag_handle_x = this._getReferencedElement('drag_handle').offsetLeft;
		this._data.UI.vp_width = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);

		// reset dragHandlePosition because the metrics have changed
		this._data.UI.dragHandlePosition = 0;
	},

	/**
  * Generically handles the click of any button within the UI.
  * @param {HTMLElement} button - The button being clicked.
  * @param {ReactEvent} event - The event object.
  */
	_handleButtonClick: function _handleButtonClick(button, event) {
		var offset = {},
		    rect,
		    circle;

		if (button && event && event.pageX && event.pageY && (circle = button.querySelector(this.settings.selectors.button_circle))) {
			// get metrics and offset by scroll
			rect = button.getBoundingClientRect();
			rect.leftScrolled = rect.left + window.pageXOffset;
			rect.topScrolled = rect.top + window.pageYOffset;

			// calculate cursor offset on the button
			offset.left = event.pageX - (rect.left + window.pageXOffset);
			offset.top = event.pageY - (rect.top + window.pageYOffset);

			// position the circle based on the pointer position on the button
			circle.classList.remove(this.settings.classes.button_animate);
			circle.style.left = offset.left - circle.offsetWidth / 2 + 'px';
			circle.style.top = offset.top - circle.offsetHeight / 2 + 'px';
			circle.classList.add(this.settings.classes.button_animate);
		}
	},

	/**
  * @param {number} ratio - % ratio for the template
  * @description
  * Sets the template/view ratio by giving the template container a % width and
  * adjusting the view container accordingly.
  * @private
  */
	_setTemplateViewRatio: function _setTemplateViewRatio(ratio) {
		this._refs.components.template.style.flexBasis = ratio + '%';
		this._refs.components.view.style.flexBasis = Math.abs(ratio - 100) + '%';
	},

	/**
  * Checks to see if a Droplet drop on a Drop Zone is valid. I.e. it can be dropped.
  * @param {Droplet} droplet - The Droplet being dropped.
  * @param {DropZone} drop_zone - The Drop Zone being dropped into.
  * @private
  */
	_isValidDrop: function _isValidDrop(droplet, drop_zone) {
		return drop_zone.willAccept(droplet, this._store);
	},

	/**
  * Optionally displays an editing dialog and then attaches the Droplet to a Drop Zone.
  * @param {Droplet} droplet - The Droplet to attach
  * @param {DropZone} drop_zone - The Drop Zone to attach it to.
  */
	attachDropletToDropZone: function attachDropletToDropZone(droplet, drop_zone) {
		var _this5 = this;

		// clear active droplet
		this._store.dispatch(_actions2.default.setActiveDroplet(''));

		// check if valid drop
		if (this._isValidDrop(droplet, drop_zone)) {
			if (droplet.editable) {
				// show edit dialog before adding the attachment
				this._showDialog(_constants.dialogModes.EDIT_DROPLET, {
					droplet_id: droplet.id,
					zone_id: drop_zone.id,
					attachment_index: null
				}).then(function (dialog) {
					_this5._hideDialog();

					if (dialog.action === 'submit') {
						_this5._commitDropletIntoDropZone.apply(_this5, [dialog.data]);
						_this5._postDropletAttachment(droplet, dialog.data);
					}
				});
			} else {
				// add attachment without dialog
				this.zoneAddAttachment(drop_zone.id, droplet.id, droplet.data);

				this._postDropletAttachment(droplet, droplet.data);
			}

			return true;
		} else {
			if (this.settings.dropZone.warnOnBadPlacement) {
				this._showDialog(_constants.dialogModes.GENERAL, this.dialogs.dropletBadPlacement).then(this._hideDialog);
			}

			return false;
		}
	},

	/**
  * Perform actions after Droplet attachment.
  * @param {Droplet} droplet - The Droplet instance.
  * @param {object} data - The Droplet data to be set into the Drop Zone.
  * @private
  */
	_postDropletAttachment: function _postDropletAttachment(droplet, data) {
		var state = this._store.getState(),
		    keys = Object.keys(state.zones),
		    notice = false,
		    key,
		    droplet_output;

		// should we display a "first droplet" notice?
		if (this.settings.dropZone.noticeOnFirstPlacement && !state.app.first_valid_drop && keys.length > 0) {
			// set first droplet state
			this._store.dispatch(_actions2.default.completeFirstDrop());

			// format the droplet for display
			droplet_output = _Template2.default.entities(_Template2.default.renderDroplet(droplet, Object.deepAssign({}, droplet.data, data), null, false));

			// show dialog
			this._showDialog(_constants.dialogModes.GENERAL, this.dialogs.firstDropletDrop(droplet_output)).then(this._hideDialog);
		}

		// should we display a "last droplet" notice?
		if (this.settings.dropZone.noticeOnLastPlacement && !state.app.last_valid_drop && keys.length === this._data.pallet.length) {
			notice = true;

			// check zones all have placements
			for (key in state.zones) {
				if (state.zones[key].attachments.length === 0) {
					notice = false;
					break;
				}
			}

			if (notice) {
				// show set last drop state
				this._store.dispatch(_actions2.default.completeLastDrop());

				// show dialog
				this._showDialog(_constants.dialogModes.GENERAL, this.dialogs.lastDropletDrop).then(this._hideDialog);
			}
		}
	},

	/**
  * @param {object} data - The Droplet data to be set into the Drop Zone.
  * @description
  * Called after editing dialog has been completed, either adds a new
  * Drop Zone attachment or edits an existing one.
  * @private
  */
	_commitDropletIntoDropZone: function _commitDropletIntoDropZone(data) {
		var dialog = this._store.getState().UI.dialog;

		// reset dialog state to nothing
		this._hideDialog();

		// droplet being edited prior to or during attatchment
		if (dialog.data.attachment_index === null) {
			// no attachment index - this is a new drop
			this.zoneAddAttachment(dialog.data.zone_id, dialog.data.droplet_id, data);
		} else {
			this.zoneEditAttachment(dialog.data.zone_id, dialog.data.attachment_index, data);
		}
	},

	/**
  * Adds a Drop Zone attachment.
  * @param {string} zone_id - The Drop Zone ID.
  * @param {string} droplet_id - The Droplet ID.
  * @param {object} data - The droplet data to be set into the Drop Zone.
  */
	zoneAddAttachment: function zoneAddAttachment(zone_id, droplet_id, data) {
		this._store.dispatch(_actions2.default.zoneAddAttachment(zone_id, droplet_id, true, data));

		if (this.settings.view.autoUpdate) {
			this._updateView();
		}
	},

	/**
  * Edits an existing Drop Zone attachment at `attachment_index` index.
  * @param {string} zone_id - The Drop Zone ID.
  * @param {number} attachment_index - The existing attachment index.
  * @param {object} data - The new droplet data to be replaced into the Drop Zone.
  */
	zoneEditAttachment: function zoneEditAttachment(zone_id, attachment_index, data) {
		this._store.dispatch(_actions2.default.zoneEditAttachment(zone_id, attachment_index, data));

		if (this.settings.view.autoUpdate) {
			this._updateView();
		}
	},

	/**
  * Detaches a Droplet attachment from a Drop Zone by its `attachment_index` index.
  * @param {string} zone_id - Drop Zone ID.
  * @param {number} attachment_index - The existing attachment index.
  */
	zoneDetachAttachment: function zoneDetachAttachment(zone_id, attachment_index) {
		this._store.dispatch(_actions2.default.zoneDetachAttachment(zone_id, attachment_index));
	},

	/**
  * Retrieve a zone's attachment by its `attachment_index` index.
  * @param {string} zone_id - Drop Zone ID.
  * @param {number} attachment_index - The existing attachment index.
  */
	zoneGetAttachment: function zoneGetAttachment(zone_id, attachment_index) {
		var zone,
		    state = this._store.getState();

		if (state.zones && (zone = state.zones[zone_id]) && zone.attachments && zone.attachments.length > attachment_index) {
			return zone.attachments[attachment_index];
		}

		return null;
	},

	/**
  * Sends a key the View frame for updating.
  */
	_updateView: function _updateView() {
		var state = this._store.getState();

		this._comms.send('view', {
			cmd: _constants.messageCommands.RELOAD,
			data: {
				markup: this._template.renderAsHTML(state.zones)
			}
		});
	},

	/**
  * Obtains an element stored in the internal refs collection
  */
	_getReferencedElement: function _getReferencedElement(collection, key) {
		var ref;

		if ((typeof key === 'undefined' || !key) && (ref = this._refs.components[collection]) || (ref = this._refs.components[collection][key])) {
			return ref;
		} else {
			throw new Error('Referenced element at ' + collection + '(' + key + ') could not be found.');
		}
	},

	/**
  * Retrieves a Droplet instance by its ID.
  * @param {string} id - ID of the Droplet to retrieve.
  */
	getDropletById: function getDropletById(id) {
		return this._data.pallet.find(function (element) {
			return element.id === id;
		});
	},

	/**
  * Retrieves a Drop Zone instance by its ID.
  * @param {string} id - ID of the Drop Zone to retrieve.
  */
	getDropZoneById: function getDropZoneById(id) {
		return this._data.drop_zones[id] || null;
	},

	/**
  * @param {HTMLElement} attachment - The element to attach to.
  * @param {HTMLElement} element - The element being attached.
  * @param {object} options - The popper `options` object (see link).
  * @description
  * Using 'popper', sets the an attachment from the `attachment` node to an `element`
  * defining the "popup" to be displayed.
  * @see https://popper.js.org/popper-documentation.html#new_Popper_new
  * @private
  */
	_setUIPopperAttachment: function _setUIPopperAttachment(attachment, element, options) {
		var attached;

		if (attachment instanceof window.HTMLElement) {
			attached = attachment;
		} else if (attachment && attachment.selector) {
			attached = document.querySelector(attachment.selector);
		}

		if (attached) {
			return new _popper2.default(attached, element, attachment.options || options);
		} else {
			throw new Error('_setUIPopperAttachment: Attachment or selector could not be found.');
		}
	}
};

exports.default = UI;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// JS Polyfills - doesn't export anything, just modifies existing Object specs
Object.deepAssign = function (target, varArgs) {
	'use strict';

	var to, from, index, key;

	if (target == null) {
		// TypeError if undefined or null
		throw new TypeError('Cannot convert undefined or null to object');
	}

	to = typeof varArgs !== 'undefined' && Array.isArray(varArgs) && arguments.length === 2 ? Array(target) : // arrays to retain their identity
	Object(target); // otherwise use an object

	for (index = 1; index < arguments.length; index++) {
		from = arguments[index];

		if (from != null || typeof from === 'undefined') {
			for (key in from) {
				if (from.hasOwnProperty(key)) {
					if (_typeof(from[key]) === 'object' && from[key] != null) {
						to[key] = Object.deepAssign(Array.isArray(from[key]) ? [] : {}, to[key], from[key]);
					} else {
						to[key] = from[key];
					}
				}
			}
		}
	}

	return to;
};

/**
 * Curry implementation for functions
 */
Function.prototype.curry = function () {
	var args = Array.prototype.slice.call(arguments),
	    fn = this;

	return function () {
		// return result of original function with curried arguments before invocation arguments
		return fn.apply(null, args.concat(Array.prototype.slice.call(arguments)));
	};
};

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _redux = __webpack_require__(33);

var _defaultState = __webpack_require__(76);

var _defaultState2 = _interopRequireDefault(_defaultState);

var _constants = __webpack_require__(8);

var _Storage = __webpack_require__(80);

var _Storage2 = _interopRequireDefault(_Storage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dialog_id = 0,
    storage = new _Storage2.default('tag_app');

/**
 * Sets application state values.
 * @private
 */
function app() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _defaultState2.default.app;
	var action = arguments[1];

	var active, newstate, key;

	switch (action.type) {
		// set ui state
		case _constants.actionTypes.UI_STATE:
			// set 'active' flag based on the ui_state value
			switch (action.ui_state) {
				case _constants.uiStates.ACTIVE:
					active = true;
					break;

				default:
					active = false;
			}

			newstate = Object.assign({}, state, {
				ui_state: action.ui_state,
				active: active
			});

			return storeState(newstate, 'app');

		case _constants.actionTypes.RESET_APP:
			newstate = Object.assign({}, state, {
				first_valid_drop: false,
				last_valid_drop: false
			});

			return storeState(newstate, 'app');

		case _constants.actionTypes.COMPLETE_FIRST_DROP:
		case _constants.actionTypes.COMPLETE_LAST_DROP:
			if (action.type === _constants.actionTypes.COMPLETE_FIRST_DROP) {
				newstate = Object.assign({}, state, {
					first_valid_drop: true
				});
			} else {
				newstate = Object.assign({}, state, {
					last_valid_drop: true
				});
			}

			return storeState(newstate, 'app');

		default:
			return state;
	}
}

/**
 * Sets drop zone state values
 * @private
 */
function zones() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _defaultState2.default.zones;
	var action = arguments[1];

	var zones = Object.assign({}, state);

	switch (action.type) {
		case _constants.actionTypes.ZONE_ADD_ATTACHMENT:
			if (!zones[action.id]) {
				zones[action.id] = {
					attachments: []
				};
			}

			// attach the droplet
			zones[action.id].attachments.push({
				droplet_id: action.droplet_id,
				data: action.data
			});

			break;

		case _constants.actionTypes.ZONE_EDIT_ATTACHMENT:
			if (zones[action.id].attachments[action.attachment_index]) {
				zones[action.id].attachments[action.attachment_index].data = action.data;
			}

			break;

		case _constants.actionTypes.ZONE_DETACH_ATTACHMENT:
			// detach the attachment by index
			if (action.attachment_index !== null && action.attachment_index < zones[action.id].attachments.length) {
				zones[action.id].attachments.splice(action.attachment_index, 1);
			}

			break;

		case _constants.actionTypes.ZONE_CLEAR_ALL_ATTACHMENTS:
			zones = {};
			break;

		default:
			return state;
	}

	return storeState(zones, 'zones');
}

/**
 * Sets UI state values. This state collection is non persistant and will not be stored
 * within local/session storage. Due to that fact, it is safe to place circular references,
 * functions and large quantities of data in here.
 * @private
 */
function UI() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _defaultState2.default.UI;
	var action = arguments[1];

	switch (action.type) {
		case _constants.actionTypes.SET_DIALOG_MODE:
			return Object.assign({}, state, {
				dialog: {
					mode: action.mode,
					data: action.data,
					onDialogComplete: action.onDialogComplete,
					onDialogCancel: action.onDialogCancel,
					overlay: typeof action.overlay !== 'undefined' ? action.overlay : true,
					attachment: action.attachment,
					id: 'dialog-' + ++dialog_id
				}
			});

		case _constants.actionTypes.SET_TOUR_STAGE:
			return Object.assign({}, state, {
				tour_stage: action.stage
			});

		case _constants.actionTypes.SET_ACTIVE_DROPLET:
			// set the active droplet (i.e. the one that will be "dropped" when a
			// drop zone is next clicked
			return Object.assign({}, state, {
				active_droplet_id: action.droplet_id
			});

		case _constants.actionTypes.SHOW_TOOLTIP:
		case _constants.actionTypes.HIDE_TOOLTIP:
			if (action.type === _constants.actionTypes.SHOW_TOOLTIP) {
				return Object.assign({}, state, {
					tooltip: {
						show: true,
						attachment: action.attachment,
						options: action.options,
						content: state.tooltip.content,
						title: state.tooltip.title,
						iconGlyph: state.tooltip.iconGlyph
					}
				});
			} else {
				return Object.assign({}, state, {
					tooltip: {
						show: false,
						attachment: null,
						options: null,
						content: '',
						title: '',
						iconGlyph: ''
					}
				});
			}

		case _constants.actionTypes.SET_TOOLTIP_CONTENT:
			return Object.assign({}, state, {
				tooltip: {
					show: state.tooltip.show,
					content: action.content,
					title: action.title,
					iconGlyph: action.iconGlyph
				}
			});

		default:
			return state;
	}
}

/**
 * Stores state into local/session storage for recall on reloading the app.
 * @private
 */
function storeState(state, key) {
	var current_state = storage.get('state'),
	    new_state;

	new_state = Object.assign({}, _defaultState2.default, current_state);
	new_state[key] = Object.assign({}, state);
	new_state.UI = null;

	storage.set('state', new_state);

	return state;
}

exports.default = (0, _redux.combineReducers)({
	app: app,
	zones: zones,
	UI: UI
});

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(158)
var ieee754 = __webpack_require__(178)
var isArray = __webpack_require__(180)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(46)))

/***/ }),
/* 160 */,
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(162)(undefined);
// imports
exports.push([module.i, "@import url(//fonts.googleapis.com/css?family=Fira+Mono|Muli:400,700);", ""]);

// module
exports.push([module.i, "/* reset */\n* {\n  box-sizing: border-box; }\n\nhtml, body, div, span, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\nabbr, address, cite, code,\ndel, dfn, em, img, ins, kbd, q, samp,\nsmall, strong, sub, sup, var,\nb, i,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  background: transparent;\n  min-height: 0;\n  min-width: 0; }\n\nbody {\n  line-height: 1; }\n\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n  display: block; }\n\nnav ul {\n  list-style: none; }\n\nblockquote, q {\n  quotes: none; }\n\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none; }\n\na {\n  margin: 0;\n  padding: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  background: transparent; }\n\n/* change colours to suit your needs */\nins {\n  background-color: #ff9;\n  color: #000;\n  text-decoration: none; }\n\n/* change colours to suit your needs */\nmark {\n  background-color: #ff9;\n  color: #000;\n  font-style: italic;\n  font-weight: bold; }\n\ndel {\n  text-decoration: line-through; }\n\nabbr[title], dfn[title] {\n  border-bottom: 1px dotted;\n  cursor: help; }\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0; }\n\n/* change border colour to suit your needs */\nhr {\n  display: block;\n  height: 1px;\n  border: 0;\n  border-top: 1px solid #cccccc;\n  margin: 1em 0;\n  padding: 0; }\n\ninput, select {\n  vertical-align: middle; }\n\nbody {\n  font-family: \"Muli\", sans-serif;\n  line-height: 140%;\n  color: #333; }\n\nh1 {\n  font-size: 24px;\n  font-size: 1.5rem; }\n\nh2 {\n  font-size: 22px;\n  font-size: 1.375rem; }\n\nh3 {\n  font-size: 20px;\n  font-size: 1.25rem; }\n\np {\n  margin: .75em 0;\n  font-size: 16px;\n  font-size: 1rem; }\n\np:first-child {\n  margin-top: 0; }\n\np:last-child {\n  margin-bottom: 0; }\n\ncode {\n  font: 16px/120% \"Fira Mono\", monospace; }\n  code span {\n    font-size: 12px;\n    font-size: 0.75rem; }\n\n.view iframe {\n  z-index: 1; }\n\n.overlay,\n.view .drag-mask {\n  z-index: 2; }\n\n.droplet,\n.drag-handle {\n  z-index: 3; }\n\n.dialog {\n  z-index: 4; }\n  .dialog .dialog-container[x-placement] .arrow:before {\n    z-index: 6; }\n  .dialog .dialog-container[x-placement] .arrow:after {\n    z-index: 5; }\n\n.tooltip {\n  z-index: 10; }\n  .tooltip .arrow:before {\n    z-index: 12; }\n  .tooltip .arrow:after {\n    z-index: 11; }\n\n.button:after {\n  z-index: 1; }\n\n.button span {\n  z-index: 2; }\n\n.logo {\n  letter-spacing: 1px; }\n  .logo b {\n    color: #192fce; }\n\n* {\n  user-select: none; }\n\n:not(svg) {\n  cursor: default; }\n\n:focus {\n  outline: none; }\n\n::-moz-focus-inner {\n  border: 0; }\n\n.hidden {\n  display: none; }\n\n/* main layout */\nbody {\n  background-color: #fff; }\n\n.app,\n.tag-canvas {\n  position: absolute;\n  overflow: auto;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0; }\n\n.tag-canvas {\n  display: flex;\n  flex-direction: column; }\n  .tag-canvas header {\n    flex-shrink: 0; }\n  .tag-canvas .main {\n    display: flex;\n    flex-grow: 1; }\n    .tag-canvas .main > *:not(.drag-handle) {\n      flex-basis: 50%; }\n    .tag-canvas .main .drag-handle {\n      flex-basis: 20px; }\n  .tag-canvas .pallet {\n    flex-shrink: 0; }\n\nheader {\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid #ccc;\n  padding: 5px 10px;\n  background: linear-gradient(to bottom, #f3f3f3 0%, #f1f1f1 100%); }\n  header .logo {\n    margin-right: 1em; }\n  header p {\n    margin: 0; }\n  header .toolbar {\n    margin-left: auto; }\n\n.toolbar ul {\n  list-style: none;\n  display: flex;\n  padding: 0; }\n  .toolbar ul li {\n    margin-left: 5px;\n    padding-left: 5px; }\n    .toolbar ul li.separator {\n      margin-left: 7.5px;\n      padding-left: 9.5px;\n      border-left: 2px solid #ccc; }\n    .toolbar ul li.run .button {\n      border-color: #319f2e;\n      color: #319f2e; }\n      .toolbar ul li.run .button .circle {\n        background-color: #319f2e; }\n      .toolbar ul li.run .button:hover > span {\n        color: #fff;\n        background-color: #51cc4d; }\n\n.toolbar .button {\n  font-weight: bolder;\n  font-size: 14px;\n  font-size: 0.875rem; }\n  .toolbar .button span {\n    background-color: #fff; }\n\n.template {\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  border-right: 1px solid #ccc;\n  background-color: #fcfdcc; }\n  .template .template-inner {\n    overflow: auto;\n    flex-grow: 1; }\n  .template pre {\n    margin: 10px;\n    line-height: 130%;\n    -moz-tab-size: 3;\n    tab-size: 3; }\n    .template pre * {\n      user-select: text;\n      cursor: text; }\n  .template .hljs {\n    font-size: 1.125em;\n    line-height: 130%; }\n    .template .hljs .drop-zone .hljs-string {\n      color: white; }\n  .template .instruction {\n    display: block;\n    flex-shrink: 0;\n    margin: 0;\n    padding: 5px;\n    color: #fff;\n    background-color: #6172ec; }\n\n.view {\n  position: relative;\n  border-left: 1px solid #ccc; }\n  .view iframe,\n  .view .drag-mask {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%; }\n  .view .drag-mask {\n    visibility: hidden;\n    background-color: #fff; }\n\n.dragging .view .drag-mask {\n  visibility: visible;\n  opacity: .7; }\n\n.pallet {\n  display: flex;\n  flex-wrap: wrap;\n  border-top: 1px solid #ccc;\n  padding: 5px 10px;\n  background-color: #eee; }\n  .pallet .droplet {\n    margin: 5px 10px 5px 0; }\n\nbutton::-moz-focus-inner {\n  padding: 0;\n  border: 0; }\n\n.button {\n  -webkit-appearance: none;\n  display: block;\n  border: 0;\n  padding: 0;\n  text-decoration: none;\n  font-size: 14px;\n  font-size: 0.875rem;\n  color: #333;\n  background-color: transparent;\n  cursor: pointer; }\n  .button > span {\n    display: block;\n    overflow: hidden;\n    position: relative;\n    border-radius: 3px;\n    border: 1px solid #ccc;\n    padding: 5px 10px; }\n  .button:hover > span,\n  .button:focus > span {\n    transform: translate(-2px, -2px);\n    box-shadow: 2px 2px rgba(0, 0, 0, 0.2);\n    cursor: pointer;\n    background-color: #eee; }\n  .button span.circle {\n    position: absolute;\n    transform: scale(0);\n    opacity: .7;\n    left: 0;\n    top: 0;\n    width: 100%;\n    padding-top: 100%;\n    border-radius: 50%;\n    background-color: #a0a0a0;\n    pointer-events: none; }\n    .button span.circle.animate {\n      animation: button-circle-out 0.6s cubic-bezier(0.77, 0, 0.175, 1); }\n  .button .icon {\n    margin: 0 5px 1px 0;\n    vertical-align: middle; }\n\n.pseudo-button {\n  display: inline-block;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  padding: 1px 5px;\n  color: #4d4d4d; }\n  .pseudo-button > * {\n    vertical-align: middle; }\n  .pseudo-button svg {\n    margin-bottom: .15em; }\n  .pseudo-button.run {\n    color: #51cc4d;\n    fill: #51cc4d; }\n\n@keyframes button-circle-out {\n  100% {\n    transform: scale(6);\n    opacity: 0; } }\n\n.drop-zone {\n  display: inline-block;\n  font-family: \"Fira Mono\", monospace; }\n  .drop-zone .target-outer {\n    display: inline-block;\n    position: relative; }\n  .drop-zone .target b {\n    border-radius: 3px;\n    padding: 2px 5px;\n    background-color: #6172ec;\n    line-height: 120%;\n    color: white; }\n  .drop-zone .target.hidden {\n    display: none; }\n  .drop-zone .attachments > * {\n    display: inline-block;\n    margin: 1px;\n    border-radius: 3px;\n    padding: 1px;\n    background-color: #51cc4d; }\n  .drop-zone .attachments .element {\n    display: block; }\n\n.drop-zone.accept .target b,\n.droplet-active .drop-zone.will-accept .target:hover b {\n  background-color: #51cc4d; }\n\n.drop-zone.decline .target b,\n.droplet-active .drop-zone.will-decline .target:hover b {\n  background-color: #ff515c; }\n\n.drop-zone:not(.possible-target) .dropzone-attachment:hover {\n  color: #fff;\n  background-color: #319f2e;\n  cursor: pointer; }\n\n.droplet-active .drop-zone .target b {\n  cursor: pointer;\n  background-color: #192fce; }\n\n.droplet-active .drop-zone .target:hover b {\n  box-shadow: 2px 2px rgba(0, 0, 0, 0.2); }\n\n.droplet {\n  -webkit-appearance: none;\n  border: 0;\n  height: 35px;\n  padding: 0;\n  text-decoration: none;\n  cursor: pointer; }\n  .droplet .label {\n    transition: background-color 0.15s cubic-bezier(0.77, 0, 0.175, 1), color 0.15s cubic-bezier(0.77, 0, 0.175, 1), border-color 0.15s cubic-bezier(0.77, 0, 0.175, 1), opacity 0.5s cubic-bezier(0.77, 0, 0.175, 1);\n    display: flex;\n    align-items: center;\n    opacity: 1;\n    border-radius: 3px;\n    border: 1px solid #a0a0a0;\n    border-left-width: 5px;\n    height: 35px;\n    padding: 5px 10px;\n    line-height: 120%;\n    font-size: 14px;\n    font-size: 0.875rem;\n    background-color: #fff;\n    color: #333;\n    cursor: pointer; }\n    .droplet .label .icon {\n      transition: fill 0.15s cubic-bezier(0.77, 0, 0.175, 1);\n      margin-right: .5em; }\n  .droplet.active .label {\n    color: #fff;\n    background-color: #a0a0a0; }\n    .droplet.active .label .icon {\n      fill: #fff; }\n  .droplet.item-dragging .label {\n    opacity: 0.5;\n    box-shadow: 2px 2px rgba(0, 0, 0, 0.2); }\n  .droplet.type-text .label {\n    border-color: #2f9ed8; }\n  .droplet.type-text:hover .label {\n    color: #2f9ed8; }\n  .droplet.type-text.active .label {\n    color: #fff;\n    border-color: #1d719d;\n    background-color: #1d719d; }\n  .droplet.type-attribute .label {\n    border-color: #51cc4d; }\n  .droplet.type-attribute:hover .label {\n    color: #51cc4d; }\n  .droplet.type-attribute.active .label {\n    color: #fff;\n    border-color: #319f2e;\n    background-color: #319f2e; }\n  .droplet.type-element .label {\n    border-color: #c044f1; }\n  .droplet.type-element:hover .label {\n    color: #c044f1; }\n  .droplet.type-element.active .label {\n    color: #fff;\n    border-color: #a010d8;\n    background-color: #a010d8; }\n\n.dialog {\n  position: fixed;\n  display: none;\n  justify-content: center;\n  align-items: center;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  background: #ccc;\n  /* The Fallback */\n  background: rgba(204, 204, 204, 0.7); }\n  .dialog.visible {\n    display: flex; }\n  .dialog.no-overlay.visible {\n    pointer-events: none;\n    background: none; }\n  .dialog .dialog-container {\n    pointer-events: auto;\n    box-shadow: 4px 4px rgba(0, 0, 0, 0.1);\n    border: 1px solid #a0a0a0;\n    max-width: 500px;\n    background-color: #fbfbfb; }\n  .dialog .dialog-heading {\n    padding: 20px;\n    border-bottom: 1px solid #ccc; }\n    .dialog .dialog-heading .icon {\n      margin-right: .5em; }\n    .dialog .dialog-heading p:nth-of-type(n+2) {\n      font-size: 14px;\n      font-size: 0.875rem; }\n  .dialog .button {\n    font-size: 16px;\n    font-size: 1rem; }\n    .dialog .button > span {\n      padding: 7.5px 15px; }\n\n.popup[x-placement^=\"top\"] {\n  margin-bottom: 20px; }\n\n.popup[x-placement^=\"bottom\"] {\n  margin-top: 20px; }\n\n.popup[x-placement^=\"right\"] {\n  margin-left: 20px; }\n\n.popup[x-placement^=\"left\"] {\n  margin-right: 20px; }\n\n.popup[x-placement] .arrow {\n  position: absolute;\n  overflow: hidden;\n  width: 40px;\n  height: 40px; }\n  .popup[x-placement] .arrow:before, .popup[x-placement] .arrow:after {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 0;\n    border: 20px solid #fbfbfb; }\n  .popup[x-placement] .arrow:after {\n    border: 22px solid #a0a0a0; }\n\n.popup[x-placement^=\"top\"] .arrow,\n.popup[x-placement^=\"bottom\"] .arrow {\n  height: 20px; }\n\n.popup[x-placement^=\"left\"] .arrow,\n.popup[x-placement^=\"right\"] .arrow {\n  width: 20px; }\n\n.popup[x-placement^=\"top\"] .arrow {\n  bottom: -20px;\n  margin-left: -10px; }\n  .popup[x-placement^=\"top\"] .arrow:before {\n    border-color: #fbfbfb transparent transparent transparent; }\n  .popup[x-placement^=\"top\"] .arrow:after {\n    left: -2px;\n    top: -1px;\n    border-color: #a0a0a0 transparent transparent transparent; }\n\n.popup[x-placement^=\"bottom\"] .arrow {\n  top: -20px;\n  margin-left: -10px; }\n  .popup[x-placement^=\"bottom\"] .arrow:before {\n    top: -20px;\n    border-color: transparent transparent #fbfbfb transparent; }\n  .popup[x-placement^=\"bottom\"] .arrow:after {\n    left: -2px;\n    top: -21px;\n    border-color: transparent transparent #a0a0a0 transparent; }\n\n.popup[x-placement^=\"left\"] .arrow {\n  right: -20px; }\n  .popup[x-placement^=\"left\"] .arrow:before {\n    border-color: transparent transparent transparent #fbfbfb; }\n  .popup[x-placement^=\"left\"] .arrow:after {\n    left: -1px;\n    top: -2px;\n    border-color: transparent transparent transparent #a0a0a0; }\n\n.popup[x-placement^=\"right\"] .arrow {\n  left: -20px; }\n  .popup[x-placement^=\"right\"] .arrow:before {\n    left: auto;\n    right: 0;\n    border-color: transparent #fbfbfb transparent transparent; }\n  .popup[x-placement^=\"right\"] .arrow:after {\n    left: auto;\n    right: -1px;\n    top: -2px;\n    border-color: transparent #a0a0a0 transparent transparent; }\n\n.popup code {\n  display: block;\n  box-shadow: 2px 2px rgba(0, 0, 0, 0.2);\n  margin: 1em 0;\n  width: 100%;\n  padding: 5px;\n  word-wrap: break-word;\n  font-size: 12px;\n  font-size: 0.75rem;\n  background-color: #fcfdcc; }\n\nform fieldset:not(.buttons) {\n  padding: 0 20px;\n  margin: 10px 0; }\n\nform fieldset.buttons {\n  text-align: right;\n  border-top: 1px solid #ccc;\n  padding: 20px; }\n  form fieldset.buttons button {\n    display: inline-block;\n    margin: 0 .25em; }\n    form fieldset.buttons button.pull-left {\n      float: left; }\n\nform legend {\n  font-weight: bolder; }\n\nform .field {\n  display: flex;\n  align-items: center;\n  margin: 10px 0; }\n  form .field label {\n    width: 40%; }\n\ninput,\nselect,\nbutton {\n  font-family: \"Muli\", sans-serif; }\n\ninput,\nselect {\n  user-select: all;\n  font-size: 14px;\n  font-size: 0.875rem;\n  padding: 5px; }\n\nbutton {\n  position: relative; }\n  button.primary, button.danger {\n    font-weight: bolder; }\n  button.primary > span {\n    border-color: #6172ec;\n    color: #6172ec; }\n  button.primary .circle {\n    background-color: #1d35e4; }\n  button.primary:hover > span,\n  button.primary:focus > span {\n    color: #fff;\n    background-color: #7886ef; }\n  button.danger > span {\n    border-color: #ff515c;\n    color: #ff515c; }\n  button.danger .circle {\n    background-color: #ff0514; }\n  button.danger:hover > span,\n  button.danger:focus > span {\n    color: #fff;\n    background-color: #ff6b74; }\n\n.icon {\n  pointer-events: none; }\n  .icon use {\n    fill: currentColor; }\n\n.drag-handle {\n  position: relative;\n  background-color: #eee;\n  cursor: col-resize; }\n  .drag-handle:after {\n    content: '';\n    transition: all 0.15s cubic-bezier(0.77, 0, 0.175, 1);\n    position: absolute;\n    box-sizing: border-box;\n    left: 50%;\n    top: 50%;\n    margin-top: -25px;\n    margin-left: -4px;\n    width: 8px;\n    height: 50px;\n    border-left: 2px solid #ccc;\n    border-right: 2px solid #ccc; }\n  .drag-handle:hover, .drag-handle.item-dragging {\n    background-color: #f4f4f4; }\n  .drag-handle:hover:after, .drag-handle.item-dragging:after {\n    height: 100px;\n    margin-top: -50px; }\n\n.tooltip {\n  position: absolute;\n  max-width: 400px; }\n  .tooltip .content {\n    box-shadow: 4px 4px rgba(0, 0, 0, 0.1);\n    padding: 10px;\n    background-color: #fbfbfb; }\n    .tooltip .content h2 {\n      font-size: 18px;\n      font-size: 1.125rem; }\n      .tooltip .content h2 .icon {\n        margin-right: .5em;\n        vertical-align: middle;\n        fill: #192fce; }\n  .tooltip .arrow:after {\n    display: none; }\n", ""]);

// exports


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap) {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
  var base64 = new Buffer(JSON.stringify(sourceMap)).toString('base64');
  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

  return '/*# ' + data + ' */';
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(159).Buffer))

/***/ }),
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 179 */,
/* 180 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */
/***/ (function(module, exports) {

(function(host) {

  var properties = {
    browser: [
      [/msie ([\.\_\d]+)/, "ie"],
      [/trident\/.*?rv:([\.\_\d]+)/, "ie"],
      [/firefox\/([\.\_\d]+)/, "firefox"],
      [/chrome\/([\.\_\d]+)/, "chrome"],
      [/version\/([\.\_\d]+).*?safari/, "safari"],
      [/mobile safari ([\.\_\d]+)/, "safari"],
      [/android.*?version\/([\.\_\d]+).*?safari/, "com.android.browser"],
      [/crios\/([\.\_\d]+).*?safari/, "chrome"],
      [/opera/, "opera"],
      [/opera\/([\.\_\d]+)/, "opera"],
      [/opera ([\.\_\d]+)/, "opera"],
      [/opera mini.*?version\/([\.\_\d]+)/, "opera.mini"],
      [/opios\/([a-z\.\_\d]+)/, "opera"],
      [/blackberry/, "blackberry"],
      [/blackberry.*?version\/([\.\_\d]+)/, "blackberry"],
      [/bb\d+.*?version\/([\.\_\d]+)/, "blackberry"],
      [/rim.*?version\/([\.\_\d]+)/, "blackberry"],
      [/iceweasel\/([\.\_\d]+)/, "iceweasel"],
      [/edge\/([\.\d]+)/, "edge"]
    ],
    os: [
      [/linux ()([a-z\.\_\d]+)/, "linux"],
      [/mac os x/, "macos"],
      [/mac os x.*?([\.\_\d]+)/, "macos"],
      [/os ([\.\_\d]+) like mac os/, "ios"],
      [/openbsd ()([a-z\.\_\d]+)/, "openbsd"],
      [/android/, "android"],
      [/android ([a-z\.\_\d]+);/, "android"],
      [/mozilla\/[a-z\.\_\d]+ \((?:mobile)|(?:tablet)/, "firefoxos"],
      [/windows\s*(?:nt)?\s*([\.\_\d]+)/, "windows"],
      [/windows phone.*?([\.\_\d]+)/, "windows.phone"],
      [/windows mobile/, "windows.mobile"],
      [/blackberry/, "blackberryos"],
      [/bb\d+/, "blackberryos"],
      [/rim.*?os\s*([\.\_\d]+)/, "blackberryos"]
    ],
    device: [
      [/ipad/, "ipad"],
      [/iphone/, "iphone"],
      [/lumia/, "lumia"],
      [/htc/, "htc"],
      [/nexus/, "nexus"],
      [/galaxy nexus/, "galaxy.nexus"],
      [/nokia/, "nokia"],
      [/ gt\-/, "galaxy"],
      [/ sm\-/, "galaxy"],
      [/xbox/, "xbox"],
      [/(?:bb\d+)|(?:blackberry)|(?: rim )/, "blackberry"]
    ]
  };

  var UNKNOWN = "Unknown";

  var propertyNames = Object.keys(properties);

  function Sniffr() {
    var self = this;

    propertyNames.forEach(function(propertyName) {
      self[propertyName] = {
        name: UNKNOWN,
        version: [],
        versionString: UNKNOWN
      };
    });
  }

  function determineProperty(self, propertyName, userAgent) {
    properties[propertyName].forEach(function(propertyMatcher) {
      var propertyRegex = propertyMatcher[0];
      var propertyValue = propertyMatcher[1];

      var match = userAgent.match(propertyRegex);

      if (match) {
        self[propertyName].name = propertyValue;

        if (match[2]) {
          self[propertyName].versionString = match[2];
          self[propertyName].version = [];
        } else if (match[1]) {
          self[propertyName].versionString = match[1].replace(/_/g, ".");
          self[propertyName].version = parseVersion(match[1]);
        } else {
          self[propertyName].versionString = UNKNOWN;
          self[propertyName].version = [];
        }
      }
    });
  }

  function parseVersion(versionString) {
    return versionString.split(/[\._]/).map(function(versionPart) {
      return parseInt(versionPart);
    });
  }

  Sniffr.prototype.sniff = function(userAgentString) {
    var self = this;
    var userAgent = (userAgentString || navigator.userAgent || "").toLowerCase();

    propertyNames.forEach(function(propertyName) {
      determineProperty(self, propertyName, userAgent);
    });
  };


  if (typeof module !== 'undefined' && module.exports) {
    module.exports = Sniffr;
  } else {
    host.Sniffr = new Sniffr();
    host.Sniffr.sniff(navigator.userAgent);
  }
})(this);


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
var stylesInDom = {},
	memoize = function(fn) {
		var memo;
		return function () {
			if (typeof memo === "undefined") memo = fn.apply(this, arguments);
			return memo;
		};
	},
	isOldIE = memoize(function() {
		return /msie [6-9]\b/.test(self.navigator.userAgent.toLowerCase());
	}),
	getHeadElement = memoize(function () {
		return document.head || document.getElementsByTagName("head")[0];
	}),
	singletonElement = null,
	singletonCounter = 0,
	styleElementsInsertedAtTop = [],
	fixUrls = __webpack_require__(293);

module.exports = function(list, options) {
	if(typeof DEBUG !== "undefined" && DEBUG) {
		if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};
	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (typeof options.singleton === "undefined") options.singleton = isOldIE();

	// By default, add <style> tags to the bottom of <head>.
	if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

	var styles = listToStyles(list);
	addStylesToDom(styles, options);

	return function update(newList) {
		var mayRemove = [];
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			domStyle.refs--;
			mayRemove.push(domStyle);
		}
		if(newList) {
			var newStyles = listToStyles(newList);
			addStylesToDom(newStyles, options);
		}
		for(var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];
			if(domStyle.refs === 0) {
				for(var j = 0; j < domStyle.parts.length; j++)
					domStyle.parts[j]();
				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom(styles, options) {
	for(var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];
		if(domStyle) {
			domStyle.refs++;
			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}
			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];
			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}
			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles(list) {
	var styles = [];
	var newStyles = {};
	for(var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};
		if(!newStyles[id])
			styles.push(newStyles[id] = {id: id, parts: [part]});
		else
			newStyles[id].parts.push(part);
	}
	return styles;
}

function insertStyleElement(options, styleElement) {
	var head = getHeadElement();
	var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
	if (options.insertAt === "top") {
		if(!lastStyleElementInsertedAtTop) {
			head.insertBefore(styleElement, head.firstChild);
		} else if(lastStyleElementInsertedAtTop.nextSibling) {
			head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			head.appendChild(styleElement);
		}
		styleElementsInsertedAtTop.push(styleElement);
	} else if (options.insertAt === "bottom") {
		head.appendChild(styleElement);
	} else {
		throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
	}
}

function removeStyleElement(styleElement) {
	styleElement.parentNode.removeChild(styleElement);
	var idx = styleElementsInsertedAtTop.indexOf(styleElement);
	if(idx >= 0) {
		styleElementsInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement(options) {
	var styleElement = document.createElement("style");
	options.attrs.type = "text/css";

	attachTagAttrs(styleElement, options.attrs);
	insertStyleElement(options, styleElement);
	return styleElement;
}

function createLinkElement(options) {
	var linkElement = document.createElement("link");
	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	attachTagAttrs(linkElement, options.attrs);
	insertStyleElement(options, linkElement);
	return linkElement;
}

function attachTagAttrs(element, attrs) {
	Object.keys(attrs).forEach(function (key) {
		element.setAttribute(key, attrs[key]);
	});
}

function addStyle(obj, options) {
	var styleElement, update, remove;

	if (options.singleton) {
		var styleIndex = singletonCounter++;
		styleElement = singletonElement || (singletonElement = createStyleElement(options));
		update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
		remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
	} else if(obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function") {
		styleElement = createLinkElement(options);
		update = updateLink.bind(null, styleElement, options);
		remove = function() {
			removeStyleElement(styleElement);
			if(styleElement.href)
				URL.revokeObjectURL(styleElement.href);
		};
	} else {
		styleElement = createStyleElement(options);
		update = applyToTag.bind(null, styleElement);
		remove = function() {
			removeStyleElement(styleElement);
		};
	}

	update(obj);

	return function updateStyle(newObj) {
		if(newObj) {
			if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
				return;
			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;
		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag(styleElement, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (styleElement.styleSheet) {
		styleElement.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = styleElement.childNodes;
		if (childNodes[index]) styleElement.removeChild(childNodes[index]);
		if (childNodes.length) {
			styleElement.insertBefore(cssNode, childNodes[index]);
		} else {
			styleElement.appendChild(cssNode);
		}
	}
}

function applyToTag(styleElement, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		styleElement.setAttribute("media", media)
	}

	if(styleElement.styleSheet) {
		styleElement.styleSheet.cssText = css;
	} else {
		while(styleElement.firstChild) {
			styleElement.removeChild(styleElement.firstChild);
		}
		styleElement.appendChild(document.createTextNode(css));
	}
}

function updateLink(linkElement, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/* If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
	and there is no publicPath defined then lets turn convertToAbsoluteUrls
	on by default.  Otherwise default to the convertToAbsoluteUrls option
	directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls){
		css = fixUrls(css);
	}

	if(sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = linkElement.href;

	linkElement.href = URL.createObjectURL(blob);

	if(oldSrc)
		URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 293 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	var fixedCss = css.replace(/url *\( *(.+?) *\)/g, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(161);
if(typeof content === 'string') content = [[module.i, content, '']];
// add the styles to the DOM
var update = __webpack_require__(292)(content, {});
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../css-loader/index.js!../../../sass-loader/lib/loader.js!./main.scss", function() {
			var newContent = require("!!../../../css-loader/index.js!../../../sass-loader/lib/loader.js!./main.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */
/***/ (function(module, exports, __webpack_require__) {


var sprite = __webpack_require__(18);
var image = "<symbol viewBox=\"0 0 8 8\" id=\"icon-compass\" > <path d=\"M4 0c-2.2 0-4 1.8-4 4s1.8 4 4 4 4-1.8 4-4-1.8-4-4-4zm0 1c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm2 1l-3 1-1 3 3-1 1-3zm-2 1.5c.28 0 .5.22.5.5s-.22.5-.5.5-.5-.22-.5-.5.22-.5.5-.5z\"/> </symbol>";
module.exports = sprite.add(image, "icon-compass");

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {


var sprite = __webpack_require__(18);
var image = "<symbol viewBox=\"0 0 8 8\" id=\"icon-lightbulb\" > <path d=\"M3.41 0a.5.5 0 0 0-.13.06l-3 1.5a.5.5 0 1 0 .44.88l3-1.5a.5.5 0 0 0-.31-.94zm1 1.5a.5.5 0 0 0-.13.06l-4 2a.5.5 0 1 0 .44.88l4-2a.5.5 0 0 0-.31-.94zm0 2a.5.5 0 0 0-.13.06l-3 1.5a.5.5 0 0 0 .22.94h2a.5.5 0 0 0 .16-1l1.06-.56a.5.5 0 0 0-.31-.94zm-2.56 3.5a.5.5 0 0 0 .16 1h1a.5.5 0 1 0 0-1h-1a.5.5 0 0 0-.09 0 .5.5 0 0 0-.06 0z\" transform=\"translate(1)\"/> </symbol>";
module.exports = sprite.add(image, "icon-lightbulb");

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {


var sprite = __webpack_require__(18);
var image = "<symbol viewBox=\"0 0 8 8\" id=\"icon-loop-circular\" > <path d=\"M4 0c-1.65 0-3 1.35-3 3h-1l1.5 2 1.5-2h-1c0-1.11.89-2 2-2v-1zm2.5 1l-1.5 2h1c0 1.11-.89 2-2 2v1c1.65 0 3-1.35 3-3h1l-1.5-2z\" transform=\"translate(0 1)\"/> </symbol>";
module.exports = sprite.add(image, "icon-loop-circular");

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {


var sprite = __webpack_require__(18);
var image = "<symbol viewBox=\"0 0 8 8\" id=\"icon-media-play\" > <path d=\"M0 0v6l6-3-6-3z\" transform=\"translate(1 1)\"/> </symbol>";
module.exports = sprite.add(image, "icon-media-play");

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {


var sprite = __webpack_require__(18);
var image = "<symbol viewBox=\"0 0 8 8\" id=\"icon-puzzle-piece\" > <path d=\"M3 0c-.28 0-.54.1-.72.28-.18.18-.28.44-.28.72 0 .28.18.48.28.72.03.06.03.16.03.28h-2.31v6h2.31c0-.12-.01-.22-.03-.28-.1-.24-.28-.44-.28-.72 0-.28.1-.54.28-.72.18-.18.44-.28.72-.28.28 0 .54.1.72.28.18.18.28.44.28.72 0 .28-.18.48-.28.72-.03.06-.03.16-.03.28h2.31v-2.31c.12 0 .22.01.28.03.24.1.44.28.72.28.28 0 .54-.1.72-.28.18-.18.28-.44.28-.72 0-.28-.1-.54-.28-.72-.18-.18-.44-.28-.72-.28-.28 0-.48.18-.72.28-.06.03-.16.03-.28.03v-2.31h-2.31c0-.12.01-.22.03-.28.1-.24.28-.44.28-.72 0-.28-.1-.54-.28-.72-.18-.18-.44-.28-.72-.28z\"/> </symbol>";
module.exports = sprite.add(image, "icon-puzzle-piece");

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {


var sprite = __webpack_require__(18);
var image = "<symbol viewBox=\"0 0 8 8\" id=\"icon-resize-width\" > <path d=\"M3 0l-3 2.5 3 2.5v-2h2v2l3-2.5-3-2.5v2h-2v-2z\" transform=\"translate(0 1)\"/> </symbol>";
module.exports = sprite.add(image, "icon-resize-width");

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {


var sprite = __webpack_require__(18);
var image = "<symbol viewBox=\"0 0 8 8\" id=\"icon-tag\" > <path d=\"M0 0v3l5 5 3-3-5-5h-3zm2 1c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1z\"/> </symbol>";
module.exports = sprite.add(image, "icon-tag");

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {


var sprite = __webpack_require__(18);
var image = "<symbol viewBox=\"0 0 8 8\" id=\"icon-text\" > <path d=\"M0 0v2h.5c0-.55.45-1 1-1h1.5v5.5c0 .28-.22.5-.5.5h-.5v1h4v-1h-.5c-.28 0-.5-.22-.5-.5v-5.5h1.5c.55 0 1 .45 1 1h.5v-2h-8z\"/> </symbol>";
module.exports = sprite.add(image, "icon-text");

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

var Sniffr = __webpack_require__(291);

/**
 * List of SVG attributes to fix url target in them
 * @type {string[]}
 */
var fixAttributes = [
  'clipPath',
  'colorProfile',
  'src',
  'cursor',
  'fill',
  'filter',
  'marker',
  'markerStart',
  'markerMid',
  'markerEnd',
  'mask',
  'stroke'
];

/**
 * Query to find'em
 * @type {string}
 */
var fixAttributesQuery = '[' + fixAttributes.join('],[') + ']';
/**
 * @type {RegExp}
 */
var URI_FUNC_REGEX = /^url\((.*)\)$/;

/**
 * Convert array-like to array
 * @param {Object} arrayLike
 * @returns {Array.<*>}
 */
function arrayFrom(arrayLike) {
  return Array.prototype.slice.call(arrayLike, 0);
}

/**
 * Handles forbidden symbols which cannot be directly used inside attributes with url(...) content.
 * Adds leading slash for the brackets
 * @param {string} url
 * @return {string} encoded url
 */
function encodeUrlForEmbedding(url) {
  return url.replace(/\(|\)/g, "\\$&");
}

/**
 * Replaces prefix in `url()` functions
 * @param {Element} svg
 * @param {string} currentUrlPrefix
 * @param {string} newUrlPrefix
 */
function baseUrlWorkAround(svg, currentUrlPrefix, newUrlPrefix) {
  var nodes = svg.querySelectorAll(fixAttributesQuery);

  if (!nodes) {
    return;
  }

  arrayFrom(nodes).forEach(function (node) {
    if (!node.attributes) {
      return;
    }

    arrayFrom(node.attributes).forEach(function (attribute) {
      var attributeName = attribute.localName.toLowerCase();

      if (fixAttributes.indexOf(attributeName) !== -1) {
        var match = URI_FUNC_REGEX.exec(node.getAttribute(attributeName));

        // Do not touch urls with unexpected prefix
        if (match && match[1].indexOf(currentUrlPrefix) === 0) {
          var referenceUrl = encodeUrlForEmbedding(newUrlPrefix + match[1].split(currentUrlPrefix)[1]);
          node.setAttribute(attributeName, 'url(' + referenceUrl + ')');
        }
      }
    });
  });
}

/**
 * Because of Firefox bug #353575 gradients and patterns don't work if they are within a symbol.
 * To workaround this we move the gradient definition outside the symbol element
 * @see https://bugzilla.mozilla.org/show_bug.cgi?id=353575
 * @param {Element} svg
 */
var FirefoxSymbolBugWorkaround = function (svg) {
  var defs = svg.querySelector('defs');

  var moveToDefsElems = svg.querySelectorAll('symbol linearGradient, symbol radialGradient, symbol pattern');
  for (var i = 0, len = moveToDefsElems.length; i < len; i++) {
    defs.appendChild(moveToDefsElems[i]);
  }
};

/**
 * Fix for browser (IE, maybe other too) which are throwing 'WrongDocumentError'
 * if you insert an element which is not part of the document
 * @see http://stackoverflow.com/questions/7981100/how-do-i-dynamically-insert-an-svg-image-into-html#7986519
 * @param {Element} svg
 */
function importSvg(svg) {
  try {
    if (document.importNode) {
      return document.importNode(svg, true);
    }
  } catch(e) {}

  return svg;
}

/**
 * @type {string}
 */
var DEFAULT_URI_PREFIX = '#';

/**
 * @type {string}
 */
var xLinkHref = 'xlink:href';
/**
 * @type {string}
 */
var xLinkNS = 'http://www.w3.org/1999/xlink';
/**
 * @type {string}
 */
var svgOpening = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="' + xLinkNS + '"';
/**
 * @type {string}
 */
var svgClosing = '</svg>';
/**
 * @type {string}
 */
var contentPlaceHolder = '{content}';

/**
 * Representation of SVG sprite
 * @constructor
 */
function Sprite() {
  var baseElement = document.getElementsByTagName('base')[0];
  var currentUrl = window.location.href.split('#')[0];
  var baseUrl = baseElement && baseElement.href;
  this.urlPrefix = baseUrl && baseUrl !== currentUrl ? currentUrl + DEFAULT_URI_PREFIX : DEFAULT_URI_PREFIX;

  var sniffr = new Sniffr();
  sniffr.sniff();
  this.browser = sniffr.browser;
  this.content = [];

  if (this.browser.name !== 'ie' && baseUrl) {
    window.addEventListener('spriteLoaderLocationUpdated', function (e) {
      var currentPrefix = this.urlPrefix;
      var newUrlPrefix = e.detail.newUrl.split(DEFAULT_URI_PREFIX)[0] + DEFAULT_URI_PREFIX;
      baseUrlWorkAround(this.svg, currentPrefix, newUrlPrefix);
      this.urlPrefix = newUrlPrefix;

      if (this.browser.name === 'firefox' || this.browser.name === 'edge' || this.browser.name === 'chrome' && this.browser.version[0] >= 49) {
        var nodes = arrayFrom(document.querySelectorAll('use[*|href]'));
        nodes.forEach(function (node) {
          var href = node.getAttribute(xLinkHref);
          if (href && href.indexOf(currentPrefix) === 0) {
            node.setAttributeNS(xLinkNS, xLinkHref, newUrlPrefix + href.split(DEFAULT_URI_PREFIX)[1]);
          }
        });
      }
    }.bind(this));
  }
}

Sprite.styles = ['position:absolute', 'width:0', 'height:0'];

Sprite.spriteTemplate = function(){ return svgOpening + ' style="'+ Sprite.styles.join(';') +'"><defs>' + contentPlaceHolder + '</defs>' + svgClosing; }
Sprite.symbolTemplate = function() { return svgOpening + '>' + contentPlaceHolder + svgClosing; }

/**
 * @type {Array<String>}
 */
Sprite.prototype.content = null;

/**
 * @param {String} content
 * @param {String} id
 */
Sprite.prototype.add = function (content, id) {
  if (this.svg) {
    this.appendSymbol(content);
  }

  this.content.push(content);

  return DEFAULT_URI_PREFIX + id;
};

/**
 *
 * @param content
 * @param template
 * @returns {Element}
 */
Sprite.prototype.wrapSVG = function (content, template) {
  var svgString = template.replace(contentPlaceHolder, content);

  var svg = new DOMParser().parseFromString(svgString, 'image/svg+xml').documentElement;
  var importedSvg = importSvg(svg);

  if (this.browser.name !== 'ie' && this.urlPrefix) {
    baseUrlWorkAround(importedSvg, DEFAULT_URI_PREFIX, this.urlPrefix);
  }

  return importedSvg;
};

Sprite.prototype.appendSymbol = function (content) {
  var symbol = this.wrapSVG(content, Sprite.symbolTemplate()).childNodes[0];

  this.svg.querySelector('defs').appendChild(symbol);
  if (this.browser.name === 'firefox') {
    FirefoxSymbolBugWorkaround(this.svg);
  }
};

/**
 * @returns {String}
 */
Sprite.prototype.toString = function () {
  var wrapper = document.createElement('div');
  wrapper.appendChild(this.render());
  return wrapper.innerHTML;
};

/**
 * @param {HTMLElement} [target]
 * @param {Boolean} [prepend=true]
 * @returns {HTMLElement} Rendered sprite node
 */
Sprite.prototype.render = function (target, prepend) {
  target = target || null;
  prepend = typeof prepend === 'boolean' ? prepend : true;

  var svg = this.wrapSVG(this.content.join(''), Sprite.spriteTemplate());

  if (this.browser.name === 'firefox') {
    FirefoxSymbolBugWorkaround(svg);
  }

  if (target) {
    if (prepend && target.childNodes[0]) {
      target.insertBefore(svg, target.childNodes[0]);
    } else {
      target.appendChild(svg);
    }
  }

  this.svg = svg;

  return svg;
};

module.exports = Sprite;


/***/ }),
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var App = __webpack_require__(122).default;

var app = new App({
	onElementRender: function onElementRender(markup, droplet, zone, is_output) {
		if (droplet.name === 'Letter button' && is_output) {
			markup.innerHTML = '<span>' + markup.innerHTML + '</span>';
		}

		return markup;
	}
});

app.load('templates/default.html', 'templates/pallet.json').catch(function (error) {
	console.error(error);
});

/***/ })
],[313]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,