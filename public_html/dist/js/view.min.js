/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "dist/js/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 292);
/******/ })
/************************************************************************/
/******/ ({

/***/ 10:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
var actionTypes = exports.actionTypes = {
	UI_STATE: 'ui-state',
	ZONE_ADD_ATTACHMENT: 'zone-add-attachment',
	ZONE_EDIT_ATTACHMENT: 'zone-edit-attachment',
	ZONE_DETACH_ATTACHMENT: 'zone-detach-attachment',
	SET_DIALOG_MODE: 'set-dialog-mode',
	SET_ACTIVE_DROPLET: 'set-active-droplet'
};

var dialogModes = exports.dialogModes = {
	NONE: 'none',
	EDIT_DROPLET: 'edit-droplet'
};

var uiStates = exports.uiStates = {
	INITIALISING: 'initialising',
	ACTIVE: 'active'
};

var messageCommands = exports.messageCommands = {
	RELOAD: 'reload'
};

var errorCodes = exports.errorCodes = {
	NOT_A_DROPLET: 'A valid Droplet instance must be passed to DropZone#willAccept.'
};

var setLabels = exports.setLabels = {
	value: 'Value',
	attrs: 'Attributes',
	tagName: 'Tag name',
	innerHTML: 'HTML content'
};

/***/ }),

/***/ 108:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _Communicator = __webpack_require__(39);

var _Communicator2 = _interopRequireDefault(_Communicator);

var _constants = __webpack_require__(10);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var View = function View() {
	var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	this.settings = settings;
	this._comms = new _Communicator2.default('view', window.location.origin, {
		message: this._handleAppMessage.bind(this)
	});

	this._comms.registerGuestAddress('app', window.top);

	this.scripts = [];
};

View.prototype = {
	_handleAppMessage: function _handleAppMessage(message) {
		// console.log('message to "view"!', message);

		if (message.cmd === _constants.messageCommands.RELOAD) {
			// reload request
			// console.log('reloading...');
			// console.log(message.data);
			this.settings.container.innerHTML = message.data.markup;

			this._evalScripts();
		}
	},

	/**
  * Gather scripts (besides view script) and re-insert in order
  */
	_evalScripts: function _evalScripts() {
		var _this = this;

		this.scripts = [];

		document.querySelectorAll('.view script').forEach(function (script, index) {
			var new_script;

			new_script = document.createElement('script');
			new_script.src = script.src;
			new_script.type = script.type;
			new_script.onload = function () {
				this._loadScript(index + 1);
			}.bind(_this);

			_this.scripts.push({
				new: new_script,
				old: script
			});
		});

		this._loadScript(0);
	},

	_loadScript: function _loadScript(index) {
		if (this.scripts[index]) {
			this.scripts[index].old.parentNode.replaceChild(this.scripts[index].new, this.scripts[index].old);
		}
	}
};

exports.default = View;

/***/ }),

/***/ 292:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// require.ensure([], () => {
var View = __webpack_require__(108).default;

new View({
	container: document.querySelector('.view')
});
// }, 'view');

/***/ }),

/***/ 39:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
var localStorage = window.localStorage,
    JSON = JSON || window.JSON;

/**
 * from https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API
 */
var checkStorage = function checkStorage(type) {
	try {
		var storage = window[type],
		    x = '__tag_storage_test__';
		storage.setItem(x, x);
		storage.removeItem(x);
		return true;
	} catch (e) {
		return false;
	}
};

var Communicator = function Communicator(id, origin) {
	var callbacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	if (!checkStorage('localStorage')) {
		return false;
	}

	if (typeof id !== 'string') {
		throw new Error('Please choose a string-based ID for the guest.');
	}

	if (typeof origin !== 'string') {
		throw new Error('Please choose a string-based origin address.');
	}

	this._settings = {
		name: 'tag-comm-data'
	};

	this._guests = {};
	this._queue = {};
	this.id = id;

	this._origin = origin;
	this._callbacks = Object.assign({
		message: null
	}, callbacks);

	window.addEventListener('message', this._receiveMessage.bind(this), false);

	this._sendPing();
};

Communicator.prototype = {
	/**
  * Attempt to ping source window
  */
	_sendPing: function _sendPing(node) {
		var ping = this._createMessage(null, {
			ping: this.id
		});

		if (!node) {
			if (window.opener) {
				node = window.opener;
			} else if (window.top !== window) {
				node = window.top;
			}
		}

		if (node) {
			// console.log(this.id + ' >> ping!');
			this._post(node, ping);
		}
	},

	_sendPong: function _sendPong(node) {
		var pong = this._createMessage(null, {
			pong: this.id
		});

		// console.log('pong! << ' + this.id);
		this._post(node, pong);
	},

	/**
  * Registers a single guest for communication purposes.
  * @param {string} id - Guest ID. Used when sending messages.
  * @param {mixed} dest - Destination node.
  */
	registerGuestAddress: function registerGuestAddress(id, dest) {
		if (typeof dest === 'undefined') {
			throw new Error('Cannot register address for ' + id + '. ' + 'A guest address DOM node, window or frame must be defined.');
		}

		if (!('postMessage' in dest)) {
			throw new Error('Communicator cannot send messages to destination. Please choose an HTMLElement ' + 'that supports the postMessage method');
		}

		if (typeof id !== 'string') {
			throw new Error('Please choose a string-based ID for the guest.');
		}

		// register local address for guest
		this._setGuestData(id, {
			id: id,
			node: dest
		});

		// start timer
		if (this.timer) {
			window.clearInterval(this.timer);
		}
	},

	/**
  * Sets or replaces the guest data.
  * @param {string} id - Guest ID.
  * @param {object} data - Guest data.
  * @private
  */
	_setGuestData: function _setGuestData(id, data) {
		if (!this._guests[id]) {
			this._guests[id] = {
				live: false,
				node: null
			};
		}

		Object.assign(this._guests[id], data);
	},

	/**
  * Sends a message to the defined guest.
  * @param {string} to - Guest ID, as stored.
  * @param {mixed} message - Any JS compatible data to send as a message.
  */
	send: function send(to, message) {
		var guest = this._getGuestById(to);

		if (guest && guest.live) {
			// post message immediately
			this._post(to, this._createMessage(message));
		} else {
			// queue message for posting
			this._addToQueue(to, message);
		}
	},

	/**
  * Adds a message to the local 'outbox' for the guest (by ID).
  */
	_addToQueue: function _addToQueue(to, message) {
		if (!this._queue[to]) {
			this._queue[to] = [];
		}

		this._queue[to].push(message);
	},

	_sendQueue: function _sendQueue(to) {
		var a;

		if (this._queue[to] && this._guests[to]) {
			// send messages in the order they were queued
			for (a = 0; a < this._queue[to].length; a += 1) {
				this._post(this._guests[to].node, this._createMessage(this._queue[to][a]));
			}

			// clear queue for this recipient
			this._queue[to] = [];
		}
	},

	/**
  * Gets a communicator guest by its ID, or returns `null`.
  * @returns {mixed} Guest data, or `null`.
  * @private
  */
	_getGuestById: function _getGuestById(id) {
		return this._guests[id] || null;
	},

	/**
  * Get a guest by known node (i.e. that registered in `this._guests`)
  * @private
  */
	_getGuestByNode: function _getGuestByNode(node) {
		var id;

		// console.group('_getGuestByNode');
		// console.log('finding', node);

		for (id in this._guests) {
			// console.log(id, this._guests[id], (this._guests[id].node === node));
			if (this._guests.hasOwnProperty(id) && this._guests[id].node === node) {
				// console.log('node found!', id);
				return this._getGuestById(id);
			}
		}
		// console.groupEnd();

		return null;
	},

	/**
  * Actually posts the message to the destination.
  * @param {string} to - Guest ID.
  * @param {mixed} message - Any JS compatible data to send as a message.
  * @private
  */
	_post: function _post(to, message) {
		var guest, node;

		if (typeof to === 'string') {
			guest = this._getGuestById(to);

			if (!guest.node) {
				throw new Error('Cannot communicate with guest "' + to + '". Has its Node address been registered?');
			}

			node = guest.node;
		} else {
			node = to;
		}

		node.postMessage(message, this._origin);
	},

	/**
  * Invoked when a live message is received.
  * @private
  */
	_receiveMessage: function _receiveMessage(event) {
		var origin = event.origin || event.originalEvent.origin,
		    source = event.source || event.originalEvent.source,
		    message = event.data,
		    guest;

		// console.group('_receiveMessage');
		// console.log('to "' + this.id + '":', event.data);
		if (origin !== location.origin) return;

		if ((message.ping || message.pong) && this._getGuestByNode(source)) {
			// received a ping/pong from valid source
			guest = message.ping || message.pong;
			// console.log(this.id, 'setting guest "', guest, '" live');
			this._setGuestLive(guest);
			this._sendQueue(guest);

			if (message.ping) {
				// pong back a ping (don't pong a pong or we'll be here forever)
				this._sendPong(source);
			}
		}

		if (this._callbacks.message && message.originalMessage) {
			this._callbacks.message(message.originalMessage);
		}

		// console.groupEnd();
	},

	_setGuestLive: function _setGuestLive(id) {
		this._setGuestData(id, {
			live: true
		});
	},

	_createMessage: function _createMessage(message, data) {
		return Object.assign({}, data, {
			host: this.id,
			originalMessage: message
		});
	}
};

exports.default = Communicator;

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,