webpackJsonp([1],{

/***/ 123:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _Communicator = __webpack_require__(47);

var _Communicator2 = _interopRequireDefault(_Communicator);

var _constants = __webpack_require__(8);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Handles the view frame communication with the App class.
 * @class
 */
var View = function View() {
	var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	this.settings = settings;
	this._comms = new _Communicator2.default('view', window.location.origin, {
		message: this._handleAppMessage.bind(this)
	});

	this._comms.registerGuestAddress('app', window.top);

	this._scripts = [];
	this._callbacks = {};
};

View.prototype = {
	/**
  * Produces a dialog using the App class. Uses a callback workflow to avoid reliance
  * on Promise polyfills or ES2015.
  * @param {string} title - See {@link App#dialog}
  * @param {mixes} message - See {@link App#dialog}
  * @param {array} [buttons] - See {@link App#dialog}
  * @param {function} [after] - Callback function to invoke once the dialog has been completed.
  */
	dialog: function dialog(title, message) {
		var buttons = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
		var after = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

		var id;

		// send a dialog command to the App class
		id = this._comms.send('app', {
			cmd: _constants.messageCommands.DIALOG,
			data: {
				title: title,
				message: message,
				buttons: buttons
			}
		});

		// store the callback for later invocation, based on the generated message ID
		this._callbacks[id] = after;
	},

	/**
  * Handles messages sent via the Communicator class (mainly from the UI class).
  * @param {object} message - Data, as sent by the originator
  * @param {string} id - Message ID.
  */
	_handleAppMessage: function _handleAppMessage(message, id) {
		switch (message.cmd) {
			case _constants.messageCommands.RELOAD:
				// reload request
				this.settings.container.innerHTML = message.data.markup;

				this._evalScripts();
				break;

			case _constants.messageCommands.RESET:
				this._reset();
				break;

			case _constants.messageCommands.DIALOG_CALLBACK:
				// message from a dialog triggered with View#dialog
				if (this._callbacks[id]) {
					// id exists within callack object, fire and delete
					this._callbacks[id].apply(this, [message.data, message.action, message.action_data]);

					this._callbacks[id] = null;
				}
		}
	},

	/**
  * Gather scripts (besides view script) and re-insert in order
  */
	_evalScripts: function _evalScripts() {
		var _this = this;

		this._scripts = [];

		document.querySelectorAll('.view script').forEach(function (script, index) {
			var new_script;

			new_script = document.createElement('script');
			new_script.src = script.src;
			new_script.type = script.type;
			new_script.onload = function () {
				this._loadScript(index + 1);
			}.bind(_this);

			_this._scripts.push({
				new: new_script,
				old: script
			});
		});

		this._loadScript(0);
	},

	_loadScript: function _loadScript(index) {
		if (this._scripts[index]) {
			this._scripts[index].old.parentNode.replaceChild(this._scripts[index].new, this._scripts[index].old);
		}
	},

	_reset: function _reset() {
		this.settings.container.innerHTML = '';
	}
};

exports.default = View;

/***/ }),

/***/ 314:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var View = __webpack_require__(123).default;

window.view = new View({
	container: document.querySelector('.view')
});

/***/ }),

/***/ 47:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
var Communicator = function Communicator(id, origin) {
	var callbacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	if (typeof id !== 'string') {
		throw new Error('Please choose a string-based ID for the guest.');
	}

	if (typeof origin !== 'string') {
		throw new Error('Please choose a string-based origin address.');
	}

	this._settings = {
		name: 'tag-comm-data'
	};

	this._guests = {};
	this._queue = {};
	this.id = id;
	this.message_index = 0;

	this._origin = origin;
	this._callbacks = Object.assign({
		message: null
	}, callbacks);

	window.addEventListener('message', this._receiveMessage.bind(this), false);

	this._sendPing();
};

Communicator.prototype = {
	/**
  * Attempt to ping source window
  */
	_sendPing: function _sendPing(node) {
		var ping = this._createMessage(null, {
			ping: this.id
		});

		if (!node) {
			if (window.opener) {
				node = window.opener;
			} else if (window.top !== window) {
				node = window.top;
			}
		}

		if (node) {
			this._post(node, ping);
		}
	},

	_sendPong: function _sendPong(node) {
		var pong = this._createMessage(null, {
			pong: this.id
		});

		this._post(node, pong);
	},

	/**
  * Registers a single guest for communication purposes.
  * @param {string} id - Guest ID. Used when sending messages.
  * @param {mixed} dest - Destination node.
  */
	registerGuestAddress: function registerGuestAddress(id, dest) {
		if (typeof dest === 'undefined') {
			throw new Error('Cannot register address for ' + id + '. ' + 'A guest address DOM node, window or frame must be defined.');
		}

		if (!('postMessage' in dest)) {
			throw new Error('Communicator cannot send messages to destination. Please choose an HTMLElement ' + 'that supports the postMessage method');
		}

		if (typeof id !== 'string') {
			throw new Error('Please choose a string-based ID for the guest.');
		}

		// register local address for guest
		this._setGuestData(id, {
			id: id,
			node: dest
		});

		// start timer
		if (this.timer) {
			window.clearInterval(this.timer);
		}
	},

	/**
  * Sets or replaces the guest data.
  * @param {string} id - Guest ID.
  * @param {object} data - Guest data.
  * @private
  */
	_setGuestData: function _setGuestData(id, data) {
		if (!this._guests[id]) {
			this._guests[id] = {
				live: false,
				node: null
			};
		}

		Object.assign(this._guests[id], data);
	},

	/**
  * @param {string} to - Guest ID, as stored.
  * @param {mixed} message - Any JS compatible data to send as a message.
  * @param {string} id - Add a message ID to allow the recipient to prevent race conditions.
  * @description
  * Sends a message to the defined guest.
  * If no ID is defined, one will be generated.
  * @returns {string} The ID of the message as defined or generated.
  */
	send: function send(to, message) {
		var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

		var guest = this._getGuestById(to);

		id = id || this._generateSendId(to);

		if (guest && guest.live) {
			// post message immediately
			this._post(to, this._createMessage(message, {}, id));
		} else {
			// queue message for posting
			this._addToQueue(to, message, id);
		}

		return id;
	},

	/**
  * Adds a message to the local 'outbox' for the guest (by ID).
  */
	_addToQueue: function _addToQueue(to, message, id) {
		if (!this._queue[to]) {
			this._queue[to] = [];
		}

		this._queue[to].push({
			message: message,
			id: id
		});
	},

	_sendQueue: function _sendQueue(to) {
		var a;

		if (this._queue[to] && this._guests[to]) {
			// send messages in the order they were queued
			for (a = 0; a < this._queue[to].length; a += 1) {
				this._post(this._guests[to].node, this._createMessage(this._queue[to][a].message, {}, this._queue[to][a].id));
			}

			// clear queue for this recipient
			this._queue[to] = [];
		}
	},

	/**
  * Gets a communicator guest by its ID, or returns `null`.
  * @returns {mixed} Guest data, or `null`.
  * @private
  */
	_getGuestById: function _getGuestById(id) {
		return this._guests[id] || null;
	},

	/**
  * Get a guest by known node (i.e. that registered in `this._guests`)
  * @private
  */
	_getGuestByNode: function _getGuestByNode(node) {
		var id;

		for (id in this._guests) {
			if (this._guests.hasOwnProperty(id) && this._guests[id].node === node) {
				return this._getGuestById(id);
			}
		}

		return null;
	},

	/**
  * Actually posts the message to the destination.
  * @param {string} to - Guest ID.
  * @param {mixed} message - Any JS compatible data to send as a message.
  * @private
  */
	_post: function _post(to, message) {
		var guest, node;

		if (typeof to === 'string') {
			guest = this._getGuestById(to);

			if (!guest.node) {
				throw new Error('Cannot communicate with guest "' + to + '". Has its Node address been registered?');
			}

			node = guest.node;
		} else {
			node = to;
		}

		node.postMessage(message, this._origin);
	},

	/**
  * Invoked when a live message is received.
  * @private
  */
	_receiveMessage: function _receiveMessage(event) {
		var origin = event.origin || event.originalEvent.origin,
		    source = event.source || event.originalEvent.source,
		    message = event.data,
		    guest;

		if (origin !== location.origin) return;

		if ((message.ping || message.pong) && this._getGuestByNode(source)) {
			// received a ping/pong from valid source
			guest = message.ping || message.pong;

			this._setGuestLive(guest);
			this._sendQueue(guest);

			if (message.ping) {
				// pong back a ping (don't pong a pong or we'll be here forever)
				this._sendPong(source);
			}
		}

		if (this._callbacks.message && message.originalMessage) {
			this._callbacks.message(message.originalMessage, message.id);
		}
	},

	_setGuestLive: function _setGuestLive(id) {
		this._setGuestData(id, {
			live: true
		});
	},

	_createMessage: function _createMessage(message, data, id) {
		return Object.assign({}, data, {
			host: this.id,
			id: id,
			originalMessage: message
		});
	},

	_generateSendId: function _generateSendId(prefix) {
		if (window.performance && 'now' in window.performance) {
			return prefix + '-xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
				var r = (window.performance.now() + Math.random() * 16) % 16 | 0;
				return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
			});
		} else {
			return prefix + '-' + this.message_index++;
		}
	}
};

exports.default = Communicator;

/***/ }),

/***/ 8:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
/**
 * @module assets/constants
 */

/**
 * Action types
 * @private
 */
var actionTypes = exports.actionTypes = {
	UI_STATE: 'ui-state',
	ZONE_ADD_ATTACHMENT: 'zone-add-attachment',
	ZONE_EDIT_ATTACHMENT: 'zone-edit-attachment',
	ZONE_DETACH_ATTACHMENT: 'zone-detach-attachment',
	ZONE_CLEAR_ALL_ATTACHMENTS: 'zone-clear-all-attachments',
	SET_DIALOG_MODE: 'set-dialog-mode',
	SET_ACTIVE_DROPLET: 'set-active-droplet',
	SET_TOUR_STAGE: 'set-tour-stage',
	SHOW_TOOLTIP: 'show-tooltip',
	HIDE_TOOLTIP: 'hide-tooltip',
	SET_TOOLTIP_CONTENT: 'set-tooltip-content',
	COMPLETE_FIRST_DROP: 'complete-first-drop',
	COMPLETE_LAST_DROP: 'complete-last-drop',
	RESET_APP: 'reset-app'
};

/**
 * Dialog modes
 */
var dialogModes = exports.dialogModes = {
	NONE: 'none',
	GENERAL: 'general',
	EDIT_DROPLET: 'edit-droplet',
	TOUR: 'tour'
};

var uiStates = exports.uiStates = {
	INITIALISING: 'initialising',
	ACTIVE: 'active'
};

var messageCommands = exports.messageCommands = {
	RELOAD: 'reload',
	RESET: 'reset',
	DIALOG: 'dialog',
	DIALOG_CALLBACK: 'dialog-callback'
};

var errorCodes = exports.errorCodes = {
	NOT_A_DROPLET: 'A valid Droplet instance must be passed to DropZone#willAccept.'
};

var setLabels = exports.setLabels = {
	value: 'Value',
	attrs: 'Attributes',
	tagName: 'Tag name',
	innerHTML: 'HTML content'
};

/***/ })

},[314]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,